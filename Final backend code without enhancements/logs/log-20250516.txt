2025-05-16 09:36:12.735 +05:30 [INF] User profile is available. Using 'C:\Users\divya.t1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-16 09:39:13.973 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-16 09:39:13.978 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-16 09:39:13.981 +05:30 [INF] Hosting environment: Development
2025-05-16 09:39:13.982 +05:30 [INF] Content root path: C:\Users\divya.t1\Desktop\7-5-25-WisVest-Backend-main
2025-05-16 09:39:29.103 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/swagger/index.html - null null
2025-05-16 09:39:29.637 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/swagger/index.html - 200 null text/html;charset=utf-8 544.1164ms
2025-05-16 09:39:29.979 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/swagger/v1/swagger.json - null null
2025-05-16 09:39:30.305 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 325.6731ms
2025-05-16 09:40:16.117 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 118
2025-05-16 09:40:16.134 +05:30 [INF] CORS policy execution failed.
2025-05-16 09:40:16.137 +05:30 [INF] Request origin http://localhost:5251 does not have permission to access the resource.
2025-05-16 09:40:16.154 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 09:40:16.296 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 09:40:16.559 +05:30 [INF] Starting allocation calculation...
2025-05-16 09:40:16.646 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 09:40:16.651 +05:30 [INF] Looking up base allocation for key: Low+Short
2025-05-16 09:40:16.662 +05:30 [INF] Base allocation found: {"equity":10,"fixedIncome":40,"commodities":5,"cash":40,"realEstate":5}
2025-05-16 09:40:16.667 +05:30 [INF] Looking up age adjustment rules for key: 30-45
2025-05-16 09:40:16.670 +05:30 [INF] Age adjustments found: {}
2025-05-16 09:40:16.674 +05:30 [INF] Looking up goal tuning for goal: Big Purchase
2025-05-16 09:40:16.686 +05:30 [INF] Goal tuning found: {"balanced":true}
2025-05-16 09:40:16.733 +05:30 [INF] Sub-allocations for equity: {"Large Cap":10.42,"Mid Cap":4.17,"Small Cap":2.08}
2025-05-16 09:40:16.738 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":15,"Corp Bonds":6,"Fixed Dep":9}
2025-05-16 09:40:16.742 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":7.29,"Energy":2.92,"Agriculture":1.46}
2025-05-16 09:40:16.749 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":6.92,"Savings Acc":11.54,"T. Bill":11.54}
2025-05-16 09:40:16.754 +05:30 [INF] Sub-allocations for realEstate: {"REITs":4.67,"Residential Prop":4.67,"Commercial Prop":2.33}
2025-05-16 09:40:16.760 +05:30 [INF] Added sub-assets for equity: {"Large Cap":10.42,"Mid Cap":4.17,"Small Cap":2.08}
2025-05-16 09:40:16.767 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":15,"Corp Bonds":6,"Fixed Dep":9}
2025-05-16 09:40:16.773 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":7.29,"Energy":2.92,"Agriculture":1.46}
2025-05-16 09:40:16.779 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":6.92,"Savings Acc":11.54,"T. Bill":11.54}
2025-05-16 09:40:16.785 +05:30 [INF] Added sub-assets for realEstate: {"REITs":4.67,"Residential Prop":4.67,"Commercial Prop":2.33}
2025-05-16 09:40:16.876 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":16.67,"subAssets":{"Large Cap":10.42,"Mid Cap":4.17,"Small Cap":2.08}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":15,"Corp Bonds":6,"Fixed Dep":9}},"commodities":{"percentage":11.67,"subAssets":{"Precious Metals":7.29,"Energy":2.92,"Agriculture":1.46}},"cash":{"percentage":30,"subAssets":{"Liquid Mutual Funds":6.92,"Savings Acc":11.54,"T. Bill":11.54}},"realEstate":{"percentage":11.67,"subAssets":{"REITs":4.67,"Residential Prop":4.67,"Commercial Prop":2.33}}}
2025-05-16 09:40:16.899 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 09:40:16.902 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":16.67,"subAssets":{"Large Cap":10.42,"Mid Cap":4.17,"Small Cap":2.08}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":15,"Corp Bonds":6,"Fixed Dep":9}},"commodities":{"percentage":11.67,"subAssets":{"Precious Metals":7.29,"Energy":2.92,"Agriculture":1.46}},"cash":{"percentage":30,"subAssets":{"Liquid Mutual Funds":6.92,"Savings Acc":11.54,"T. Bill":11.54}},"realEstate":{"percentage":11.67,"subAssets":{"REITs":4.67,"Residential Prop":4.67,"Commercial Prop":2.33}}}
2025-05-16 09:40:16.932 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 09:40:16.975 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 655.2478ms
2025-05-16 09:40:16.981 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 09:40:16.989 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 872.2708ms
2025-05-16 09:41:06.723 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 09:41:06.732 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 09:41:06.748 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 09:41:06.760 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 09:41:06.765 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 09:41:06.772 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 09:41:06.782 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 26.1656ms
2025-05-16 09:41:06.787 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 09:41:06.791 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 67.5427ms
2025-05-16 09:41:57.580 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=3 - application/json 839
2025-05-16 09:41:57.593 +05:30 [INF] CORS policy execution failed.
2025-05-16 09:41:57.594 +05:30 [INF] Request origin http://localhost:5251 does not have permission to access the resource.
2025-05-16 09:41:57.598 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 09:41:57.613 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 09:41:57.687 +05:30 [INF] Starting product allocation calculation.
2025-05-16 09:41:57.691 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 09:41:57.711 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 09:41:57.791 +05:30 [INF] Product data loaded successfully.
2025-05-16 09:41:57.799 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 09:41:57.807 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.43, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 3.
2025-05-16 09:41:57.812 +05:30 [INF] Calculated investment amount: 407.96.
2025-05-16 09:41:57.818 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.99, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 3.
2025-05-16 09:41:57.825 +05:30 [INF] Calculated investment amount: 383.21.
2025-05-16 09:41:57.829 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 09:41:57.833 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.22, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 3.
2025-05-16 09:41:57.839 +05:30 [INF] Calculated investment amount: 155.92.
2025-05-16 09:41:57.842 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.95, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 3.
2025-05-16 09:41:57.848 +05:30 [INF] Calculated investment amount: 142.58.
2025-05-16 09:41:57.851 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 09:41:57.855 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.07, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 3.
2025-05-16 09:41:57.861 +05:30 [INF] Calculated investment amount: 72.22.
2025-05-16 09:41:57.866 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.01, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 3.
2025-05-16 09:41:57.873 +05:30 [INF] Calculated investment amount: 69.63.
2025-05-16 09:41:57.877 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 09:41:57.881 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.65, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 3.
2025-05-16 09:41:57.885 +05:30 [INF] Calculated investment amount: 660.84.
2025-05-16 09:41:57.888 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.35, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 3.
2025-05-16 09:41:57.891 +05:30 [INF] Calculated investment amount: 638.56.
2025-05-16 09:41:57.893 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 09:41:57.897 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.94, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 3.
2025-05-16 09:41:57.901 +05:30 [INF] Calculated investment amount: 241.34.
2025-05-16 09:41:57.903 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.06, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 3.
2025-05-16 09:41:57.907 +05:30 [INF] Calculated investment amount: 249.09.
2025-05-16 09:41:57.910 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 09:41:57.914 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.42, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 3.
2025-05-16 09:41:57.920 +05:30 [INF] Calculated investment amount: 376.41.
2025-05-16 09:41:57.923 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.58, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 3.
2025-05-16 09:41:57.930 +05:30 [INF] Calculated investment amount: 387.83.
2025-05-16 09:41:57.932 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 09:41:57.935 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.03, TargetAmount: 10000, AnnualReturn: 7.8, InvestmentHorizon: 3.
2025-05-16 09:41:57.940 +05:30 [INF] Calculated investment amount: 321.7.
2025-05-16 09:41:57.943 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.26, TargetAmount: 10000, AnnualReturn: 6.3, InvestmentHorizon: 3.
2025-05-16 09:41:57.950 +05:30 [INF] Calculated investment amount: 271.4.
2025-05-16 09:41:57.953 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Energy.
2025-05-16 09:41:57.956 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.38, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 3.
2025-05-16 09:41:57.962 +05:30 [INF] Calculated investment amount: 105.98.
2025-05-16 09:41:57.964 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.54, TargetAmount: 10000, AnnualReturn: 10.3, InvestmentHorizon: 3.
2025-05-16 09:41:57.969 +05:30 [INF] Calculated investment amount: 114.76.
2025-05-16 09:41:57.972 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Agriculture.
2025-05-16 09:41:57.976 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.8, TargetAmount: 10000, AnnualReturn: 8.5, InvestmentHorizon: 3.
2025-05-16 09:41:57.985 +05:30 [INF] Calculated investment amount: 62.63.
2025-05-16 09:41:57.988 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.66, TargetAmount: 10000, AnnualReturn: 7, InvestmentHorizon: 3.
2025-05-16 09:41:57.996 +05:30 [INF] Calculated investment amount: 53.88.
2025-05-16 09:41:57.998 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Liquid Mutual Funds.
2025-05-16 09:41:58.001 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.53, TargetAmount: 10000, AnnualReturn: 5.2, InvestmentHorizon: 3.
2025-05-16 09:41:58.006 +05:30 [INF] Calculated investment amount: 303.2.
2025-05-16 09:41:58.009 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.39, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 3.
2025-05-16 09:41:58.017 +05:30 [INF] Calculated investment amount: 292.84.
2025-05-16 09:41:58.020 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Savings Acc.
2025-05-16 09:41:58.024 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.39, TargetAmount: 10000, AnnualReturn: 3.5, InvestmentHorizon: 3.
2025-05-16 09:41:58.031 +05:30 [INF] Calculated investment amount: 486.15.
2025-05-16 09:41:58.035 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.15, TargetAmount: 10000, AnnualReturn: 4, InvestmentHorizon: 3.
2025-05-16 09:41:58.040 +05:30 [INF] Calculated investment amount: 546.73.
2025-05-16 09:41:58.043 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: T. Bill.
2025-05-16 09:41:58.048 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.61, TargetAmount: 10000, AnnualReturn: 5.1, InvestmentHorizon: 3.
2025-05-16 09:41:58.054 +05:30 [INF] Calculated investment amount: 483.23.
2025-05-16 09:41:58.057 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.93, TargetAmount: 10000, AnnualReturn: 5.4, InvestmentHorizon: 3.
2025-05-16 09:41:58.063 +05:30 [INF] Calculated investment amount: 506.45.
2025-05-16 09:41:58.065 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: REITs.
2025-05-16 09:41:58.068 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.26, TargetAmount: 10000, AnnualReturn: 8.9, InvestmentHorizon: 3.
2025-05-16 09:41:58.071 +05:30 [INF] Calculated investment amount: 174.99.
2025-05-16 09:41:58.073 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.41, TargetAmount: 10000, AnnualReturn: 9.5, InvestmentHorizon: 3.
2025-05-16 09:41:58.080 +05:30 [INF] Calculated investment amount: 183.56.
2025-05-16 09:41:58.084 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Residential Prop.
2025-05-16 09:41:58.087 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.23, TargetAmount: 10000, AnnualReturn: 6.7, InvestmentHorizon: 3.
2025-05-16 09:41:58.093 +05:30 [INF] Calculated investment amount: 183.57.
2025-05-16 09:41:58.098 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.44, TargetAmount: 10000, AnnualReturn: 7.3, InvestmentHorizon: 3.
2025-05-16 09:41:58.104 +05:30 [INF] Calculated investment amount: 197.51.
2025-05-16 09:41:58.107 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Commercial Prop.
2025-05-16 09:41:58.113 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.19, TargetAmount: 10000, AnnualReturn: 10.2, InvestmentHorizon: 3.
2025-05-16 09:41:58.116 +05:30 [INF] Calculated investment amount: 88.92.
2025-05-16 09:41:58.117 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.14, TargetAmount: 10000, AnnualReturn: 9.8, InvestmentHorizon: 3.
2025-05-16 09:41:58.121 +05:30 [INF] Calculated investment amount: 86.12.
2025-05-16 09:41:58.150 +05:30 [INF] Product allocations saved successfully to ProductAllocations.json
2025-05-16 09:41:58.156 +05:30 [INF] Final Product Allocations: {"equity":{"Large Cap":{"BlueChip Fund ":{"product_name":"BlueChip Fund ","annual_return":10,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Stable returns","Low risk"],"cons":["Lower growth"],"risk_level":"Low","percentage_split":5.43,"InvestmentAmount":407.96},"Index Fund ":{"product_name":"Index Fund ","annual_return":9.2,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Diversified","Low cost"],"cons":["Market dependent"],"risk_level":"Moderate","percentage_split":4.99,"InvestmentAmount":383.21}},"Mid Cap":{"Mid Cap Growth ":{"product_name":"Mid Cap Growth ","annual_return":12.5,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["High growth potential"],"cons":["Volatile"],"risk_level":"High","percentage_split":2.22,"InvestmentAmount":155.92},"MidCap Blend ":{"product_name":"MidCap Blend ","annual_return":11,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["Balanced approach"],"cons":["Moderate risk"],"risk_level":"Moderate","percentage_split":1.95,"InvestmentAmount":142.58}},"Small Cap":{"SmallCap Aggressive ":{"product_name":"SmallCap Aggressive ","annual_return":14,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Medium","pros":["High return potential"],"cons":["Very volatile"],"risk_level":"High","percentage_split":1.07,"InvestmentAmount":72.22},"Emerging Companies ":{"product_name":"Emerging Companies ","annual_return":13.2,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Low","pros":["Growth stocks"],"cons":["Liquidity risk"],"risk_level":"High","percentage_split":1.01,"InvestmentAmount":69.63}}},"fixedIncome":{"Gov Bonds":{"Government Bond ":{"product_name":"Government Bond ","annual_return":5,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Very safe","Guaranteed return"],"cons":["Low return"],"risk_level":"Low","percentage_split":7.65,"InvestmentAmount":660.84},"Sovereign Bond ":{"product_name":"Sovereign Bond ","annual_return":4.8,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Stable income"],"cons":["Interest rate sensitive"],"risk_level":"Low","percentage_split":7.35,"InvestmentAmount":638.56}},"Corp Bonds":{"Corporate Bond ":{"product_name":"Corporate Bond ","annual_return":6.8,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Better return"],"cons":["Company risk"],"risk_level":"Moderate","percentage_split":2.94,"InvestmentAmount":241.34},"Private Corp Bond ":{"product_name":"Private Corp Bond ","annual_return":7.1,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Good yield"],"cons":["Credit risk"],"risk_level":"High","percentage_split":3.06,"InvestmentAmount":249.09}},"Fixed Dep":{"Fixed Deposit ":{"product_name":"Fixed Deposit ","annual_return":5.5,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Capital safety"],"cons":["Low returns"],"risk_level":"Low","percentage_split":4.42,"InvestmentAmount":376.41},"Bank FD ":{"product_name":"Bank FD ","annual_return":5.7,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Easy access"],"cons":["Taxable"],"risk_level":"Low","percentage_split":4.58,"InvestmentAmount":387.83}}},"commodities":{"Precious Metals":{"Gold ETF":{"product_name":"Gold ETF","annual_return":7.8,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Inflation hedge","Safe haven asset"],"cons":["No income generation","Price volatility"],"risk_level":"Moderate","percentage_split":4.03,"InvestmentAmount":321.7},"Silver Trust":{"product_name":"Silver Trust","annual_return":6.3,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Alternative investment","Deflation hedge"],"cons":["Subject to price swings","Not income-producing"],"risk_level":"Moderate","percentage_split":3.26,"InvestmentAmount":271.4}},"Energy":{"Energy Fund":{"product_name":"Energy Fund","annual_return":9.2,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["High demand","Diversified exposure"],"cons":["Subject to price fluctuations","Geopolitical risks"],"risk_level":"Moderate","percentage_split":1.38,"InvestmentAmount":105.98},"Oil \u0026 Gas ETF":{"product_name":"Oil \u0026 Gas ETF","annual_return":10.3,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["Strong returns","Global demand"],"cons":["Environmental impact","Political risk"],"risk_level":"High","percentage_split":1.54,"InvestmentAmount":114.76}},"Agriculture":{"Agricultural ETF":{"product_name":"Agricultural ETF","annual_return":8.5,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Diversification","Growth potential"],"cons":["Weather dependent","Global supply issues"],"risk_level":"Moderate","percentage_split":0.8,"InvestmentAmount":62.63},"Crop Futures B":{"product_name":"Crop Futures B","annual_return":7,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Alternative to stocks","Hedge against inflation"],"cons":["Market volatility","Weather sensitivity"],"risk_level":"Moderate","percentage_split":0.66,"InvestmentAmount":53.88}}},"cash":{"Liquid Mutual Funds":{"Liquid Fund":{"product_name":"Liquid Fund","annual_return":5.2,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Quick redemption","Low risk"],"cons":["Lower returns","Short-term horizon"],"risk_level":"Low","percentage_split":3.53,"InvestmentAmount":303.2},"Ultra Short Fund":{"product_name":"Ultra Short Fund","annual_return":5,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Better returns than savings","High liquidity"],"cons":["Interest rate risk","Short-term only"],"risk_level":"Low","percentage_split":3.39,"InvestmentAmount":292.84}},"Savings Acc":{"Standard Savings Account":{"product_name":"Standard Savings Account","annual_return":3.5,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Very liquid","Capital safety"],"cons":["Very low returns","Not suitable for growth"],"risk_level":"Low","percentage_split":5.39,"InvestmentAmount":486.15},"High Interest Savings":{"product_name":"High Interest Savings","annual_return":4,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Slightly higher returns","Safe and accessible"],"cons":["Still low returns","Inflation risk"],"risk_level":"Low","percentage_split":6.15,"InvestmentAmount":546.73}},"T. Bill":{"91-Day T-Bill":{"product_name":"91-Day T-Bill","annual_return":5.1,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Government backed","Low risk"],"cons":["Fixed tenure","Lower yield"],"risk_level":"Low","percentage_split":5.61,"InvestmentAmount":483.23},"182-Day T-Bill":{"product_name":"182-Day T-Bill","annual_return":5.4,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Safe investment","Short maturity"],"cons":["Not liquid before maturity","Limited returns"],"risk_level":"Low","percentage_split":5.93,"InvestmentAmount":506.45}}},"realEstate":{"REITs":{"REITs Trust ":{"product_name":"REITs Trust ","annual_return":8.9,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"Moderate","pros":["Stable returns","Diversified portfolio"],"cons":["Sensitive to interest rates","Limited growth"],"risk_level":"Moderate","percentage_split":2.26,"InvestmentAmount":174.99},"Vanguad Real Estate":{"product_name":"Vanguad Real Estate","annual_return":9.5,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"High","pros":["Tax efficiency","Regular income"],"cons":["Market volatility","Fees"],"risk_level":"High","percentage_split":2.41,"InvestmentAmount":183.56}},"Residential Prop":{"Residential Scheme ":{"product_name":"Residential Scheme ","annual_return":6.7,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Low","pros":["Stable income","Low volatility"],"cons":["Low liquidity","Maintenance costs"],"risk_level":"Low","percentage_split":2.23,"InvestmentAmount":183.57},"Housing Fund":{"product_name":"Housing Fund","annual_return":7.3,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Moderate","pros":["Tax benefits","Long-term growth"],"cons":["Location dependent","Slow ROI"],"risk_level":"Moderate","percentage_split":2.44,"InvestmentAmount":197.51}},"Commercial Prop":{"Commercial Plaza":{"product_name":"Commercial Plaza","annual_return":10.2,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Low","pros":["High rental yields","Strong appreciation"],"cons":["High initial cost","Vacancy risk"],"risk_level":"High","percentage_split":1.19,"InvestmentAmount":88.92},"Office Fund":{"product_name":"Office Fund","annual_return":9.8,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Moderate","pros":["Steady returns","Long leases"],"cons":["Tenant turnover","High maintenance"],"risk_level":"High","percentage_split":1.14,"InvestmentAmount":86.12}}}}
2025-05-16 09:41:58.187 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 09:41:58.193 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 571.5508ms
2025-05-16 09:41:58.196 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 09:41:58.199 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=3 - 200 null application/json; charset=utf-8 619.1662ms
2025-05-16 09:42:25.749 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 09:42:25.759 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 09:42:25.768 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 09:42:25.780 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 09:42:25.787 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 09:42:25.800 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 09:42:25.812 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 35.9852ms
2025-05-16 09:42:25.815 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 09:42:25.819 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 69.4886ms
2025-05-16 09:43:31.121 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 122
2025-05-16 09:43:31.126 +05:30 [INF] CORS policy execution failed.
2025-05-16 09:43:31.128 +05:30 [INF] Request origin http://localhost:5251 does not have permission to access the resource.
2025-05-16 09:43:31.130 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 09:43:31.132 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 09:43:31.138 +05:30 [INF] Starting allocation calculation...
2025-05-16 09:43:31.143 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 09:43:31.146 +05:30 [INF] Looking up base allocation for key: Mid+Long
2025-05-16 09:43:31.148 +05:30 [INF] Base allocation found: {"equity":50,"fixedIncome":30,"commodities":10,"cash":5,"realEstate":5}
2025-05-16 09:43:31.153 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 09:43:31.155 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 09:43:31.159 +05:30 [INF] Looking up goal tuning for goal: Big Purchase
2025-05-16 09:43:31.161 +05:30 [INF] Goal tuning found: {"balanced":true}
2025-05-16 09:43:31.168 +05:30 [INF] Sub-allocations for equity: {"Large Cap":12,"Mid Cap":9,"Small Cap":9}
2025-05-16 09:43:31.174 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":9.75,"Corp Bonds":13,"Fixed Dep":9.75}
2025-05-16 09:43:31.178 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":7,"Energy":5.25,"Agriculture":5.25}
2025-05-16 09:43:31.181 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":2.25,"Savings Acc":2.25,"T. Bill":3}
2025-05-16 09:43:31.184 +05:30 [INF] Sub-allocations for realEstate: {"REITs":4.69,"Residential Prop":3.12,"Commercial Prop":4.69}
2025-05-16 09:43:31.190 +05:30 [INF] Added sub-assets for equity: {"Large Cap":12,"Mid Cap":9,"Small Cap":9}
2025-05-16 09:43:31.193 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":9.75,"Corp Bonds":13,"Fixed Dep":9.75}
2025-05-16 09:43:31.197 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":7,"Energy":5.25,"Agriculture":5.25}
2025-05-16 09:43:31.200 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":2.25,"Savings Acc":2.25,"T. Bill":3}
2025-05-16 09:43:31.205 +05:30 [INF] Added sub-assets for realEstate: {"REITs":4.69,"Residential Prop":3.12,"Commercial Prop":4.69}
2025-05-16 09:43:31.210 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":30,"subAssets":{"Large Cap":12,"Mid Cap":9,"Small Cap":9}},"fixedIncome":{"percentage":32.5,"subAssets":{"Gov Bonds":9.75,"Corp Bonds":13,"Fixed Dep":9.75}},"commodities":{"percentage":17.5,"subAssets":{"Precious Metals":7,"Energy":5.25,"Agriculture":5.25}},"cash":{"percentage":7.5,"subAssets":{"Liquid Mutual Funds":2.25,"Savings Acc":2.25,"T. Bill":3}},"realEstate":{"percentage":12.5,"subAssets":{"REITs":4.69,"Residential Prop":3.12,"Commercial Prop":4.69}}}
2025-05-16 09:43:31.217 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 09:43:31.222 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":30,"subAssets":{"Large Cap":12,"Mid Cap":9,"Small Cap":9}},"fixedIncome":{"percentage":32.5,"subAssets":{"Gov Bonds":9.75,"Corp Bonds":13,"Fixed Dep":9.75}},"commodities":{"percentage":17.5,"subAssets":{"Precious Metals":7,"Energy":5.25,"Agriculture":5.25}},"cash":{"percentage":7.5,"subAssets":{"Liquid Mutual Funds":2.25,"Savings Acc":2.25,"T. Bill":3}},"realEstate":{"percentage":12.5,"subAssets":{"REITs":4.69,"Residential Prop":3.12,"Commercial Prop":4.69}}}
2025-05-16 09:43:31.226 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 09:43:31.230 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 95.171ms
2025-05-16 09:43:31.236 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 09:43:31.239 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 118.7121ms
2025-05-16 09:43:54.969 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 09:43:54.974 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 09:43:55.004 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 09:43:55.013 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 09:43:55.019 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 09:43:55.022 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 09:43:55.026 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 13.5043ms
2025-05-16 09:43:55.029 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 09:43:55.032 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 62.9602ms
2025-05-16 09:44:39.438 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=100000&investmentHorizon=9 - application/json 826
2025-05-16 09:44:39.457 +05:30 [INF] CORS policy execution failed.
2025-05-16 09:44:39.459 +05:30 [INF] Request origin http://localhost:5251 does not have permission to access the resource.
2025-05-16 09:44:39.460 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 09:44:39.464 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 09:44:39.478 +05:30 [INF] Starting product allocation calculation.
2025-05-16 09:44:39.481 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 09:44:39.486 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 09:44:39.550 +05:30 [INF] Product data loaded successfully.
2025-05-16 09:44:39.553 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 09:44:39.557 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.25, TargetAmount: 100000, AnnualReturn: 10, InvestmentHorizon: 9.
2025-05-16 09:44:39.562 +05:30 [INF] Calculated investment amount: 2650.61.
2025-05-16 09:44:39.566 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.75, TargetAmount: 100000, AnnualReturn: 9.2, InvestmentHorizon: 9.
2025-05-16 09:44:39.572 +05:30 [INF] Calculated investment amount: 2604.14.
2025-05-16 09:44:39.575 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 09:44:39.578 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.79, TargetAmount: 100000, AnnualReturn: 12.5, InvestmentHorizon: 9.
2025-05-16 09:44:39.583 +05:30 [INF] Calculated investment amount: 1659.44.
2025-05-16 09:44:39.590 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.21, TargetAmount: 100000, AnnualReturn: 11, InvestmentHorizon: 9.
2025-05-16 09:44:39.595 +05:30 [INF] Calculated investment amount: 1645.79.
2025-05-16 09:44:39.598 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 09:44:39.602 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.63, TargetAmount: 100000, AnnualReturn: 14, InvestmentHorizon: 9.
2025-05-16 09:44:39.607 +05:30 [INF] Calculated investment amount: 1423.76.
2025-05-16 09:44:39.610 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.37, TargetAmount: 100000, AnnualReturn: 13.2, InvestmentHorizon: 9.
2025-05-16 09:44:39.615 +05:30 [INF] Calculated investment amount: 1431.74.
2025-05-16 09:44:39.618 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 09:44:39.624 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.97, TargetAmount: 100000, AnnualReturn: 5, InvestmentHorizon: 9.
2025-05-16 09:44:39.629 +05:30 [INF] Calculated investment amount: 3203.71.
2025-05-16 09:44:39.632 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.78, TargetAmount: 100000, AnnualReturn: 4.8, InvestmentHorizon: 9.
2025-05-16 09:44:39.639 +05:30 [INF] Calculated investment amount: 3134.56.
2025-05-16 09:44:39.642 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 09:44:39.646 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.36, TargetAmount: 100000, AnnualReturn: 6.8, InvestmentHorizon: 9.
2025-05-16 09:44:39.651 +05:30 [INF] Calculated investment amount: 3518.16.
2025-05-16 09:44:39.656 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.64, TargetAmount: 100000, AnnualReturn: 7.1, InvestmentHorizon: 9.
2025-05-16 09:44:39.661 +05:30 [INF] Calculated investment amount: 3581.48.
2025-05-16 09:44:39.664 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 09:44:39.667 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.79, TargetAmount: 100000, AnnualReturn: 5.5, InvestmentHorizon: 9.
2025-05-16 09:44:39.674 +05:30 [INF] Calculated investment amount: 2958.44.
2025-05-16 09:44:39.677 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.96, TargetAmount: 100000, AnnualReturn: 5.7, InvestmentHorizon: 9.
2025-05-16 09:44:39.682 +05:30 [INF] Calculated investment amount: 3011.67.
2025-05-16 09:44:39.687 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 09:44:39.690 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.87, TargetAmount: 100000, AnnualReturn: 7.8, InvestmentHorizon: 9.
2025-05-16 09:44:39.695 +05:30 [INF] Calculated investment amount: 1968.53.
2025-05-16 09:44:39.698 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.13, TargetAmount: 100000, AnnualReturn: 6.3, InvestmentHorizon: 9.
2025-05-16 09:44:39.706 +05:30 [INF] Calculated investment amount: 1806.11.
2025-05-16 09:44:39.709 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Energy.
2025-05-16 09:44:39.712 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.48, TargetAmount: 100000, AnnualReturn: 9.2, InvestmentHorizon: 9.
2025-05-16 09:44:39.717 +05:30 [INF] Calculated investment amount: 1123.18.
2025-05-16 09:44:39.722 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.77, TargetAmount: 100000, AnnualReturn: 10.3, InvestmentHorizon: 9.
2025-05-16 09:44:39.728 +05:30 [INF] Calculated investment amount: 1146.3.
2025-05-16 09:44:39.731 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Agriculture.
2025-05-16 09:44:39.734 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.88, TargetAmount: 100000, AnnualReturn: 8.5, InvestmentHorizon: 9.
2025-05-16 09:44:39.741 +05:30 [INF] Calculated investment amount: 1382.05.
2025-05-16 09:44:39.743 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.37, TargetAmount: 100000, AnnualReturn: 7, InvestmentHorizon: 9.
2025-05-16 09:44:39.746 +05:30 [INF] Calculated investment amount: 1289.12.
2025-05-16 09:44:39.749 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Liquid Mutual Funds.
2025-05-16 09:44:39.754 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.15, TargetAmount: 100000, AnnualReturn: 5.2, InvestmentHorizon: 9.
2025-05-16 09:44:39.760 +05:30 [INF] Calculated investment amount: 728.71.
2025-05-16 09:44:39.762 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.1, TargetAmount: 100000, AnnualReturn: 5, InvestmentHorizon: 9.
2025-05-16 09:44:39.767 +05:30 [INF] Calculated investment amount: 709.07.
2025-05-16 09:44:39.770 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Savings Acc.
2025-05-16 09:44:39.772 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.05, TargetAmount: 100000, AnnualReturn: 3.5, InvestmentHorizon: 9.
2025-05-16 09:44:39.777 +05:30 [INF] Calculated investment amount: 770.42.
2025-05-16 09:44:39.781 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.2, TargetAmount: 100000, AnnualReturn: 4, InvestmentHorizon: 9.
2025-05-16 09:44:39.787 +05:30 [INF] Calculated investment amount: 843.1.
2025-05-16 09:44:39.788 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: T. Bill.
2025-05-16 09:44:39.791 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.46, TargetAmount: 100000, AnnualReturn: 5.1, InvestmentHorizon: 9.
2025-05-16 09:44:39.796 +05:30 [INF] Calculated investment amount: 933.1.
2025-05-16 09:44:39.799 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.54, TargetAmount: 100000, AnnualReturn: 5.4, InvestmentHorizon: 9.
2025-05-16 09:44:39.807 +05:30 [INF] Calculated investment amount: 959.3.
2025-05-16 09:44:39.810 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: REITs.
2025-05-16 09:44:39.812 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.27, TargetAmount: 100000, AnnualReturn: 8.9, InvestmentHorizon: 9.
2025-05-16 09:44:39.816 +05:30 [INF] Calculated investment amount: 1053.84.
2025-05-16 09:44:39.819 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.42, TargetAmount: 100000, AnnualReturn: 9.5, InvestmentHorizon: 9.
2025-05-16 09:44:39.823 +05:30 [INF] Calculated investment amount: 1069.27.
2025-05-16 09:44:39.824 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Residential Prop.
2025-05-16 09:44:39.826 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.49, TargetAmount: 100000, AnnualReturn: 6.7, InvestmentHorizon: 9.
2025-05-16 09:44:39.831 +05:30 [INF] Calculated investment amount: 831.2.
2025-05-16 09:44:39.837 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.63, TargetAmount: 100000, AnnualReturn: 7.3, InvestmentHorizon: 9.
2025-05-16 09:44:39.844 +05:30 [INF] Calculated investment amount: 864.55.
2025-05-16 09:44:39.846 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Commercial Prop.
2025-05-16 09:44:39.851 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.39, TargetAmount: 100000, AnnualReturn: 10.2, InvestmentHorizon: 9.
2025-05-16 09:44:39.856 +05:30 [INF] Calculated investment amount: 997.16.
2025-05-16 09:44:39.857 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.3, TargetAmount: 100000, AnnualReturn: 9.8, InvestmentHorizon: 9.
2025-05-16 09:44:39.860 +05:30 [INF] Calculated investment amount: 991.53.
2025-05-16 09:44:39.865 +05:30 [INF] Product allocations saved successfully to ProductAllocations.json
2025-05-16 09:44:39.869 +05:30 [INF] Final Product Allocations: {"equity":{"Large Cap":{"BlueChip Fund ":{"product_name":"BlueChip Fund ","annual_return":10,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Stable returns","Low risk"],"cons":["Lower growth"],"risk_level":"Low","percentage_split":6.25,"InvestmentAmount":2650.61},"Index Fund ":{"product_name":"Index Fund ","annual_return":9.2,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Diversified","Low cost"],"cons":["Market dependent"],"risk_level":"Moderate","percentage_split":5.75,"InvestmentAmount":2604.14}},"Mid Cap":{"Mid Cap Growth ":{"product_name":"Mid Cap Growth ","annual_return":12.5,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["High growth potential"],"cons":["Volatile"],"risk_level":"High","percentage_split":4.79,"InvestmentAmount":1659.44},"MidCap Blend ":{"product_name":"MidCap Blend ","annual_return":11,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["Balanced approach"],"cons":["Moderate risk"],"risk_level":"Moderate","percentage_split":4.21,"InvestmentAmount":1645.79}},"Small Cap":{"SmallCap Aggressive ":{"product_name":"SmallCap Aggressive ","annual_return":14,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Medium","pros":["High return potential"],"cons":["Very volatile"],"risk_level":"High","percentage_split":4.63,"InvestmentAmount":1423.76},"Emerging Companies ":{"product_name":"Emerging Companies ","annual_return":13.2,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Low","pros":["Growth stocks"],"cons":["Liquidity risk"],"risk_level":"High","percentage_split":4.37,"InvestmentAmount":1431.74}}},"fixedIncome":{"Gov Bonds":{"Government Bond ":{"product_name":"Government Bond ","annual_return":5,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Very safe","Guaranteed return"],"cons":["Low return"],"risk_level":"Low","percentage_split":4.97,"InvestmentAmount":3203.71},"Sovereign Bond ":{"product_name":"Sovereign Bond ","annual_return":4.8,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Stable income"],"cons":["Interest rate sensitive"],"risk_level":"Low","percentage_split":4.78,"InvestmentAmount":3134.56}},"Corp Bonds":{"Corporate Bond ":{"product_name":"Corporate Bond ","annual_return":6.8,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Better return"],"cons":["Company risk"],"risk_level":"Moderate","percentage_split":6.36,"InvestmentAmount":3518.16},"Private Corp Bond ":{"product_name":"Private Corp Bond ","annual_return":7.1,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Good yield"],"cons":["Credit risk"],"risk_level":"High","percentage_split":6.64,"InvestmentAmount":3581.48}},"Fixed Dep":{"Fixed Deposit ":{"product_name":"Fixed Deposit ","annual_return":5.5,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Capital safety"],"cons":["Low returns"],"risk_level":"Low","percentage_split":4.79,"InvestmentAmount":2958.44},"Bank FD ":{"product_name":"Bank FD ","annual_return":5.7,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Easy access"],"cons":["Taxable"],"risk_level":"Low","percentage_split":4.96,"InvestmentAmount":3011.67}}},"commodities":{"Precious Metals":{"Gold ETF":{"product_name":"Gold ETF","annual_return":7.8,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Inflation hedge","Safe haven asset"],"cons":["No income generation","Price volatility"],"risk_level":"Moderate","percentage_split":3.87,"InvestmentAmount":1968.53},"Silver Trust":{"product_name":"Silver Trust","annual_return":6.3,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Alternative investment","Deflation hedge"],"cons":["Subject to price swings","Not income-producing"],"risk_level":"Moderate","percentage_split":3.13,"InvestmentAmount":1806.11}},"Energy":{"Energy Fund":{"product_name":"Energy Fund","annual_return":9.2,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["High demand","Diversified exposure"],"cons":["Subject to price fluctuations","Geopolitical risks"],"risk_level":"Moderate","percentage_split":2.48,"InvestmentAmount":1123.18},"Oil \u0026 Gas ETF":{"product_name":"Oil \u0026 Gas ETF","annual_return":10.3,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["Strong returns","Global demand"],"cons":["Environmental impact","Political risk"],"risk_level":"High","percentage_split":2.77,"InvestmentAmount":1146.3}},"Agriculture":{"Agricultural ETF":{"product_name":"Agricultural ETF","annual_return":8.5,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Diversification","Growth potential"],"cons":["Weather dependent","Global supply issues"],"risk_level":"Moderate","percentage_split":2.88,"InvestmentAmount":1382.05},"Crop Futures B":{"product_name":"Crop Futures B","annual_return":7,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Alternative to stocks","Hedge against inflation"],"cons":["Market volatility","Weather sensitivity"],"risk_level":"Moderate","percentage_split":2.37,"InvestmentAmount":1289.12}}},"cash":{"Liquid Mutual Funds":{"Liquid Fund":{"product_name":"Liquid Fund","annual_return":5.2,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Quick redemption","Low risk"],"cons":["Lower returns","Short-term horizon"],"risk_level":"Low","percentage_split":1.15,"InvestmentAmount":728.71},"Ultra Short Fund":{"product_name":"Ultra Short Fund","annual_return":5,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Better returns than savings","High liquidity"],"cons":["Interest rate risk","Short-term only"],"risk_level":"Low","percentage_split":1.1,"InvestmentAmount":709.07}},"Savings Acc":{"Standard Savings Account":{"product_name":"Standard Savings Account","annual_return":3.5,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Very liquid","Capital safety"],"cons":["Very low returns","Not suitable for growth"],"risk_level":"Low","percentage_split":1.05,"InvestmentAmount":770.42},"High Interest Savings":{"product_name":"High Interest Savings","annual_return":4,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Slightly higher returns","Safe and accessible"],"cons":["Still low returns","Inflation risk"],"risk_level":"Low","percentage_split":1.2,"InvestmentAmount":843.1}},"T. Bill":{"91-Day T-Bill":{"product_name":"91-Day T-Bill","annual_return":5.1,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Government backed","Low risk"],"cons":["Fixed tenure","Lower yield"],"risk_level":"Low","percentage_split":1.46,"InvestmentAmount":933.1},"182-Day T-Bill":{"product_name":"182-Day T-Bill","annual_return":5.4,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Safe investment","Short maturity"],"cons":["Not liquid before maturity","Limited returns"],"risk_level":"Low","percentage_split":1.54,"InvestmentAmount":959.3}}},"realEstate":{"REITs":{"REITs Trust ":{"product_name":"REITs Trust ","annual_return":8.9,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"Moderate","pros":["Stable returns","Diversified portfolio"],"cons":["Sensitive to interest rates","Limited growth"],"risk_level":"Moderate","percentage_split":2.27,"InvestmentAmount":1053.84},"Vanguad Real Estate":{"product_name":"Vanguad Real Estate","annual_return":9.5,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"High","pros":["Tax efficiency","Regular income"],"cons":["Market volatility","Fees"],"risk_level":"High","percentage_split":2.42,"InvestmentAmount":1069.27}},"Residential Prop":{"Residential Scheme ":{"product_name":"Residential Scheme ","annual_return":6.7,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Low","pros":["Stable income","Low volatility"],"cons":["Low liquidity","Maintenance costs"],"risk_level":"Low","percentage_split":1.49,"InvestmentAmount":831.2},"Housing Fund":{"product_name":"Housing Fund","annual_return":7.3,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Moderate","pros":["Tax benefits","Long-term growth"],"cons":["Location dependent","Slow ROI"],"risk_level":"Moderate","percentage_split":1.63,"InvestmentAmount":864.55}},"Commercial Prop":{"Commercial Plaza":{"product_name":"Commercial Plaza","annual_return":10.2,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Low","pros":["High rental yields","Strong appreciation"],"cons":["High initial cost","Vacancy risk"],"risk_level":"High","percentage_split":2.39,"InvestmentAmount":997.16},"Office Fund":{"product_name":"Office Fund","annual_return":9.8,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Moderate","pros":["Steady returns","Long leases"],"cons":["Tenant turnover","High maintenance"],"risk_level":"High","percentage_split":2.3,"InvestmentAmount":991.53}}}}
2025-05-16 09:44:39.897 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 09:44:39.899 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 428.563ms
2025-05-16 09:44:39.901 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 09:44:39.903 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=100000&investmentHorizon=9 - 200 null application/json; charset=utf-8 464.9736ms
2025-05-16 09:44:50.146 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 09:44:50.151 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 09:44:50.181 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 09:44:50.185 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 09:44:50.187 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 09:44:50.189 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 09:44:50.193 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 8.417ms
2025-05-16 09:44:50.195 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 09:44:50.197 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 51.2549ms
2025-05-16 09:45:43.238 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 09:45:43.240 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 09:45:43.251 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:45:43.254 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 13.8874ms
2025-05-16 09:45:43.246 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:45:43.264 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 09:45:43.266 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 27.9307ms
2025-05-16 09:45:43.275 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 09:45:43.385 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:15:43 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-16 09:45:43.385 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:15:43 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-16 09:45:43.427 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:15:43 AM'.
2025-05-16 09:45:43.438 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:15:43 AM'.
2025-05-16 09:45:43.441 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:45:43.444 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:45:43.445 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 09:45:43.480 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 09:45:43.485 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 09:45:43.495 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 09:45:43.503 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 09:45:43.507 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 09:45:43.510 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 09:45:43.516 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 09:45:43.517 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 09:45:43.520 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 09:45:43.523 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 20.2488ms
2025-05-16 09:45:43.534 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 26.953ms
2025-05-16 09:45:43.537 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 09:45:43.540 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 09:45:43.543 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 268.0177ms
2025-05-16 09:45:43.550 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 285.7944ms
2025-05-16 09:46:08.487 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-16 09:46:08.496 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:46:08.499 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 11.2871ms
2025-05-16 09:46:08.507 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 96
2025-05-16 09:46:08.512 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:16:08 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-16 09:46:08.529 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:16:08 AM'.
2025-05-16 09:46:08.532 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:46:08.536 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 09:46:08.540 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 09:46:08.552 +05:30 [INF] Starting allocation calculation...
2025-05-16 09:46:08.558 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 09:46:08.560 +05:30 [INF] Looking up base allocation for key: High+Short
2025-05-16 09:46:08.563 +05:30 [INF] Base allocation found: {"equity":30,"fixedIncome":30,"commodities":10,"cash":25,"realEstate":5}
2025-05-16 09:46:08.566 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 09:46:08.574 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 09:46:08.577 +05:30 [INF] Looking up goal tuning for goal: Retirement
2025-05-16 09:46:08.580 +05:30 [INF] Goal tuning found: {"fixedIncome_boost":10,"realEstate_boost":5}
2025-05-16 09:46:08.595 +05:30 [INF] Sub-allocations for equity: {"Large Cap":6.25,"Mid Cap":8.33,"Small Cap":10.42}
2025-05-16 09:46:08.598 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":5.83,"Corp Bonds":23.33,"Fixed Dep":5.83}
2025-05-16 09:46:08.608 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":1.67,"Energy":4.17,"Agriculture":4.17}
2025-05-16 09:46:08.612 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":10,"Savings Acc":5,"T. Bill":5}
2025-05-16 09:46:08.620 +05:30 [INF] Sub-allocations for realEstate: {"REITs":2.22,"Residential Prop":2.22,"Commercial Prop":5.56}
2025-05-16 09:46:08.626 +05:30 [INF] Added sub-assets for equity: {"Large Cap":6.25,"Mid Cap":8.33,"Small Cap":10.42}
2025-05-16 09:46:08.630 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":5.83,"Corp Bonds":23.33,"Fixed Dep":5.83}
2025-05-16 09:46:08.639 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":1.67,"Energy":4.17,"Agriculture":4.17}
2025-05-16 09:46:08.643 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":10,"Savings Acc":5,"T. Bill":5}
2025-05-16 09:46:08.646 +05:30 [INF] Added sub-assets for realEstate: {"REITs":2.22,"Residential Prop":2.22,"Commercial Prop":5.56}
2025-05-16 09:46:08.653 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":25,"subAssets":{"Large Cap":6.25,"Mid Cap":8.33,"Small Cap":10.42}},"fixedIncome":{"percentage":35,"subAssets":{"Gov Bonds":5.83,"Corp Bonds":23.33,"Fixed Dep":5.83}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":1.67,"Energy":4.17,"Agriculture":4.17}},"cash":{"percentage":20,"subAssets":{"Liquid Mutual Funds":10,"Savings Acc":5,"T. Bill":5}},"realEstate":{"percentage":10,"subAssets":{"REITs":2.22,"Residential Prop":2.22,"Commercial Prop":5.56}}}
2025-05-16 09:46:08.663 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 09:46:08.671 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":25,"subAssets":{"Large Cap":6.25,"Mid Cap":8.33,"Small Cap":10.42}},"fixedIncome":{"percentage":35,"subAssets":{"Gov Bonds":5.83,"Corp Bonds":23.33,"Fixed Dep":5.83}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":1.67,"Energy":4.17,"Agriculture":4.17}},"cash":{"percentage":20,"subAssets":{"Liquid Mutual Funds":10,"Savings Acc":5,"T. Bill":5}},"realEstate":{"percentage":10,"subAssets":{"REITs":2.22,"Residential Prop":2.22,"Commercial Prop":5.56}}}
2025-05-16 09:46:08.675 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 09:46:08.679 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 127.9919ms
2025-05-16 09:46:08.691 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 09:46:08.697 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 189.3742ms
2025-05-16 09:46:08.722 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 09:46:08.727 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 09:46:08.728 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:46:08.735 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 13.1347ms
2025-05-16 09:46:08.733 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:46:08.746 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 09:46:08.750 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 22.8934ms
2025-05-16 09:46:08.760 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:16:08 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-16 09:46:08.774 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 09:46:08.790 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:16:08 AM'.
2025-05-16 09:46:08.797 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:16:08 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-16 09:46:08.799 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:46:08.812 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:16:08 AM'.
2025-05-16 09:46:08.814 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 09:46:08.822 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:46:08.823 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 09:46:08.825 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 09:46:08.830 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 09:46:08.835 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 09:46:08.845 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 09:46:08.862 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 09:46:08.869 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 09:46:08.876 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 09:46:08.893 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 63.8773ms
2025-05-16 09:46:08.902 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 09:46:08.910 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 09:46:08.923 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 61.802ms
2025-05-16 09:46:08.932 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 186.2788ms
2025-05-16 09:46:08.939 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 09:46:08.957 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 183.5691ms
2025-05-16 09:46:58.149 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 09:46:58.151 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 09:46:58.155 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:46:58.163 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:46:58.165 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 15.8145ms
2025-05-16 09:46:58.167 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 15.4852ms
2025-05-16 09:46:58.187 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 09:46:58.189 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 09:46:58.195 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:16:58 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-16 09:46:58.199 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:16:58 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-16 09:46:58.218 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:16:58 AM'.
2025-05-16 09:46:58.227 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:16:58 AM'.
2025-05-16 09:46:58.228 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:46:58.238 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 09:46:58.241 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 09:46:58.235 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:46:58.259 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 09:46:58.257 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 09:46:58.268 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 09:46:58.273 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 09:46:58.280 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 09:46:58.282 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 09:46:58.284 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 09:46:58.326 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 69.7945ms
2025-05-16 09:46:58.331 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 09:46:58.334 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 09:46:58.340 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 60.1005ms
2025-05-16 09:46:58.341 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 154.1324ms
2025-05-16 09:46:58.345 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 09:46:58.359 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 170.0358ms
2025-05-16 09:47:43.853 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-16 09:47:43.860 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:47:43.863 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 9.9239ms
2025-05-16 09:47:43.868 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 103
2025-05-16 09:47:43.876 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:17:43 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-16 09:47:43.887 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:17:43 AM'.
2025-05-16 09:47:43.889 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:47:43.890 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 09:47:43.891 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 09:47:43.901 +05:30 [INF] Starting allocation calculation...
2025-05-16 09:47:43.903 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 09:47:43.904 +05:30 [INF] Looking up base allocation for key: Mid+Short
2025-05-16 09:47:43.906 +05:30 [INF] Base allocation found: {"equity":20,"fixedIncome":40,"commodities":10,"cash":25,"realEstate":5}
2025-05-16 09:47:43.907 +05:30 [INF] Looking up age adjustment rules for key: 30-45
2025-05-16 09:47:43.912 +05:30 [INF] Age adjustments found: {}
2025-05-16 09:47:43.917 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-16 09:47:43.919 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-16 09:47:43.921 +05:30 [INF] Sub-allocations for equity: {"Large Cap":6.5,"Mid Cap":4.88,"Small Cap":4.88}
2025-05-16 09:47:43.923 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":10.88,"Corp Bonds":14.5,"Fixed Dep":10.88}
2025-05-16 09:47:43.927 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":2.5,"Energy":1.88,"Agriculture":1.88}
2025-05-16 09:47:43.933 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 09:47:43.934 +05:30 [INF] Sub-allocations for realEstate: {"REITs":0.47,"Residential Prop":0.31,"Commercial Prop":0.47}
2025-05-16 09:47:43.936 +05:30 [INF] Added sub-assets for equity: {"Large Cap":6.5,"Mid Cap":4.88,"Small Cap":4.88}
2025-05-16 09:47:43.938 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":10.88,"Corp Bonds":14.5,"Fixed Dep":10.88}
2025-05-16 09:47:43.939 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":2.5,"Energy":1.88,"Agriculture":1.88}
2025-05-16 09:47:43.949 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 09:47:43.953 +05:30 [INF] Added sub-assets for realEstate: {"REITs":0.47,"Residential Prop":0.31,"Commercial Prop":0.47}
2025-05-16 09:47:43.956 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":16.25,"subAssets":{"Large Cap":6.5,"Mid Cap":4.88,"Small Cap":4.88}},"fixedIncome":{"percentage":36.25,"subAssets":{"Gov Bonds":10.88,"Corp Bonds":14.5,"Fixed Dep":10.88}},"commodities":{"percentage":6.25,"subAssets":{"Precious Metals":2.5,"Energy":1.88,"Agriculture":1.88}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":1.25,"subAssets":{"REITs":0.47,"Residential Prop":0.31,"Commercial Prop":0.47}}}
2025-05-16 09:47:43.969 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 09:47:43.972 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":16.25,"subAssets":{"Large Cap":6.5,"Mid Cap":4.88,"Small Cap":4.88}},"fixedIncome":{"percentage":36.25,"subAssets":{"Gov Bonds":10.88,"Corp Bonds":14.5,"Fixed Dep":10.88}},"commodities":{"percentage":6.25,"subAssets":{"Precious Metals":2.5,"Energy":1.88,"Agriculture":1.88}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":1.25,"subAssets":{"REITs":0.47,"Residential Prop":0.31,"Commercial Prop":0.47}}}
2025-05-16 09:47:43.983 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 09:47:43.987 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 86.5615ms
2025-05-16 09:47:43.992 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 09:47:43.995 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 126.481ms
2025-05-16 09:47:44.020 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 09:47:44.024 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 09:47:44.028 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:47:44.033 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:47:44.036 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 15.5842ms
2025-05-16 09:47:44.042 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 18.016ms
2025-05-16 09:47:44.057 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 09:47:44.069 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 09:47:44.080 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:17:44 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-16 09:47:44.086 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:17:44 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-16 09:47:44.094 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:17:44 AM'.
2025-05-16 09:47:44.107 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:17:44 AM'.
2025-05-16 09:47:44.110 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:47:44.112 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:47:44.114 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 09:47:44.116 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 09:47:44.118 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 09:47:44.123 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 09:47:44.126 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 09:47:44.130 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 09:47:44.132 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 09:47:44.134 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 09:47:44.137 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 09:47:44.139 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 09:47:44.145 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 19.0713ms
2025-05-16 09:47:44.148 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 17.6455ms
2025-05-16 09:47:44.155 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 09:47:44.159 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 09:47:44.161 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 104.2232ms
2025-05-16 09:47:44.163 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 94.6702ms
2025-05-16 09:49:17.021 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-16 09:49:17.032 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:49:17.034 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 12.7386ms
2025-05-16 09:49:17.042 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 104
2025-05-16 09:49:17.048 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:19:17 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-16 09:49:17.061 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:19:17 AM'.
2025-05-16 09:49:17.065 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:49:17.071 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 09:49:17.073 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 09:49:17.078 +05:30 [INF] Starting allocation calculation...
2025-05-16 09:49:17.080 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 09:49:17.084 +05:30 [INF] Looking up base allocation for key: High+Long
2025-05-16 09:49:17.087 +05:30 [INF] Base allocation found: {"equity":70,"fixedIncome":15,"commodities":10,"cash":0,"realEstate":5}
2025-05-16 09:49:17.088 +05:30 [INF] Looking up age adjustment rules for key: 60+
2025-05-16 09:49:17.090 +05:30 [INF] Age adjustments found: {"equity":-20,"fixedIncome":15,"realEstate":-5,"cash":10}
2025-05-16 09:49:17.092 +05:30 [INF] Looking up goal tuning for goal: Child's Education
2025-05-16 09:49:17.093 +05:30 [WRN] No goal tuning found for goal: Child's Education
2025-05-16 09:49:17.096 +05:30 [INF] Sub-allocations for equity: {"Large Cap":12.5,"Mid Cap":16.67,"Small Cap":20.83}
2025-05-16 09:49:17.101 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":5,"Corp Bonds":20,"Fixed Dep":5}
2025-05-16 09:49:17.104 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":1.67,"Energy":4.17,"Agriculture":4.17}
2025-05-16 09:49:17.106 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":5,"Savings Acc":2.5,"T. Bill":2.5}
2025-05-16 09:49:17.108 +05:30 [INF] Sub-allocations for realEstate: {"REITs":0,"Residential Prop":0,"Commercial Prop":0}
2025-05-16 09:49:17.111 +05:30 [INF] Added sub-assets for equity: {"Large Cap":12.5,"Mid Cap":16.67,"Small Cap":20.83}
2025-05-16 09:49:17.120 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":5,"Corp Bonds":20,"Fixed Dep":5}
2025-05-16 09:49:17.125 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":1.67,"Energy":4.17,"Agriculture":4.17}
2025-05-16 09:49:17.133 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":5,"Savings Acc":2.5,"T. Bill":2.5}
2025-05-16 09:49:17.138 +05:30 [INF] Added sub-assets for realEstate: {"REITs":0,"Residential Prop":0,"Commercial Prop":0}
2025-05-16 09:49:17.141 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":12.5,"Mid Cap":16.67,"Small Cap":20.83}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":5,"Corp Bonds":20,"Fixed Dep":5}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":1.67,"Energy":4.17,"Agriculture":4.17}},"cash":{"percentage":10,"subAssets":{"Liquid Mutual Funds":5,"Savings Acc":2.5,"T. Bill":2.5}},"realEstate":{"percentage":0,"subAssets":{"REITs":0,"Residential Prop":0,"Commercial Prop":0}}}
2025-05-16 09:49:17.154 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 09:49:17.155 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":12.5,"Mid Cap":16.67,"Small Cap":20.83}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":5,"Corp Bonds":20,"Fixed Dep":5}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":1.67,"Energy":4.17,"Agriculture":4.17}},"cash":{"percentage":10,"subAssets":{"Liquid Mutual Funds":5,"Savings Acc":2.5,"T. Bill":2.5}},"realEstate":{"percentage":0,"subAssets":{"REITs":0,"Residential Prop":0,"Commercial Prop":0}}}
2025-05-16 09:49:17.159 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 09:49:17.161 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 83.4767ms
2025-05-16 09:49:17.163 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 09:49:17.165 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 122.9314ms
2025-05-16 09:49:17.188 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 09:49:17.194 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:49:17.197 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 09:49:17.202 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 13.6882ms
2025-05-16 09:49:17.211 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:49:17.230 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 09:49:17.241 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 43.539ms
2025-05-16 09:49:17.249 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:19:17 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-16 09:49:17.260 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 09:49:17.279 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:19:17 AM'.
2025-05-16 09:49:17.284 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:19:17 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-16 09:49:17.288 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:49:17.305 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:19:17 AM'.
2025-05-16 09:49:17.307 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 09:49:17.311 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:49:17.314 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 09:49:17.316 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 09:49:17.324 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 09:49:17.328 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 09:49:17.331 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 09:49:17.337 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 09:49:17.343 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 09:49:17.345 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 09:49:17.354 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 30.1316ms
2025-05-16 09:49:17.355 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 09:49:17.358 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 09:49:17.360 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 23.2103ms
2025-05-16 09:49:17.362 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 132.4528ms
2025-05-16 09:49:17.368 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 09:49:17.375 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 115.7422ms
2025-05-16 09:58:41.268 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-16 09:58:41.274 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:58:41.276 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 8.6707ms
2025-05-16 09:58:41.291 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 106
2025-05-16 09:58:41.297 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:28:41 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-16 09:58:41.314 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:28:41 AM'.
2025-05-16 09:58:41.319 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:58:41.322 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 09:58:41.325 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 09:58:41.339 +05:30 [INF] Starting allocation calculation...
2025-05-16 09:58:41.342 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 09:58:41.348 +05:30 [INF] Looking up base allocation for key: High+Long
2025-05-16 09:58:41.350 +05:30 [INF] Base allocation found: {"equity":70,"fixedIncome":15,"commodities":10,"cash":0,"realEstate":5}
2025-05-16 09:58:41.354 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 09:58:41.356 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 09:58:41.358 +05:30 [INF] Looking up goal tuning for goal: Wealth Accumulation
2025-05-16 09:58:41.364 +05:30 [INF] Goal tuning found: {"equity_priority":true,"equity_boost":2,"equity_threshold":40}
2025-05-16 09:58:41.371 +05:30 [INF] Sub-allocations for equity: {"Large Cap":20,"Mid Cap":26.67,"Small Cap":33.33}
2025-05-16 09:58:41.373 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":1.67,"Corp Bonds":6.67,"Fixed Dep":1.67}
2025-05-16 09:58:41.375 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":1.67,"Energy":4.17,"Agriculture":4.17}
2025-05-16 09:58:41.382 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":-2.5,"Savings Acc":-1.25,"T. Bill":-1.25}
2025-05-16 09:58:41.385 +05:30 [INF] Sub-allocations for realEstate: {"REITs":1.11,"Residential Prop":1.11,"Commercial Prop":2.78}
2025-05-16 09:58:41.389 +05:30 [INF] Added sub-assets for equity: {"Large Cap":20,"Mid Cap":26.67,"Small Cap":33.33}
2025-05-16 09:58:41.392 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":1.67,"Corp Bonds":6.67,"Fixed Dep":1.67}
2025-05-16 09:58:41.394 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":1.67,"Energy":4.17,"Agriculture":4.17}
2025-05-16 09:58:41.400 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":-2.5,"Savings Acc":-1.25,"T. Bill":-1.25}
2025-05-16 09:58:41.402 +05:30 [INF] Added sub-assets for realEstate: {"REITs":1.11,"Residential Prop":1.11,"Commercial Prop":2.78}
2025-05-16 09:58:41.405 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":80,"subAssets":{"Large Cap":20,"Mid Cap":26.67,"Small Cap":33.33}},"fixedIncome":{"percentage":10,"subAssets":{"Gov Bonds":1.67,"Corp Bonds":6.67,"Fixed Dep":1.67}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":1.67,"Energy":4.17,"Agriculture":4.17}},"cash":{"percentage":-5,"subAssets":{"Liquid Mutual Funds":-2.5,"Savings Acc":-1.25,"T. Bill":-1.25}},"realEstate":{"percentage":5,"subAssets":{"REITs":1.11,"Residential Prop":1.11,"Commercial Prop":2.78}}}
2025-05-16 09:58:41.410 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 09:58:41.412 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":80,"subAssets":{"Large Cap":20,"Mid Cap":26.67,"Small Cap":33.33}},"fixedIncome":{"percentage":10,"subAssets":{"Gov Bonds":1.67,"Corp Bonds":6.67,"Fixed Dep":1.67}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":1.67,"Energy":4.17,"Agriculture":4.17}},"cash":{"percentage":-5,"subAssets":{"Liquid Mutual Funds":-2.5,"Savings Acc":-1.25,"T. Bill":-1.25}},"realEstate":{"percentage":5,"subAssets":{"REITs":1.11,"Residential Prop":1.11,"Commercial Prop":2.78}}}
2025-05-16 09:58:41.416 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 09:58:41.423 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 85.1977ms
2025-05-16 09:58:41.426 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 09:58:41.428 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 137.9669ms
2025-05-16 09:58:41.457 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 09:58:41.463 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 09:58:41.465 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:58:41.471 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:58:41.474 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 17.2939ms
2025-05-16 09:58:41.476 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 12.6206ms
2025-05-16 09:58:41.483 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 09:58:41.521 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 09:58:41.527 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:28:41 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-16 09:58:41.537 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:28:41 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-16 09:58:41.562 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:28:41 AM'.
2025-05-16 09:58:41.575 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:28:41 AM'.
2025-05-16 09:58:41.578 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:58:41.585 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:58:41.587 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 09:58:41.589 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 09:58:41.591 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 09:58:41.595 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 09:58:41.600 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 09:58:41.609 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 09:58:41.612 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 09:58:41.615 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 09:58:41.616 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 09:58:41.617 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 09:58:41.629 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 29.0786ms
2025-05-16 09:58:41.631 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 22.099ms
2025-05-16 09:58:41.635 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 09:58:41.638 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 09:58:41.640 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 156.6707ms
2025-05-16 09:58:41.642 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 121.0656ms
2025-05-16 09:59:20.237 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 09:59:20.242 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 09:59:20.245 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:59:20.249 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:59:20.251 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 14.0784ms
2025-05-16 09:59:20.253 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 11.6898ms
2025-05-16 09:59:20.263 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 09:59:20.276 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 09:59:20.290 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:29:20 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-16 09:59:20.296 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:29:20 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-16 09:59:20.316 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:29:20 AM'.
2025-05-16 09:59:20.340 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:29:20 AM'.
2025-05-16 09:59:20.344 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:59:20.347 +05:30 [INF] CORS policy execution successful.
2025-05-16 09:59:20.354 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 09:59:20.356 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 09:59:20.359 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 09:59:20.361 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 09:59:20.373 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 09:59:20.378 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 09:59:20.381 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 09:59:20.382 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 09:59:20.384 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 09:59:20.385 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 09:59:20.398 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 24.2957ms
2025-05-16 09:59:20.402 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 24.1161ms
2025-05-16 09:59:20.410 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 09:59:20.415 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 09:59:20.417 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 153.9617ms
2025-05-16 09:59:20.424 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 148.4024ms
2025-05-16 10:02:25.086 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 10:02:25.091 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 10:02:25.094 +05:30 [INF] CORS policy execution successful.
2025-05-16 10:02:25.098 +05:30 [INF] CORS policy execution successful.
2025-05-16 10:02:25.100 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 14.4955ms
2025-05-16 10:02:25.102 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 10.9027ms
2025-05-16 10:02:25.128 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 10:02:25.129 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 10:02:25.136 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:32:25 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-16 10:02:25.149 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:32:25 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-16 10:02:25.170 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:32:25 AM'.
2025-05-16 10:02:25.181 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:32:25 AM'.
2025-05-16 10:02:25.189 +05:30 [INF] CORS policy execution successful.
2025-05-16 10:02:25.193 +05:30 [INF] CORS policy execution successful.
2025-05-16 10:02:25.195 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 10:02:25.196 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 10:02:25.198 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 10:02:25.203 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 10:02:25.208 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 10:02:25.213 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 10:02:25.216 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 10:02:25.217 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 10:02:25.218 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 10:02:25.223 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 10:02:25.230 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 22.1988ms
2025-05-16 10:02:25.233 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 19.58ms
2025-05-16 10:02:25.236 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 10:02:25.238 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 10:02:25.240 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 111.7211ms
2025-05-16 10:02:25.241 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 112.2934ms
2025-05-16 10:02:45.406 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 10:02:45.409 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 10:02:45.414 +05:30 [INF] CORS policy execution successful.
2025-05-16 10:02:45.420 +05:30 [INF] CORS policy execution successful.
2025-05-16 10:02:45.422 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 16.2123ms
2025-05-16 10:02:45.424 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 14.796ms
2025-05-16 10:02:45.438 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 10:02:45.444 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 10:02:45.457 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:32:45 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-16 10:02:45.461 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:32:45 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-16 10:02:45.477 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:32:45 AM'.
2025-05-16 10:02:45.492 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:32:45 AM'.
2025-05-16 10:02:45.494 +05:30 [INF] CORS policy execution successful.
2025-05-16 10:02:45.500 +05:30 [INF] CORS policy execution successful.
2025-05-16 10:02:45.505 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 10:02:45.506 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 10:02:45.509 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 10:02:45.515 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 10:02:45.526 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 10:02:45.523 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 10:02:45.532 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 10:02:45.537 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 10:02:45.545 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 10:02:45.548 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 10:02:45.555 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 28.6594ms
2025-05-16 10:02:45.571 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 48.8452ms
2025-05-16 10:02:45.574 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 10:02:45.581 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 10:02:45.587 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 142.7441ms
2025-05-16 10:02:45.589 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 151.2219ms
2025-05-16 10:10:48.653 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 10:10:48.657 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 10:10:48.665 +05:30 [INF] CORS policy execution successful.
2025-05-16 10:10:48.679 +05:30 [INF] CORS policy execution successful.
2025-05-16 10:10:48.683 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 30.6781ms
2025-05-16 10:10:48.686 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 29.8349ms
2025-05-16 10:10:48.697 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 10:10:48.705 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 10:10:48.711 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:40:48 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-16 10:10:48.725 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:40:48 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-16 10:10:48.746 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:40:48 AM'.
2025-05-16 10:10:48.779 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:40:48 AM'.
2025-05-16 10:10:48.791 +05:30 [INF] CORS policy execution successful.
2025-05-16 10:10:48.796 +05:30 [INF] CORS policy execution successful.
2025-05-16 10:10:48.798 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 10:10:48.799 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 10:10:48.802 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 10:10:48.805 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 10:10:48.814 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 10:10:48.821 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 10:10:48.824 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 10:10:48.825 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 10:10:48.827 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 10:10:48.833 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 10:10:48.845 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 30.2549ms
2025-05-16 10:10:48.861 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 39.9481ms
2025-05-16 10:10:48.864 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 10:10:48.872 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 10:10:48.877 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 180.2855ms
2025-05-16 10:10:48.879 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 173.7009ms
2025-05-16 10:13:01.935 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 10:13:01.939 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 10:13:01.942 +05:30 [INF] CORS policy execution successful.
2025-05-16 10:13:01.946 +05:30 [INF] CORS policy execution successful.
2025-05-16 10:13:01.947 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 12.2761ms
2025-05-16 10:13:01.949 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 9.2544ms
2025-05-16 10:13:01.958 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 10:13:01.966 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 10:13:01.975 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:43:01 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-16 10:13:01.983 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:43:01 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-16 10:13:01.997 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:43:01 AM'.
2025-05-16 10:13:02.026 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/15/2025 6:52:35 PM', Current time (UTC): '5/16/2025 4:43:01 AM'.
2025-05-16 10:13:02.032 +05:30 [INF] CORS policy execution successful.
2025-05-16 10:13:02.041 +05:30 [INF] CORS policy execution successful.
2025-05-16 10:13:02.044 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 10:13:02.047 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 10:13:02.051 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 10:13:02.058 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 10:13:02.067 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 10:13:02.081 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 10:13:02.084 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 10:13:02.089 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 10:13:02.091 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 10:13:02.095 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 10:13:02.108 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 40.5356ms
2025-05-16 10:13:02.112 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 30.7319ms
2025-05-16 10:13:02.116 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 10:13:02.123 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 10:13:02.125 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 167.4993ms
2025-05-16 10:13:02.129 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 163.1658ms
2025-05-16 10:56:57.568 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-16 10:56:57.573 +05:30 [INF] CORS policy execution successful.
2025-05-16 10:56:57.575 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 7.8257ms
2025-05-16 10:56:57.581 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 53
2025-05-16 10:56:57.585 +05:30 [INF] CORS policy execution successful.
2025-05-16 10:56:57.587 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-16 10:56:57.590 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-16 10:56:57.875 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType1`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 10:56:57.886 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 289.4603ms
2025-05-16 10:56:57.894 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-16 10:56:57.897 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 200 null application/json; charset=utf-8 316.3129ms
2025-05-16 10:58:07.964 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-16 10:58:07.971 +05:30 [INF] CORS policy execution successful.
2025-05-16 10:58:07.973 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 8.8769ms
2025-05-16 10:58:07.982 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 98
2025-05-16 10:58:08.005 +05:30 [INF] CORS policy execution successful.
2025-05-16 10:58:08.008 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 10:58:08.013 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 10:58:08.025 +05:30 [INF] Starting allocation calculation...
2025-05-16 10:58:08.029 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 10:58:08.030 +05:30 [INF] Looking up base allocation for key: Mid+Long
2025-05-16 10:58:08.035 +05:30 [INF] Base allocation found: {"equity":50,"fixedIncome":30,"commodities":10,"cash":5,"realEstate":5}
2025-05-16 10:58:08.037 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 10:58:08.042 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 10:58:08.045 +05:30 [INF] Looking up goal tuning for goal: Retirement
2025-05-16 10:58:08.047 +05:30 [INF] Goal tuning found: {"fixedIncome_boost":10,"realEstate_boost":5}
2025-05-16 10:58:08.057 +05:30 [INF] Sub-allocations for equity: {"Large Cap":18,"Mid Cap":13.5,"Small Cap":13.5}
2025-05-16 10:58:08.060 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":10.5,"Corp Bonds":14,"Fixed Dep":10.5}
2025-05-16 10:58:08.067 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-16 10:58:08.070 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":0,"Savings Acc":0,"T. Bill":0}
2025-05-16 10:58:08.073 +05:30 [INF] Sub-allocations for realEstate: {"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}
2025-05-16 10:58:08.076 +05:30 [INF] Added sub-assets for equity: {"Large Cap":18,"Mid Cap":13.5,"Small Cap":13.5}
2025-05-16 10:58:08.082 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":10.5,"Corp Bonds":14,"Fixed Dep":10.5}
2025-05-16 10:58:08.086 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-16 10:58:08.093 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":0,"Savings Acc":0,"T. Bill":0}
2025-05-16 10:58:08.100 +05:30 [INF] Added sub-assets for realEstate: {"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}
2025-05-16 10:58:08.105 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":45,"subAssets":{"Large Cap":18,"Mid Cap":13.5,"Small Cap":13.5}},"fixedIncome":{"percentage":35,"subAssets":{"Gov Bonds":10.5,"Corp Bonds":14,"Fixed Dep":10.5}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":0,"subAssets":{"Liquid Mutual Funds":0,"Savings Acc":0,"T. Bill":0}},"realEstate":{"percentage":10,"subAssets":{"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}}}
2025-05-16 10:58:08.134 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 10:58:08.136 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":45,"subAssets":{"Large Cap":18,"Mid Cap":13.5,"Small Cap":13.5}},"fixedIncome":{"percentage":35,"subAssets":{"Gov Bonds":10.5,"Corp Bonds":14,"Fixed Dep":10.5}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":0,"subAssets":{"Liquid Mutual Funds":0,"Savings Acc":0,"T. Bill":0}},"realEstate":{"percentage":10,"subAssets":{"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}}}
2025-05-16 10:58:08.142 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 10:58:08.148 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 124.0748ms
2025-05-16 10:58:08.152 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 10:58:08.156 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 174.4524ms
2025-05-16 10:58:08.195 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 10:58:08.199 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 10:58:08.208 +05:30 [INF] CORS policy execution successful.
2025-05-16 10:58:08.214 +05:30 [INF] CORS policy execution successful.
2025-05-16 10:58:08.229 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 29.9799ms
2025-05-16 10:58:08.222 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 27.0478ms
2025-05-16 10:58:08.244 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 10:58:08.258 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 10:58:08.278 +05:30 [INF] CORS policy execution successful.
2025-05-16 10:58:08.285 +05:30 [INF] CORS policy execution successful.
2025-05-16 10:58:08.287 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 10:58:08.293 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 10:58:08.299 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 10:58:08.301 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 10:58:08.315 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 10:58:08.321 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 10:58:08.324 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 10:58:08.326 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 10:58:08.330 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 10:58:08.332 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 10:58:08.351 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 35.3629ms
2025-05-16 10:58:08.353 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 32.0266ms
2025-05-16 10:58:08.356 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 10:58:08.362 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 10:58:08.367 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 123.2941ms
2025-05-16 10:58:08.369 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 111.6217ms
2025-05-16 11:00:57.942 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-16 11:00:57.950 +05:30 [INF] CORS policy execution successful.
2025-05-16 11:00:57.952 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 10.0311ms
2025-05-16 11:00:57.962 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 95
2025-05-16 11:00:57.967 +05:30 [INF] CORS policy execution successful.
2025-05-16 11:00:57.968 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 11:00:57.971 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 11:00:57.992 +05:30 [INF] Starting allocation calculation...
2025-05-16 11:00:57.997 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 11:00:58.000 +05:30 [INF] Looking up base allocation for key: Low+Mod
2025-05-16 11:00:58.002 +05:30 [INF] Base allocation found: {"equity":20,"fixedIncome":50,"commodities":10,"cash":15,"realEstate":5}
2025-05-16 11:00:58.006 +05:30 [INF] Looking up age adjustment rules for key: 60+
2025-05-16 11:00:58.008 +05:30 [INF] Age adjustments found: {"equity":-20,"fixedIncome":15,"realEstate":-5,"cash":10}
2025-05-16 11:00:58.023 +05:30 [INF] Looking up goal tuning for goal: Retirement
2025-05-16 11:00:58.026 +05:30 [INF] Goal tuning found: {"fixedIncome_boost":10,"realEstate_boost":5}
2025-05-16 11:00:58.033 +05:30 [INF] Sub-allocations for equity: {"Large Cap":0,"Mid Cap":0,"Small Cap":0}
2025-05-16 11:00:58.037 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":30,"Corp Bonds":12,"Fixed Dep":18}
2025-05-16 11:00:58.040 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":6.25,"Energy":2.5,"Agriculture":1.25}
2025-05-16 11:00:58.055 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":5.77,"Savings Acc":9.62,"T. Bill":9.62}
2025-05-16 11:00:58.057 +05:30 [INF] Sub-allocations for realEstate: {"REITs":2,"Residential Prop":2,"Commercial Prop":1}
2025-05-16 11:00:58.062 +05:30 [INF] Added sub-assets for equity: {"Large Cap":0,"Mid Cap":0,"Small Cap":0}
2025-05-16 11:00:58.070 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":30,"Corp Bonds":12,"Fixed Dep":18}
2025-05-16 11:00:58.075 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":6.25,"Energy":2.5,"Agriculture":1.25}
2025-05-16 11:00:58.091 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":5.77,"Savings Acc":9.62,"T. Bill":9.62}
2025-05-16 11:00:58.099 +05:30 [INF] Added sub-assets for realEstate: {"REITs":2,"Residential Prop":2,"Commercial Prop":1}
2025-05-16 11:00:58.105 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":0,"subAssets":{"Large Cap":0,"Mid Cap":0,"Small Cap":0}},"fixedIncome":{"percentage":60,"subAssets":{"Gov Bonds":30,"Corp Bonds":12,"Fixed Dep":18}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":6.25,"Energy":2.5,"Agriculture":1.25}},"cash":{"percentage":25,"subAssets":{"Liquid Mutual Funds":5.77,"Savings Acc":9.62,"T. Bill":9.62}},"realEstate":{"percentage":5,"subAssets":{"REITs":2,"Residential Prop":2,"Commercial Prop":1}}}
2025-05-16 11:00:58.130 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 11:00:58.134 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":0,"subAssets":{"Large Cap":0,"Mid Cap":0,"Small Cap":0}},"fixedIncome":{"percentage":60,"subAssets":{"Gov Bonds":30,"Corp Bonds":12,"Fixed Dep":18}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":6.25,"Energy":2.5,"Agriculture":1.25}},"cash":{"percentage":25,"subAssets":{"Liquid Mutual Funds":5.77,"Savings Acc":9.62,"T. Bill":9.62}},"realEstate":{"percentage":5,"subAssets":{"REITs":2,"Residential Prop":2,"Commercial Prop":1}}}
2025-05-16 11:00:58.140 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 11:00:58.152 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 161.5171ms
2025-05-16 11:00:58.163 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 11:00:58.168 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 206.6478ms
2025-05-16 11:00:58.206 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 11:00:58.220 +05:30 [INF] CORS policy execution successful.
2025-05-16 11:00:58.233 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 26.7401ms
2025-05-16 11:00:58.216 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 11:00:58.259 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 11:00:58.273 +05:30 [INF] CORS policy execution successful.
2025-05-16 11:00:58.287 +05:30 [INF] CORS policy execution successful.
2025-05-16 11:00:58.302 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 85.8261ms
2025-05-16 11:00:58.304 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 11:00:58.327 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 11:00:58.334 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 11:00:58.343 +05:30 [INF] CORS policy execution successful.
2025-05-16 11:00:58.357 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 11:00:58.364 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 11:00:58.371 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 11:00:58.374 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 11:00:58.384 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 11:00:58.399 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 11:00:58.418 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 61.0704ms
2025-05-16 11:00:58.431 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 11:00:58.443 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 11:00:58.450 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 11:00:58.458 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 198.8008ms
2025-05-16 11:00:58.466 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 67.4049ms
2025-05-16 11:00:58.489 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 11:00:58.496 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 168.5425ms
2025-05-16 11:06:25.251 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 11:06:25.251 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 11:06:25.259 +05:30 [INF] CORS policy execution successful.
2025-05-16 11:06:25.268 +05:30 [INF] CORS policy execution successful.
2025-05-16 11:06:25.270 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 19.4269ms
2025-05-16 11:06:25.281 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 29.4631ms
2025-05-16 11:06:25.294 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 11:06:25.311 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 11:06:25.352 +05:30 [INF] CORS policy execution successful.
2025-05-16 11:06:25.366 +05:30 [INF] CORS policy execution successful.
2025-05-16 11:06:25.374 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 11:06:25.378 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 11:06:25.389 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 11:06:25.393 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 11:06:25.406 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 11:06:25.421 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 11:06:25.426 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 11:06:25.429 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 11:06:25.440 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 11:06:25.443 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 11:06:25.469 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 63.0012ms
2025-05-16 11:06:25.484 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 63.3433ms
2025-05-16 11:06:25.491 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 11:06:25.503 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 11:06:25.515 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 220.3529ms
2025-05-16 11:06:25.519 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 208.0916ms
2025-05-16 12:26:56.576 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:26:56.576 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:26:56.584 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:26:56.588 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:26:56.590 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 13.5814ms
2025-05-16 12:26:56.597 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 20.3353ms
2025-05-16 12:26:56.616 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:26:56.628 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:26:56.642 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/16/2025 6:26:57 AM', Current time (UTC): '5/16/2025 6:56:56 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-16 12:26:56.654 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/16/2025 6:26:57 AM', Current time (UTC): '5/16/2025 6:56:56 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-16 12:26:56.664 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/16/2025 6:26:57 AM', Current time (UTC): '5/16/2025 6:56:56 AM'.
2025-05-16 12:26:56.683 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/16/2025 6:26:57 AM', Current time (UTC): '5/16/2025 6:56:56 AM'.
2025-05-16 12:26:56.688 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:26:56.691 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:26:56.693 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:26:56.694 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:26:56.700 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 12:26:56.703 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 12:26:56.711 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 12:26:56.728 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 12:26:56.735 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 12:26:56.743 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 12:26:56.747 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:26:56.757 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:26:56.783 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 72.3568ms
2025-05-16 12:26:56.798 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 70.1175ms
2025-05-16 12:26:56.814 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:26:56.823 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:26:56.832 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 215.7952ms
2025-05-16 12:26:56.842 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 213.5441ms
2025-05-16 12:27:53.854 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-16 12:27:53.875 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:27:53.878 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 23.8239ms
2025-05-16 12:27:53.887 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 53
2025-05-16 12:27:53.900 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:27:53.903 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-16 12:27:53.908 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-16 12:27:54.127 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType1`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:27:54.134 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 219.8855ms
2025-05-16 12:27:54.139 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-16 12:27:54.143 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 200 null application/json; charset=utf-8 255.3595ms
2025-05-16 12:29:23.688 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-16 12:29:23.710 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:29:23.716 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 28.0134ms
2025-05-16 12:29:23.746 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 97
2025-05-16 12:29:23.767 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:29:23.774 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 12:29:23.786 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 12:29:23.808 +05:30 [INF] Starting allocation calculation...
2025-05-16 12:29:23.817 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 12:29:23.830 +05:30 [INF] Looking up base allocation for key: Low+Mod
2025-05-16 12:29:23.837 +05:30 [INF] Base allocation found: {"equity":20,"fixedIncome":50,"commodities":10,"cash":15,"realEstate":5}
2025-05-16 12:29:23.842 +05:30 [INF] Looking up age adjustment rules for key: 30-45
2025-05-16 12:29:23.847 +05:30 [INF] Age adjustments found: {}
2025-05-16 12:29:23.859 +05:30 [INF] Looking up goal tuning for goal: Big Purchase
2025-05-16 12:29:23.864 +05:30 [INF] Goal tuning found: {"balanced":true}
2025-05-16 12:29:23.906 +05:30 [INF] Sub-allocations for equity: {"Large Cap":15.62,"Mid Cap":6.25,"Small Cap":3.12}
2025-05-16 12:29:23.918 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":15,"Corp Bonds":6,"Fixed Dep":9}
2025-05-16 12:29:23.926 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":9.38,"Energy":3.75,"Agriculture":1.88}
2025-05-16 12:29:23.942 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":4.62,"Savings Acc":7.69,"T. Bill":7.69}
2025-05-16 12:29:23.957 +05:30 [INF] Sub-allocations for realEstate: {"REITs":4,"Residential Prop":4,"Commercial Prop":2}
2025-05-16 12:29:23.972 +05:30 [INF] Added sub-assets for equity: {"Large Cap":15.62,"Mid Cap":6.25,"Small Cap":3.12}
2025-05-16 12:29:23.976 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":15,"Corp Bonds":6,"Fixed Dep":9}
2025-05-16 12:29:23.983 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":9.38,"Energy":3.75,"Agriculture":1.88}
2025-05-16 12:29:23.989 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":4.62,"Savings Acc":7.69,"T. Bill":7.69}
2025-05-16 12:29:23.992 +05:30 [INF] Added sub-assets for realEstate: {"REITs":4,"Residential Prop":4,"Commercial Prop":2}
2025-05-16 12:29:24.000 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":25,"subAssets":{"Large Cap":15.62,"Mid Cap":6.25,"Small Cap":3.12}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":15,"Corp Bonds":6,"Fixed Dep":9}},"commodities":{"percentage":15,"subAssets":{"Precious Metals":9.38,"Energy":3.75,"Agriculture":1.88}},"cash":{"percentage":20,"subAssets":{"Liquid Mutual Funds":4.62,"Savings Acc":7.69,"T. Bill":7.69}},"realEstate":{"percentage":10,"subAssets":{"REITs":4,"Residential Prop":4,"Commercial Prop":2}}}
2025-05-16 12:29:24.011 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 12:29:24.015 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":25,"subAssets":{"Large Cap":15.62,"Mid Cap":6.25,"Small Cap":3.12}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":15,"Corp Bonds":6,"Fixed Dep":9}},"commodities":{"percentage":15,"subAssets":{"Precious Metals":9.38,"Energy":3.75,"Agriculture":1.88}},"cash":{"percentage":20,"subAssets":{"Liquid Mutual Funds":4.62,"Savings Acc":7.69,"T. Bill":7.69}},"realEstate":{"percentage":10,"subAssets":{"REITs":4,"Residential Prop":4,"Commercial Prop":2}}}
2025-05-16 12:29:24.024 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 12:29:24.035 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 227.5375ms
2025-05-16 12:29:24.040 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 12:29:24.048 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 302.2626ms
2025-05-16 12:29:24.083 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:29:24.087 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:29:24.089 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:29:24.103 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:29:24.109 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 26.0255ms
2025-05-16 12:29:24.112 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 25.0414ms
2025-05-16 12:29:24.126 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:29:24.139 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:29:24.155 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:29:24.162 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:29:24.165 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:29:24.168 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:29:24.178 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 12:29:24.183 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 12:29:24.195 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 12:29:24.211 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 12:29:24.215 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 12:29:24.218 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 12:29:24.221 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:29:24.228 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:29:24.242 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 47.3156ms
2025-05-16 12:29:24.248 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 37.1721ms
2025-05-16 12:29:24.257 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:29:24.265 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:29:24.273 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 146.5311ms
2025-05-16 12:29:24.277 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 138.2206ms
2025-05-16 12:29:44.206 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-16 12:29:44.212 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:29:44.213 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 7.5572ms
2025-05-16 12:29:44.219 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 101
2025-05-16 12:29:44.223 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:29:44.228 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 12:29:44.230 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 12:29:44.236 +05:30 [INF] Starting allocation calculation...
2025-05-16 12:29:44.238 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 12:29:44.242 +05:30 [INF] Looking up base allocation for key: High+Long
2025-05-16 12:29:44.246 +05:30 [INF] Base allocation found: {"equity":70,"fixedIncome":15,"commodities":10,"cash":0,"realEstate":5}
2025-05-16 12:29:44.247 +05:30 [INF] Looking up age adjustment rules for key: 60+
2025-05-16 12:29:44.249 +05:30 [INF] Age adjustments found: {"equity":-20,"fixedIncome":15,"realEstate":-5,"cash":10}
2025-05-16 12:29:44.253 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-16 12:29:44.260 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-16 12:29:44.264 +05:30 [INF] Sub-allocations for equity: {"Large Cap":10.62,"Mid Cap":14.17,"Small Cap":17.71}
2025-05-16 12:29:44.267 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":3.75,"Corp Bonds":15,"Fixed Dep":3.75}
2025-05-16 12:29:44.276 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":0.42,"Energy":1.04,"Agriculture":1.04}
2025-05-16 12:29:44.279 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":20,"Savings Acc":10,"T. Bill":10}
2025-05-16 12:29:44.285 +05:30 [INF] Sub-allocations for realEstate: {"REITs":-1.67,"Residential Prop":-1.67,"Commercial Prop":-4.17}
2025-05-16 12:29:44.287 +05:30 [INF] Added sub-assets for equity: {"Large Cap":10.62,"Mid Cap":14.17,"Small Cap":17.71}
2025-05-16 12:29:44.291 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":3.75,"Corp Bonds":15,"Fixed Dep":3.75}
2025-05-16 12:29:44.294 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":0.42,"Energy":1.04,"Agriculture":1.04}
2025-05-16 12:29:44.296 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":20,"Savings Acc":10,"T. Bill":10}
2025-05-16 12:29:44.299 +05:30 [INF] Added sub-assets for realEstate: {"REITs":-1.67,"Residential Prop":-1.67,"Commercial Prop":-4.17}
2025-05-16 12:29:44.301 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":42.5,"subAssets":{"Large Cap":10.62,"Mid Cap":14.17,"Small Cap":17.71}},"fixedIncome":{"percentage":22.5,"subAssets":{"Gov Bonds":3.75,"Corp Bonds":15,"Fixed Dep":3.75}},"commodities":{"percentage":2.5,"subAssets":{"Precious Metals":0.42,"Energy":1.04,"Agriculture":1.04}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":20,"Savings Acc":10,"T. Bill":10}},"realEstate":{"percentage":-7.5,"subAssets":{"REITs":-1.67,"Residential Prop":-1.67,"Commercial Prop":-4.17}}}
2025-05-16 12:29:44.305 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 12:29:44.312 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":42.5,"subAssets":{"Large Cap":10.62,"Mid Cap":14.17,"Small Cap":17.71}},"fixedIncome":{"percentage":22.5,"subAssets":{"Gov Bonds":3.75,"Corp Bonds":15,"Fixed Dep":3.75}},"commodities":{"percentage":2.5,"subAssets":{"Precious Metals":0.42,"Energy":1.04,"Agriculture":1.04}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":20,"Savings Acc":10,"T. Bill":10}},"realEstate":{"percentage":-7.5,"subAssets":{"REITs":-1.67,"Residential Prop":-1.67,"Commercial Prop":-4.17}}}
2025-05-16 12:29:44.316 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 12:29:44.320 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 83.3656ms
2025-05-16 12:29:44.324 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 12:29:44.329 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 110.6184ms
2025-05-16 12:29:44.346 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:29:44.350 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:29:44.348 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:29:44.351 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 5.8212ms
2025-05-16 12:29:44.366 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:29:44.373 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:29:44.380 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 31.7089ms
2025-05-16 12:29:44.387 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:29:44.397 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:29:44.402 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:29:44.407 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:29:44.409 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 12:29:44.411 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:29:44.416 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 12:29:44.428 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 12:29:44.434 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 12:29:44.444 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 12:29:44.448 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:29:44.451 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 12:29:44.465 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 49.0417ms
2025-05-16 12:29:44.468 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:29:44.479 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:29:44.489 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 45.404ms
2025-05-16 12:29:44.497 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 123.6923ms
2025-05-16 12:29:44.507 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:29:44.523 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 125.3657ms
2025-05-16 12:29:51.417 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:29:51.417 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:29:51.423 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:29:51.429 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:29:51.430 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 12.6181ms
2025-05-16 12:29:51.432 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 14.2723ms
2025-05-16 12:29:51.442 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:29:51.453 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:29:51.465 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:29:51.471 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:29:51.484 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:29:51.486 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:29:51.491 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 12:29:51.498 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 12:29:51.505 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 12:29:51.516 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 12:29:51.523 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 12:29:51.526 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 12:29:51.533 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:29:51.535 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:29:51.556 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 50.6643ms
2025-05-16 12:29:51.564 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 47.9479ms
2025-05-16 12:29:51.568 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:29:51.578 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:29:51.585 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 142.9335ms
2025-05-16 12:29:51.592 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 139.6358ms
2025-05-16 12:29:58.573 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:29:58.574 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:29:58.579 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:29:58.584 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:29:58.586 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 12.1504ms
2025-05-16 12:29:58.587 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 13.5308ms
2025-05-16 12:29:58.597 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:29:58.611 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:29:58.622 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:29:58.636 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:29:58.640 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:29:58.643 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:29:58.646 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 12:29:58.653 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 12:29:58.661 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 12:29:58.675 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 12:29:58.680 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 12:29:58.688 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 12:29:58.690 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:29:58.693 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:29:58.709 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 47.5935ms
2025-05-16 12:29:58.719 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 44.2743ms
2025-05-16 12:29:58.724 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:29:58.728 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:29:58.736 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 138.7165ms
2025-05-16 12:29:58.740 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 128.037ms
2025-05-16 12:34:40.603 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:34:40.607 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:34:40.613 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:34:40.618 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:34:40.623 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 20.3387ms
2025-05-16 12:34:40.626 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 19.659ms
2025-05-16 12:34:40.635 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:34:40.647 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:34:40.652 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:34:40.661 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:34:40.664 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:34:40.666 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:34:40.668 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 12:34:40.670 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 12:34:40.682 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 12:34:40.691 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 12:34:40.699 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 12:34:40.700 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 12:34:40.702 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:34:40.706 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:34:40.717 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 34.2748ms
2025-05-16 12:34:40.720 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 28.7278ms
2025-05-16 12:34:40.734 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:34:40.740 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:34:40.747 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 112.4049ms
2025-05-16 12:34:40.750 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 102.8927ms
2025-05-16 12:35:20.530 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-16 12:35:20.545 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:35:20.549 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 19.0056ms
2025-05-16 12:35:20.558 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 95
2025-05-16 12:35:20.563 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:35:20.564 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 12:35:20.572 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 12:35:20.577 +05:30 [INF] Starting allocation calculation...
2025-05-16 12:35:20.579 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 12:35:20.581 +05:30 [INF] Looking up base allocation for key: Low+Mod
2025-05-16 12:35:20.586 +05:30 [INF] Base allocation found: {"equity":20,"fixedIncome":50,"commodities":10,"cash":15,"realEstate":5}
2025-05-16 12:35:20.590 +05:30 [INF] Looking up age adjustment rules for key: 30-45
2025-05-16 12:35:20.593 +05:30 [INF] Age adjustments found: {}
2025-05-16 12:35:20.595 +05:30 [INF] Looking up goal tuning for goal: Retirement
2025-05-16 12:35:20.597 +05:30 [INF] Goal tuning found: {"fixedIncome_boost":10,"realEstate_boost":5}
2025-05-16 12:35:20.602 +05:30 [INF] Sub-allocations for equity: {"Large Cap":12.5,"Mid Cap":5,"Small Cap":2.5}
2025-05-16 12:35:20.605 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":22.5,"Corp Bonds":9,"Fixed Dep":13.5}
2025-05-16 12:35:20.609 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":6.25,"Energy":2.5,"Agriculture":1.25}
2025-05-16 12:35:20.611 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":3.46,"Savings Acc":5.77,"T. Bill":5.77}
2025-05-16 12:35:20.612 +05:30 [INF] Sub-allocations for realEstate: {"REITs":4,"Residential Prop":4,"Commercial Prop":2}
2025-05-16 12:35:20.617 +05:30 [INF] Added sub-assets for equity: {"Large Cap":12.5,"Mid Cap":5,"Small Cap":2.5}
2025-05-16 12:35:20.619 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":22.5,"Corp Bonds":9,"Fixed Dep":13.5}
2025-05-16 12:35:20.625 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":6.25,"Energy":2.5,"Agriculture":1.25}
2025-05-16 12:35:20.626 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":3.46,"Savings Acc":5.77,"T. Bill":5.77}
2025-05-16 12:35:20.628 +05:30 [INF] Added sub-assets for realEstate: {"REITs":4,"Residential Prop":4,"Commercial Prop":2}
2025-05-16 12:35:20.632 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":20,"subAssets":{"Large Cap":12.5,"Mid Cap":5,"Small Cap":2.5}},"fixedIncome":{"percentage":45,"subAssets":{"Gov Bonds":22.5,"Corp Bonds":9,"Fixed Dep":13.5}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":6.25,"Energy":2.5,"Agriculture":1.25}},"cash":{"percentage":15,"subAssets":{"Liquid Mutual Funds":3.46,"Savings Acc":5.77,"T. Bill":5.77}},"realEstate":{"percentage":10,"subAssets":{"REITs":4,"Residential Prop":4,"Commercial Prop":2}}}
2025-05-16 12:35:20.639 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 12:35:20.640 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":20,"subAssets":{"Large Cap":12.5,"Mid Cap":5,"Small Cap":2.5}},"fixedIncome":{"percentage":45,"subAssets":{"Gov Bonds":22.5,"Corp Bonds":9,"Fixed Dep":13.5}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":6.25,"Energy":2.5,"Agriculture":1.25}},"cash":{"percentage":15,"subAssets":{"Liquid Mutual Funds":3.46,"Savings Acc":5.77,"T. Bill":5.77}},"realEstate":{"percentage":10,"subAssets":{"REITs":4,"Residential Prop":4,"Commercial Prop":2}}}
2025-05-16 12:35:20.642 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 12:35:20.644 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 67.271ms
2025-05-16 12:35:20.649 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 12:35:20.650 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 92.7753ms
2025-05-16 12:35:20.658 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=4 - null null
2025-05-16 12:35:20.661 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:35:20.667 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=4 - 204 null null 9.9292ms
2025-05-16 12:35:20.675 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=4 - application/json 490
2025-05-16 12:35:20.679 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:35:20.681 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 12:35:20.684 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 12:35:20.710 +05:30 [INF] Starting product allocation calculation.
2025-05-16 12:35:20.716 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 12:35:20.724 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 12:35:20.892 +05:30 [INF] Product data loaded successfully.
2025-05-16 12:35:20.895 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 12:35:20.908 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.51, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 4.
2025-05-16 12:35:20.915 +05:30 [INF] Calculated investment amount: 444.64.
2025-05-16 12:35:20.919 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.99, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 4.
2025-05-16 12:35:20.926 +05:30 [INF] Calculated investment amount: 421.25.
2025-05-16 12:35:20.928 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 12:35:20.939 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.66, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 4.
2025-05-16 12:35:20.945 +05:30 [INF] Calculated investment amount: 166.06.
2025-05-16 12:35:20.952 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.34, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 4.
2025-05-16 12:35:20.965 +05:30 [INF] Calculated investment amount: 154.14.
2025-05-16 12:35:20.968 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 12:35:20.973 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.29, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 4.
2025-05-16 12:35:20.979 +05:30 [INF] Calculated investment amount: 76.38.
2025-05-16 12:35:20.983 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.21, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 4.
2025-05-16 12:35:20.996 +05:30 [INF] Calculated investment amount: 73.69.
2025-05-16 12:35:21.001 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 12:35:21.006 +05:30 [INF] Calculating investment amount with PercentageSplit: 11.48, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 4.
2025-05-16 12:35:21.012 +05:30 [INF] Calculated investment amount: 944.46.
2025-05-16 12:35:21.014 +05:30 [INF] Calculating investment amount with PercentageSplit: 11.02, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 4.
2025-05-16 12:35:21.017 +05:30 [INF] Calculated investment amount: 913.56.
2025-05-16 12:35:21.020 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 12:35:21.023 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.4, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 4.
2025-05-16 12:35:21.036 +05:30 [INF] Calculated investment amount: 338.2.
2025-05-16 12:35:21.041 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.6, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 4.
2025-05-16 12:35:21.047 +05:30 [INF] Calculated investment amount: 349.62.
2025-05-16 12:35:21.051 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 12:35:21.062 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.63, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 4.
2025-05-16 12:35:21.068 +05:30 [INF] Calculated investment amount: 535.18.
2025-05-16 12:35:21.072 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.87, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 4.
2025-05-16 12:35:21.084 +05:30 [INF] Calculated investment amount: 550.37.
2025-05-16 12:35:21.093 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 12:35:21.104 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.46, TargetAmount: 10000, AnnualReturn: 7.8, InvestmentHorizon: 4.
2025-05-16 12:35:21.120 +05:30 [INF] Calculated investment amount: 256.21.
2025-05-16 12:35:21.126 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.79, TargetAmount: 10000, AnnualReturn: 6.3, InvestmentHorizon: 4.
2025-05-16 12:35:21.134 +05:30 [INF] Calculated investment amount: 218.51.
2025-05-16 12:35:21.138 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Energy.
2025-05-16 12:35:21.141 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.18, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 4.
2025-05-16 12:35:21.148 +05:30 [INF] Calculated investment amount: 82.98.
2025-05-16 12:35:21.154 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.32, TargetAmount: 10000, AnnualReturn: 10.3, InvestmentHorizon: 4.
2025-05-16 12:35:21.164 +05:30 [INF] Calculated investment amount: 89.18.
2025-05-16 12:35:21.170 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Agriculture.
2025-05-16 12:35:21.178 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.69, TargetAmount: 10000, AnnualReturn: 8.5, InvestmentHorizon: 4.
2025-05-16 12:35:21.183 +05:30 [INF] Calculated investment amount: 49.79.
2025-05-16 12:35:21.186 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.56, TargetAmount: 10000, AnnualReturn: 7, InvestmentHorizon: 4.
2025-05-16 12:35:21.196 +05:30 [INF] Calculated investment amount: 42.72.
2025-05-16 12:35:21.202 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Liquid Mutual Funds.
2025-05-16 12:35:21.213 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.76, TargetAmount: 10000, AnnualReturn: 5.2, InvestmentHorizon: 4.
2025-05-16 12:35:21.226 +05:30 [INF] Calculated investment amount: 143.7.
2025-05-16 12:35:21.233 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.7, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 4.
2025-05-16 12:35:21.243 +05:30 [INF] Calculated investment amount: 139.86.
2025-05-16 12:35:21.248 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Savings Acc.
2025-05-16 12:35:21.251 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.69, TargetAmount: 10000, AnnualReturn: 3.5, InvestmentHorizon: 4.
2025-05-16 12:35:21.259 +05:30 [INF] Calculated investment amount: 234.42.
2025-05-16 12:35:21.260 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 95
2025-05-16 12:35:21.265 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.08, TargetAmount: 10000, AnnualReturn: 4, InvestmentHorizon: 4.
2025-05-16 12:35:21.275 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:35:21.281 +05:30 [INF] Calculated investment amount: 263.28.
2025-05-16 12:35:21.284 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 12:35:21.292 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: T. Bill.
2025-05-16 12:35:21.296 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 12:35:21.300 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.8, TargetAmount: 10000, AnnualReturn: 5.1, InvestmentHorizon: 4.
2025-05-16 12:35:21.316 +05:30 [INF] Starting allocation calculation...
2025-05-16 12:35:21.326 +05:30 [INF] Calculated investment amount: 229.48.
2025-05-16 12:35:21.331 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 12:35:21.334 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.97, TargetAmount: 10000, AnnualReturn: 5.4, InvestmentHorizon: 4.
2025-05-16 12:35:21.342 +05:30 [INF] Looking up base allocation for key: Low+Mod
2025-05-16 12:35:21.348 +05:30 [INF] Calculated investment amount: 240.65.
2025-05-16 12:35:21.351 +05:30 [INF] Base allocation found: {"equity":20,"fixedIncome":50,"commodities":10,"cash":15,"realEstate":5}
2025-05-16 12:35:21.359 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: REITs.
2025-05-16 12:35:21.362 +05:30 [INF] Looking up age adjustment rules for key: 30-45
2025-05-16 12:35:21.366 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.93, TargetAmount: 10000, AnnualReturn: 8.9, InvestmentHorizon: 4.
2025-05-16 12:35:21.374 +05:30 [INF] Age adjustments found: {}
2025-05-16 12:35:21.380 +05:30 [INF] Calculated investment amount: 137.23.
2025-05-16 12:35:21.389 +05:30 [INF] Looking up goal tuning for goal: Retirement
2025-05-16 12:35:21.393 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.07, TargetAmount: 10000, AnnualReturn: 9.5, InvestmentHorizon: 4.
2025-05-16 12:35:21.396 +05:30 [INF] Goal tuning found: {"fixedIncome_boost":10,"realEstate_boost":5}
2025-05-16 12:35:21.407 +05:30 [INF] Calculated investment amount: 143.98.
2025-05-16 12:35:21.410 +05:30 [INF] Sub-allocations for equity: {"Large Cap":12.5,"Mid Cap":5,"Small Cap":2.5}
2025-05-16 12:35:21.412 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Residential Prop.
2025-05-16 12:35:21.418 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":22.5,"Corp Bonds":9,"Fixed Dep":13.5}
2025-05-16 12:35:21.420 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.91, TargetAmount: 10000, AnnualReturn: 6.7, InvestmentHorizon: 4.
2025-05-16 12:35:21.426 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":6.25,"Energy":2.5,"Agriculture":1.25}
2025-05-16 12:35:21.429 +05:30 [INF] Calculated investment amount: 147.36.
2025-05-16 12:35:21.432 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":3.46,"Savings Acc":5.77,"T. Bill":5.77}
2025-05-16 12:35:21.434 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.09, TargetAmount: 10000, AnnualReturn: 7.3, InvestmentHorizon: 4.
2025-05-16 12:35:21.438 +05:30 [INF] Sub-allocations for realEstate: {"REITs":4,"Residential Prop":4,"Commercial Prop":2}
2025-05-16 12:35:21.441 +05:30 [INF] Calculated investment amount: 157.67.
2025-05-16 12:35:21.443 +05:30 [INF] Added sub-assets for equity: {"Large Cap":12.5,"Mid Cap":5,"Small Cap":2.5}
2025-05-16 12:35:21.447 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Commercial Prop.
2025-05-16 12:35:21.449 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":22.5,"Corp Bonds":9,"Fixed Dep":13.5}
2025-05-16 12:35:21.453 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.02, TargetAmount: 10000, AnnualReturn: 10.2, InvestmentHorizon: 4.
2025-05-16 12:35:21.454 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":6.25,"Energy":2.5,"Agriculture":1.25}
2025-05-16 12:35:21.458 +05:30 [INF] Calculated investment amount: 69.16.
2025-05-16 12:35:21.460 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":3.46,"Savings Acc":5.77,"T. Bill":5.77}
2025-05-16 12:35:21.462 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.98, TargetAmount: 10000, AnnualReturn: 9.8, InvestmentHorizon: 4.
2025-05-16 12:35:21.463 +05:30 [INF] Added sub-assets for realEstate: {"REITs":4,"Residential Prop":4,"Commercial Prop":2}
2025-05-16 12:35:21.466 +05:30 [INF] Calculated investment amount: 67.42.
2025-05-16 12:35:21.468 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":20,"subAssets":{"Large Cap":12.5,"Mid Cap":5,"Small Cap":2.5}},"fixedIncome":{"percentage":45,"subAssets":{"Gov Bonds":22.5,"Corp Bonds":9,"Fixed Dep":13.5}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":6.25,"Energy":2.5,"Agriculture":1.25}},"cash":{"percentage":15,"subAssets":{"Liquid Mutual Funds":3.46,"Savings Acc":5.77,"T. Bill":5.77}},"realEstate":{"percentage":10,"subAssets":{"REITs":4,"Residential Prop":4,"Commercial Prop":2}}}
2025-05-16 12:35:21.479 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 12:35:21.480 +05:30 [INF] Product allocations saved successfully to ProductAllocations.json
2025-05-16 12:35:21.481 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":20,"subAssets":{"Large Cap":12.5,"Mid Cap":5,"Small Cap":2.5}},"fixedIncome":{"percentage":45,"subAssets":{"Gov Bonds":22.5,"Corp Bonds":9,"Fixed Dep":13.5}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":6.25,"Energy":2.5,"Agriculture":1.25}},"cash":{"percentage":15,"subAssets":{"Liquid Mutual Funds":3.46,"Savings Acc":5.77,"T. Bill":5.77}},"realEstate":{"percentage":10,"subAssets":{"REITs":4,"Residential Prop":4,"Commercial Prop":2}}}
2025-05-16 12:35:21.483 +05:30 [INF] Final Product Allocations: {"equity":{"Large Cap":{"BlueChip Fund ":{"product_name":"BlueChip Fund ","annual_return":10,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Stable returns","Low risk"],"cons":["Lower growth"],"risk_level":"Low","percentage_split":6.51,"InvestmentAmount":444.64},"Index Fund ":{"product_name":"Index Fund ","annual_return":9.2,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Diversified","Low cost"],"cons":["Market dependent"],"risk_level":"Moderate","percentage_split":5.99,"InvestmentAmount":421.25}},"Mid Cap":{"Mid Cap Growth ":{"product_name":"Mid Cap Growth ","annual_return":12.5,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["High growth potential"],"cons":["Volatile"],"risk_level":"High","percentage_split":2.66,"InvestmentAmount":166.06},"MidCap Blend ":{"product_name":"MidCap Blend ","annual_return":11,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["Balanced approach"],"cons":["Moderate risk"],"risk_level":"Moderate","percentage_split":2.34,"InvestmentAmount":154.14}},"Small Cap":{"SmallCap Aggressive ":{"product_name":"SmallCap Aggressive ","annual_return":14,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Medium","pros":["High return potential"],"cons":["Very volatile"],"risk_level":"High","percentage_split":1.29,"InvestmentAmount":76.38},"Emerging Companies ":{"product_name":"Emerging Companies ","annual_return":13.2,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Low","pros":["Growth stocks"],"cons":["Liquidity risk"],"risk_level":"High","percentage_split":1.21,"InvestmentAmount":73.69}}},"fixedIncome":{"Gov Bonds":{"Government Bond ":{"product_name":"Government Bond ","annual_return":5,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Very safe","Guaranteed return"],"cons":["Low return"],"risk_level":"Low","percentage_split":11.48,"InvestmentAmount":944.46},"Sovereign Bond ":{"product_name":"Sovereign Bond ","annual_return":4.8,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Stable income"],"cons":["Interest rate sensitive"],"risk_level":"Low","percentage_split":11.02,"InvestmentAmount":913.56}},"Corp Bonds":{"Corporate Bond ":{"product_name":"Corporate Bond ","annual_return":6.8,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Better return"],"cons":["Company risk"],"risk_level":"Moderate","percentage_split":4.4,"InvestmentAmount":338.2},"Private Corp Bond ":{"product_name":"Private Corp Bond ","annual_return":7.1,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Good yield"],"cons":["Credit risk"],"risk_level":"High","percentage_split":4.6,"InvestmentAmount":349.62}},"Fixed Dep":{"Fixed Deposit ":{"product_name":"Fixed Deposit ","annual_return":5.5,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Capital safety"],"cons":["Low returns"],"risk_level":"Low","percentage_split":6.63,"InvestmentAmount":535.18},"Bank FD ":{"product_name":"Bank FD ","annual_return":5.7,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Easy access"],"cons":["Taxable"],"risk_level":"Low","percentage_split":6.87,"InvestmentAmount":550.37}}},"commodities":{"Precious Metals":{"Gold ETF":{"product_name":"Gold ETF","annual_return":7.8,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Inflation hedge","Safe haven asset"],"cons":["No income generation","Price volatility"],"risk_level":"Moderate","percentage_split":3.46,"InvestmentAmount":256.21},"Silver Trust":{"product_name":"Silver Trust","annual_return":6.3,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Alternative investment","Deflation hedge"],"cons":["Subject to price swings","Not income-producing"],"risk_level":"Moderate","percentage_split":2.79,"InvestmentAmount":218.51}},"Energy":{"Energy Fund":{"product_name":"Energy Fund","annual_return":9.2,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["High demand","Diversified exposure"],"cons":["Subject to price fluctuations","Geopolitical risks"],"risk_level":"Moderate","percentage_split":1.18,"InvestmentAmount":82.98},"Oil \u0026 Gas ETF":{"product_name":"Oil \u0026 Gas ETF","annual_return":10.3,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["Strong returns","Global demand"],"cons":["Environmental impact","Political risk"],"risk_level":"High","percentage_split":1.32,"InvestmentAmount":89.18}},"Agriculture":{"Agricultural ETF":{"product_name":"Agricultural ETF","annual_return":8.5,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Diversification","Growth potential"],"cons":["Weather dependent","Global supply issues"],"risk_level":"Moderate","percentage_split":0.69,"InvestmentAmount":49.79},"Crop Futures B":{"product_name":"Crop Futures B","annual_return":7,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Alternative to stocks","Hedge against inflation"],"cons":["Market volatility","Weather sensitivity"],"risk_level":"Moderate","percentage_split":0.56,"InvestmentAmount":42.72}}},"cash":{"Liquid Mutual Funds":{"Liquid Fund":{"product_name":"Liquid Fund","annual_return":5.2,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Quick redemption","Low risk"],"cons":["Lower returns","Short-term horizon"],"risk_level":"Low","percentage_split":1.76,"InvestmentAmount":143.7},"Ultra Short Fund":{"product_name":"Ultra Short Fund","annual_return":5,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Better returns than savings","High liquidity"],"cons":["Interest rate risk","Short-term only"],"risk_level":"Low","percentage_split":1.7,"InvestmentAmount":139.86}},"Savings Acc":{"Standard Savings Account":{"product_name":"Standard Savings Account","annual_return":3.5,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Very liquid","Capital safety"],"cons":["Very low returns","Not suitable for growth"],"risk_level":"Low","percentage_split":2.69,"InvestmentAmount":234.42},"High Interest Savings":{"product_name":"High Interest Savings","annual_return":4,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Slightly higher returns","Safe and accessible"],"cons":["Still low returns","Inflation risk"],"risk_level":"Low","percentage_split":3.08,"InvestmentAmount":263.28}},"T. Bill":{"91-Day T-Bill":{"product_name":"91-Day T-Bill","annual_return":5.1,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Government backed","Low risk"],"cons":["Fixed tenure","Lower yield"],"risk_level":"Low","percentage_split":2.8,"InvestmentAmount":229.48},"182-Day T-Bill":{"product_name":"182-Day T-Bill","annual_return":5.4,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Safe investment","Short maturity"],"cons":["Not liquid before maturity","Limited returns"],"risk_level":"Low","percentage_split":2.97,"InvestmentAmount":240.65}}},"realEstate":{"REITs":{"REITs Trust ":{"product_name":"REITs Trust ","annual_return":8.9,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"Moderate","pros":["Stable returns","Diversified portfolio"],"cons":["Sensitive to interest rates","Limited growth"],"risk_level":"Moderate","percentage_split":1.93,"InvestmentAmount":137.23},"Vanguad Real Estate":{"product_name":"Vanguad Real Estate","annual_return":9.5,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"High","pros":["Tax efficiency","Regular income"],"cons":["Market volatility","Fees"],"risk_level":"High","percentage_split":2.07,"InvestmentAmount":143.98}},"Residential Prop":{"Residential Scheme ":{"product_name":"Residential Scheme ","annual_return":6.7,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Low","pros":["Stable income","Low volatility"],"cons":["Low liquidity","Maintenance costs"],"risk_level":"Low","percentage_split":1.91,"InvestmentAmount":147.36},"Housing Fund":{"product_name":"Housing Fund","annual_return":7.3,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Moderate","pros":["Tax benefits","Long-term growth"],"cons":["Location dependent","Slow ROI"],"risk_level":"Moderate","percentage_split":2.09,"InvestmentAmount":157.67}},"Commercial Prop":{"Commercial Plaza":{"product_name":"Commercial Plaza","annual_return":10.2,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Low","pros":["High rental yields","Strong appreciation"],"cons":["High initial cost","Vacancy risk"],"risk_level":"High","percentage_split":1.02,"InvestmentAmount":69.16},"Office Fund":{"product_name":"Office Fund","annual_return":9.8,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Moderate","pros":["Steady returns","Long leases"],"cons":["Tenant turnover","High maintenance"],"risk_level":"High","percentage_split":0.98,"InvestmentAmount":67.42}}}}
2025-05-16 12:35:21.485 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 12:35:21.540 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:35:21.545 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 229.2454ms
2025-05-16 12:35:21.560 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 862.2487ms
2025-05-16 12:35:21.562 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 12:35:21.573 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 12:35:21.575 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 315.1913ms
2025-05-16 12:35:21.587 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=4 - application/json 490
2025-05-16 12:35:21.577 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=4 - 200 null application/json; charset=utf-8 902.4098ms
2025-05-16 12:35:21.594 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:35:21.610 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 12:35:21.616 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 12:35:21.601 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:35:21.603 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:35:21.643 +05:30 [INF] Starting product allocation calculation.
2025-05-16 12:35:21.658 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:35:21.667 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:35:21.671 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 12:35:21.675 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 73.5549ms
2025-05-16 12:35:21.677 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 73.2105ms
2025-05-16 12:35:21.683 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 12:35:21.693 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:35:21.709 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:35:21.883 +05:30 [INF] Product data loaded successfully.
2025-05-16 12:35:21.897 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:35:21.909 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:35:21.911 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 12:35:21.915 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:35:21.918 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:35:21.922 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.51, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 4.
2025-05-16 12:35:21.930 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 12:35:21.933 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 12:35:21.940 +05:30 [INF] Calculated investment amount: 444.64.
2025-05-16 12:35:21.954 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 12:35:21.968 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 12:35:21.972 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.99, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 4.
2025-05-16 12:35:21.980 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 12:35:21.984 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 12:35:21.994 +05:30 [INF] Calculated investment amount: 421.25.
2025-05-16 12:35:21.999 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:35:22.002 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:35:22.005 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 12:35:22.015 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 60.9415ms
2025-05-16 12:35:22.033 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 65.158ms
2025-05-16 12:35:22.035 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.66, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 4.
2025-05-16 12:35:22.037 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:35:22.044 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:35:22.051 +05:30 [INF] Calculated investment amount: 166.06.
2025-05-16 12:35:22.055 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 362.1899ms
2025-05-16 12:35:22.064 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 355.5266ms
2025-05-16 12:35:22.068 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.34, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 4.
2025-05-16 12:35:22.100 +05:30 [INF] Calculated investment amount: 154.14.
2025-05-16 12:35:22.108 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 12:35:22.112 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.29, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 4.
2025-05-16 12:35:22.123 +05:30 [INF] Calculated investment amount: 76.38.
2025-05-16 12:35:22.126 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.21, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 4.
2025-05-16 12:35:22.133 +05:30 [INF] Calculated investment amount: 73.69.
2025-05-16 12:35:22.141 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 12:35:22.145 +05:30 [INF] Calculating investment amount with PercentageSplit: 11.48, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 4.
2025-05-16 12:35:22.157 +05:30 [INF] Calculated investment amount: 944.46.
2025-05-16 12:35:22.161 +05:30 [INF] Calculating investment amount with PercentageSplit: 11.02, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 4.
2025-05-16 12:35:22.167 +05:30 [INF] Calculated investment amount: 913.56.
2025-05-16 12:35:22.174 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 12:35:22.179 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.4, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 4.
2025-05-16 12:35:22.192 +05:30 [INF] Calculated investment amount: 338.2.
2025-05-16 12:35:22.193 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.6, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 4.
2025-05-16 12:35:22.198 +05:30 [INF] Calculated investment amount: 349.62.
2025-05-16 12:35:22.206 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 12:35:22.210 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.63, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 4.
2025-05-16 12:35:22.224 +05:30 [INF] Calculated investment amount: 535.18.
2025-05-16 12:35:22.229 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.87, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 4.
2025-05-16 12:35:22.243 +05:30 [INF] Calculated investment amount: 550.37.
2025-05-16 12:35:22.247 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 12:35:22.251 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.46, TargetAmount: 10000, AnnualReturn: 7.8, InvestmentHorizon: 4.
2025-05-16 12:35:22.264 +05:30 [INF] Calculated investment amount: 256.21.
2025-05-16 12:35:22.269 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.79, TargetAmount: 10000, AnnualReturn: 6.3, InvestmentHorizon: 4.
2025-05-16 12:35:22.279 +05:30 [INF] Calculated investment amount: 218.51.
2025-05-16 12:35:22.285 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Energy.
2025-05-16 12:35:22.293 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.18, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 4.
2025-05-16 12:35:22.301 +05:30 [INF] Calculated investment amount: 82.98.
2025-05-16 12:35:22.310 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.32, TargetAmount: 10000, AnnualReturn: 10.3, InvestmentHorizon: 4.
2025-05-16 12:35:22.322 +05:30 [INF] Calculated investment amount: 89.18.
2025-05-16 12:35:22.328 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Agriculture.
2025-05-16 12:35:22.333 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.69, TargetAmount: 10000, AnnualReturn: 8.5, InvestmentHorizon: 4.
2025-05-16 12:35:22.346 +05:30 [INF] Calculated investment amount: 49.79.
2025-05-16 12:35:22.352 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.56, TargetAmount: 10000, AnnualReturn: 7, InvestmentHorizon: 4.
2025-05-16 12:35:22.359 +05:30 [INF] Calculated investment amount: 42.72.
2025-05-16 12:35:22.365 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Liquid Mutual Funds.
2025-05-16 12:35:22.369 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.76, TargetAmount: 10000, AnnualReturn: 5.2, InvestmentHorizon: 4.
2025-05-16 12:35:22.381 +05:30 [INF] Calculated investment amount: 143.7.
2025-05-16 12:35:22.384 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.7, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 4.
2025-05-16 12:35:22.395 +05:30 [INF] Calculated investment amount: 139.86.
2025-05-16 12:35:22.401 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Savings Acc.
2025-05-16 12:35:22.410 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.69, TargetAmount: 10000, AnnualReturn: 3.5, InvestmentHorizon: 4.
2025-05-16 12:35:22.416 +05:30 [INF] Calculated investment amount: 234.42.
2025-05-16 12:35:22.424 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.08, TargetAmount: 10000, AnnualReturn: 4, InvestmentHorizon: 4.
2025-05-16 12:35:22.430 +05:30 [INF] Calculated investment amount: 263.28.
2025-05-16 12:35:22.434 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: T. Bill.
2025-05-16 12:35:22.443 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.8, TargetAmount: 10000, AnnualReturn: 5.1, InvestmentHorizon: 4.
2025-05-16 12:35:22.453 +05:30 [INF] Calculated investment amount: 229.48.
2025-05-16 12:35:22.461 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.97, TargetAmount: 10000, AnnualReturn: 5.4, InvestmentHorizon: 4.
2025-05-16 12:35:22.471 +05:30 [INF] Calculated investment amount: 240.65.
2025-05-16 12:35:22.478 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: REITs.
2025-05-16 12:35:22.485 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.93, TargetAmount: 10000, AnnualReturn: 8.9, InvestmentHorizon: 4.
2025-05-16 12:35:22.496 +05:30 [INF] Calculated investment amount: 137.23.
2025-05-16 12:35:22.503 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.07, TargetAmount: 10000, AnnualReturn: 9.5, InvestmentHorizon: 4.
2025-05-16 12:35:22.512 +05:30 [INF] Calculated investment amount: 143.98.
2025-05-16 12:35:22.519 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Residential Prop.
2025-05-16 12:35:22.526 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.91, TargetAmount: 10000, AnnualReturn: 6.7, InvestmentHorizon: 4.
2025-05-16 12:35:22.536 +05:30 [INF] Calculated investment amount: 147.36.
2025-05-16 12:35:22.543 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.09, TargetAmount: 10000, AnnualReturn: 7.3, InvestmentHorizon: 4.
2025-05-16 12:35:22.550 +05:30 [INF] Calculated investment amount: 157.67.
2025-05-16 12:35:22.558 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Commercial Prop.
2025-05-16 12:35:22.563 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.02, TargetAmount: 10000, AnnualReturn: 10.2, InvestmentHorizon: 4.
2025-05-16 12:35:22.577 +05:30 [INF] Calculated investment amount: 69.16.
2025-05-16 12:35:22.580 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.98, TargetAmount: 10000, AnnualReturn: 9.8, InvestmentHorizon: 4.
2025-05-16 12:35:22.591 +05:30 [INF] Calculated investment amount: 67.42.
2025-05-16 12:35:22.599 +05:30 [INF] Product allocations saved successfully to ProductAllocations.json
2025-05-16 12:35:22.601 +05:30 [INF] Final Product Allocations: {"equity":{"Large Cap":{"BlueChip Fund ":{"product_name":"BlueChip Fund ","annual_return":10,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Stable returns","Low risk"],"cons":["Lower growth"],"risk_level":"Low","percentage_split":6.51,"InvestmentAmount":444.64},"Index Fund ":{"product_name":"Index Fund ","annual_return":9.2,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Diversified","Low cost"],"cons":["Market dependent"],"risk_level":"Moderate","percentage_split":5.99,"InvestmentAmount":421.25}},"Mid Cap":{"Mid Cap Growth ":{"product_name":"Mid Cap Growth ","annual_return":12.5,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["High growth potential"],"cons":["Volatile"],"risk_level":"High","percentage_split":2.66,"InvestmentAmount":166.06},"MidCap Blend ":{"product_name":"MidCap Blend ","annual_return":11,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["Balanced approach"],"cons":["Moderate risk"],"risk_level":"Moderate","percentage_split":2.34,"InvestmentAmount":154.14}},"Small Cap":{"SmallCap Aggressive ":{"product_name":"SmallCap Aggressive ","annual_return":14,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Medium","pros":["High return potential"],"cons":["Very volatile"],"risk_level":"High","percentage_split":1.29,"InvestmentAmount":76.38},"Emerging Companies ":{"product_name":"Emerging Companies ","annual_return":13.2,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Low","pros":["Growth stocks"],"cons":["Liquidity risk"],"risk_level":"High","percentage_split":1.21,"InvestmentAmount":73.69}}},"fixedIncome":{"Gov Bonds":{"Government Bond ":{"product_name":"Government Bond ","annual_return":5,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Very safe","Guaranteed return"],"cons":["Low return"],"risk_level":"Low","percentage_split":11.48,"InvestmentAmount":944.46},"Sovereign Bond ":{"product_name":"Sovereign Bond ","annual_return":4.8,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Stable income"],"cons":["Interest rate sensitive"],"risk_level":"Low","percentage_split":11.02,"InvestmentAmount":913.56}},"Corp Bonds":{"Corporate Bond ":{"product_name":"Corporate Bond ","annual_return":6.8,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Better return"],"cons":["Company risk"],"risk_level":"Moderate","percentage_split":4.4,"InvestmentAmount":338.2},"Private Corp Bond ":{"product_name":"Private Corp Bond ","annual_return":7.1,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Good yield"],"cons":["Credit risk"],"risk_level":"High","percentage_split":4.6,"InvestmentAmount":349.62}},"Fixed Dep":{"Fixed Deposit ":{"product_name":"Fixed Deposit ","annual_return":5.5,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Capital safety"],"cons":["Low returns"],"risk_level":"Low","percentage_split":6.63,"InvestmentAmount":535.18},"Bank FD ":{"product_name":"Bank FD ","annual_return":5.7,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Easy access"],"cons":["Taxable"],"risk_level":"Low","percentage_split":6.87,"InvestmentAmount":550.37}}},"commodities":{"Precious Metals":{"Gold ETF":{"product_name":"Gold ETF","annual_return":7.8,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Inflation hedge","Safe haven asset"],"cons":["No income generation","Price volatility"],"risk_level":"Moderate","percentage_split":3.46,"InvestmentAmount":256.21},"Silver Trust":{"product_name":"Silver Trust","annual_return":6.3,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Alternative investment","Deflation hedge"],"cons":["Subject to price swings","Not income-producing"],"risk_level":"Moderate","percentage_split":2.79,"InvestmentAmount":218.51}},"Energy":{"Energy Fund":{"product_name":"Energy Fund","annual_return":9.2,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["High demand","Diversified exposure"],"cons":["Subject to price fluctuations","Geopolitical risks"],"risk_level":"Moderate","percentage_split":1.18,"InvestmentAmount":82.98},"Oil \u0026 Gas ETF":{"product_name":"Oil \u0026 Gas ETF","annual_return":10.3,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["Strong returns","Global demand"],"cons":["Environmental impact","Political risk"],"risk_level":"High","percentage_split":1.32,"InvestmentAmount":89.18}},"Agriculture":{"Agricultural ETF":{"product_name":"Agricultural ETF","annual_return":8.5,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Diversification","Growth potential"],"cons":["Weather dependent","Global supply issues"],"risk_level":"Moderate","percentage_split":0.69,"InvestmentAmount":49.79},"Crop Futures B":{"product_name":"Crop Futures B","annual_return":7,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Alternative to stocks","Hedge against inflation"],"cons":["Market volatility","Weather sensitivity"],"risk_level":"Moderate","percentage_split":0.56,"InvestmentAmount":42.72}}},"cash":{"Liquid Mutual Funds":{"Liquid Fund":{"product_name":"Liquid Fund","annual_return":5.2,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Quick redemption","Low risk"],"cons":["Lower returns","Short-term horizon"],"risk_level":"Low","percentage_split":1.76,"InvestmentAmount":143.7},"Ultra Short Fund":{"product_name":"Ultra Short Fund","annual_return":5,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Better returns than savings","High liquidity"],"cons":["Interest rate risk","Short-term only"],"risk_level":"Low","percentage_split":1.7,"InvestmentAmount":139.86}},"Savings Acc":{"Standard Savings Account":{"product_name":"Standard Savings Account","annual_return":3.5,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Very liquid","Capital safety"],"cons":["Very low returns","Not suitable for growth"],"risk_level":"Low","percentage_split":2.69,"InvestmentAmount":234.42},"High Interest Savings":{"product_name":"High Interest Savings","annual_return":4,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Slightly higher returns","Safe and accessible"],"cons":["Still low returns","Inflation risk"],"risk_level":"Low","percentage_split":3.08,"InvestmentAmount":263.28}},"T. Bill":{"91-Day T-Bill":{"product_name":"91-Day T-Bill","annual_return":5.1,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Government backed","Low risk"],"cons":["Fixed tenure","Lower yield"],"risk_level":"Low","percentage_split":2.8,"InvestmentAmount":229.48},"182-Day T-Bill":{"product_name":"182-Day T-Bill","annual_return":5.4,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Safe investment","Short maturity"],"cons":["Not liquid before maturity","Limited returns"],"risk_level":"Low","percentage_split":2.97,"InvestmentAmount":240.65}}},"realEstate":{"REITs":{"REITs Trust ":{"product_name":"REITs Trust ","annual_return":8.9,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"Moderate","pros":["Stable returns","Diversified portfolio"],"cons":["Sensitive to interest rates","Limited growth"],"risk_level":"Moderate","percentage_split":1.93,"InvestmentAmount":137.23},"Vanguad Real Estate":{"product_name":"Vanguad Real Estate","annual_return":9.5,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"High","pros":["Tax efficiency","Regular income"],"cons":["Market volatility","Fees"],"risk_level":"High","percentage_split":2.07,"InvestmentAmount":143.98}},"Residential Prop":{"Residential Scheme ":{"product_name":"Residential Scheme ","annual_return":6.7,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Low","pros":["Stable income","Low volatility"],"cons":["Low liquidity","Maintenance costs"],"risk_level":"Low","percentage_split":1.91,"InvestmentAmount":147.36},"Housing Fund":{"product_name":"Housing Fund","annual_return":7.3,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Moderate","pros":["Tax benefits","Long-term growth"],"cons":["Location dependent","Slow ROI"],"risk_level":"Moderate","percentage_split":2.09,"InvestmentAmount":157.67}},"Commercial Prop":{"Commercial Plaza":{"product_name":"Commercial Plaza","annual_return":10.2,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Low","pros":["High rental yields","Strong appreciation"],"cons":["High initial cost","Vacancy risk"],"risk_level":"High","percentage_split":1.02,"InvestmentAmount":69.16},"Office Fund":{"product_name":"Office Fund","annual_return":9.8,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Moderate","pros":["Steady returns","Long leases"],"cons":["Tenant turnover","High maintenance"],"risk_level":"High","percentage_split":0.98,"InvestmentAmount":67.42}}}}
2025-05-16 12:35:22.663 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:35:22.672 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 1038.9826ms
2025-05-16 12:35:22.676 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 12:35:22.686 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=4 - 200 null application/json; charset=utf-8 1099.623ms
2025-05-16 12:36:42.310 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:36:42.312 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:36:42.317 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:36:42.322 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 12.856ms
2025-05-16 12:36:42.321 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:36:42.338 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 25.9374ms
2025-05-16 12:36:42.370 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:36:42.370 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:36:42.382 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:36:42.387 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:36:42.404 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:36:42.409 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 12:36:42.390 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:36:42.424 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 12:36:42.429 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 12:36:42.436 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 12:36:42.449 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 12:36:42.451 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:36:42.457 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 12:36:42.459 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 35.1488ms
2025-05-16 12:36:42.465 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:36:42.473 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 24.293ms
2025-05-16 12:36:42.468 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:36:42.476 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:36:42.486 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 115.7533ms
2025-05-16 12:36:42.483 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 112.9232ms
2025-05-16 12:38:50.270 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:38:50.273 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:38:50.278 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:38:50.283 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:38:50.284 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 14.1424ms
2025-05-16 12:38:50.286 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 13.0829ms
2025-05-16 12:38:50.298 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:38:50.307 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:38:50.324 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:38:50.332 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:38:50.338 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:38:50.342 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:38:50.349 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 12:38:50.352 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 12:38:50.363 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 12:38:50.371 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 12:38:50.378 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 12:38:50.380 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 12:38:50.384 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:38:50.387 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:38:50.399 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 36.2194ms
2025-05-16 12:38:50.417 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 45.522ms
2025-05-16 12:38:50.429 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:38:50.435 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:38:50.445 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 147.394ms
2025-05-16 12:38:50.451 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 143.8806ms
2025-05-16 12:39:19.652 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:39:19.654 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:39:19.660 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:39:19.667 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:39:19.669 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 17.2968ms
2025-05-16 12:39:19.675 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 20.4862ms
2025-05-16 12:39:19.681 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:39:19.694 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:39:19.700 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:39:19.709 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:39:19.710 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:39:19.718 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:39:19.727 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 12:39:19.731 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 12:39:19.741 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 12:39:19.747 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 12:39:19.750 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 12:39:19.752 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 12:39:19.760 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:39:19.763 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:39:19.779 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 38.6871ms
2025-05-16 12:39:19.788 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 41.1815ms
2025-05-16 12:39:19.794 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:39:19.799 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:39:19.807 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 125.3796ms
2025-05-16 12:39:19.810 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 115.2521ms
2025-05-16 12:39:42.708 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-16 12:39:42.713 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:39:42.715 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 6.455ms
2025-05-16 12:39:42.720 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 103
2025-05-16 12:39:42.728 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:39:42.730 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 12:39:42.733 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 12:39:42.740 +05:30 [INF] Starting allocation calculation...
2025-05-16 12:39:42.746 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 12:39:42.748 +05:30 [INF] Looking up base allocation for key: Mid+Long
2025-05-16 12:39:42.749 +05:30 [INF] Base allocation found: {"equity":50,"fixedIncome":30,"commodities":10,"cash":5,"realEstate":5}
2025-05-16 12:39:42.751 +05:30 [INF] Looking up age adjustment rules for key: 30-45
2025-05-16 12:39:42.755 +05:30 [INF] Age adjustments found: {}
2025-05-16 12:39:42.759 +05:30 [INF] Looking up goal tuning for goal: Big Purchase
2025-05-16 12:39:42.761 +05:30 [INF] Goal tuning found: {"balanced":true}
2025-05-16 12:39:42.769 +05:30 [INF] Sub-allocations for equity: {"Large Cap":12,"Mid Cap":9,"Small Cap":9}
2025-05-16 12:39:42.778 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-16 12:39:42.782 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":6.67,"Energy":5,"Agriculture":5}
2025-05-16 12:39:42.793 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":3.5,"Savings Acc":3.5,"T. Bill":4.67}
2025-05-16 12:39:42.796 +05:30 [INF] Sub-allocations for realEstate: {"REITs":4.38,"Residential Prop":2.92,"Commercial Prop":4.38}
2025-05-16 12:39:42.803 +05:30 [INF] Added sub-assets for equity: {"Large Cap":12,"Mid Cap":9,"Small Cap":9}
2025-05-16 12:39:42.805 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-16 12:39:42.811 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":6.67,"Energy":5,"Agriculture":5}
2025-05-16 12:39:42.814 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":3.5,"Savings Acc":3.5,"T. Bill":4.67}
2025-05-16 12:39:42.823 +05:30 [INF] Added sub-assets for realEstate: {"REITs":4.38,"Residential Prop":2.92,"Commercial Prop":4.38}
2025-05-16 12:39:42.827 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":30,"subAssets":{"Large Cap":12,"Mid Cap":9,"Small Cap":9}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":16.67,"subAssets":{"Precious Metals":6.67,"Energy":5,"Agriculture":5}},"cash":{"percentage":11.67,"subAssets":{"Liquid Mutual Funds":3.5,"Savings Acc":3.5,"T. Bill":4.67}},"realEstate":{"percentage":11.67,"subAssets":{"REITs":4.38,"Residential Prop":2.92,"Commercial Prop":4.38}}}
2025-05-16 12:39:42.846 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 12:39:42.849 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":30,"subAssets":{"Large Cap":12,"Mid Cap":9,"Small Cap":9}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":16.67,"subAssets":{"Precious Metals":6.67,"Energy":5,"Agriculture":5}},"cash":{"percentage":11.67,"subAssets":{"Liquid Mutual Funds":3.5,"Savings Acc":3.5,"T. Bill":4.67}},"realEstate":{"percentage":11.67,"subAssets":{"REITs":4.38,"Residential Prop":2.92,"Commercial Prop":4.38}}}
2025-05-16 12:39:42.860 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 12:39:42.866 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 126.5994ms
2025-05-16 12:39:42.868 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 12:39:42.873 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 153.8247ms
2025-05-16 12:39:42.885 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000000&investmentHorizon=9 - null null
2025-05-16 12:39:42.899 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:39:42.904 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000000&investmentHorizon=9 - 204 null null 18.6033ms
2025-05-16 12:39:42.915 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000000&investmentHorizon=9 - application/json 492
2025-05-16 12:39:42.928 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:39:42.932 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 12:39:42.942 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 12:39:42.961 +05:30 [INF] Starting product allocation calculation.
2025-05-16 12:39:42.965 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 12:39:42.969 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 12:39:43.077 +05:30 [INF] Product data loaded successfully.
2025-05-16 12:39:43.079 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 12:39:43.091 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.25, TargetAmount: 10000000, AnnualReturn: 10, InvestmentHorizon: 9.
2025-05-16 12:39:43.102 +05:30 [INF] Calculated investment amount: 265061.01.
2025-05-16 12:39:43.108 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.75, TargetAmount: 10000000, AnnualReturn: 9.2, InvestmentHorizon: 9.
2025-05-16 12:39:43.120 +05:30 [INF] Calculated investment amount: 260413.86.
2025-05-16 12:39:43.124 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 12:39:43.129 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.79, TargetAmount: 10000000, AnnualReturn: 12.5, InvestmentHorizon: 9.
2025-05-16 12:39:43.143 +05:30 [INF] Calculated investment amount: 165944.48.
2025-05-16 12:39:43.147 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.21, TargetAmount: 10000000, AnnualReturn: 11, InvestmentHorizon: 9.
2025-05-16 12:39:43.159 +05:30 [INF] Calculated investment amount: 164579.33.
2025-05-16 12:39:43.161 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 12:39:43.166 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.63, TargetAmount: 10000000, AnnualReturn: 14, InvestmentHorizon: 9.
2025-05-16 12:39:43.171 +05:30 [INF] Calculated investment amount: 142376.18.
2025-05-16 12:39:43.175 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.37, TargetAmount: 10000000, AnnualReturn: 13.2, InvestmentHorizon: 9.
2025-05-16 12:39:43.190 +05:30 [INF] Calculated investment amount: 143173.81.
2025-05-16 12:39:43.195 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 12:39:43.205 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.59, TargetAmount: 10000000, AnnualReturn: 5, InvestmentHorizon: 9.
2025-05-16 12:39:43.218 +05:30 [INF] Calculated investment amount: 295875.49.
2025-05-16 12:39:43.221 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.41, TargetAmount: 10000000, AnnualReturn: 4.8, InvestmentHorizon: 9.
2025-05-16 12:39:43.228 +05:30 [INF] Calculated investment amount: 289192.51.
2025-05-16 12:39:43.235 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 12:39:43.239 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.87, TargetAmount: 10000000, AnnualReturn: 6.8, InvestmentHorizon: 9.
2025-05-16 12:39:43.249 +05:30 [INF] Calculated investment amount: 324710.87.
2025-05-16 12:39:43.253 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.13, TargetAmount: 10000000, AnnualReturn: 7.1, InvestmentHorizon: 9.
2025-05-16 12:39:43.259 +05:30 [INF] Calculated investment amount: 330639.88.
2025-05-16 12:39:43.263 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 12:39:43.273 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.42, TargetAmount: 10000000, AnnualReturn: 5.5, InvestmentHorizon: 9.
2025-05-16 12:39:43.285 +05:30 [INF] Calculated investment amount: 272992.13.
2025-05-16 12:39:43.290 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.58, TargetAmount: 10000000, AnnualReturn: 5.7, InvestmentHorizon: 9.
2025-05-16 12:39:43.298 +05:30 [INF] Calculated investment amount: 278093.34.
2025-05-16 12:39:43.301 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 12:39:43.305 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.69, TargetAmount: 10000000, AnnualReturn: 7.8, InvestmentHorizon: 9.
2025-05-16 12:39:43.309 +05:30 [INF] Calculated investment amount: 187697.08.
2025-05-16 12:39:43.311 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.98, TargetAmount: 10000000, AnnualReturn: 6.3, InvestmentHorizon: 9.
2025-05-16 12:39:43.317 +05:30 [INF] Calculated investment amount: 171955.82.
2025-05-16 12:39:43.323 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Energy.
2025-05-16 12:39:43.325 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.36, TargetAmount: 10000000, AnnualReturn: 9.2, InvestmentHorizon: 9.
2025-05-16 12:39:43.330 +05:30 [INF] Calculated investment amount: 106882.91.
2025-05-16 12:39:43.334 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.64, TargetAmount: 10000000, AnnualReturn: 10.3, InvestmentHorizon: 9.
2025-05-16 12:39:43.337 +05:30 [INF] Calculated investment amount: 109250.72.
2025-05-16 12:39:43.339 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Agriculture.
2025-05-16 12:39:43.341 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.74, TargetAmount: 10000000, AnnualReturn: 8.5, InvestmentHorizon: 9.
2025-05-16 12:39:43.346 +05:30 [INF] Calculated investment amount: 131487.03.
2025-05-16 12:39:43.350 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.26, TargetAmount: 10000000, AnnualReturn: 7, InvestmentHorizon: 9.
2025-05-16 12:39:43.353 +05:30 [INF] Calculated investment amount: 122929.03.
2025-05-16 12:39:43.355 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Liquid Mutual Funds.
2025-05-16 12:39:43.356 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.78, TargetAmount: 10000000, AnnualReturn: 5.2, InvestmentHorizon: 9.
2025-05-16 12:39:43.361 +05:30 [INF] Calculated investment amount: 112792.01.
2025-05-16 12:39:43.365 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.72, TargetAmount: 10000000, AnnualReturn: 5, InvestmentHorizon: 9.
2025-05-16 12:39:43.368 +05:30 [INF] Calculated investment amount: 110872.73.
2025-05-16 12:39:43.369 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Savings Acc.
2025-05-16 12:39:43.371 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.63, TargetAmount: 10000000, AnnualReturn: 3.5, InvestmentHorizon: 9.
2025-05-16 12:39:43.377 +05:30 [INF] Calculated investment amount: 119598.15.
2025-05-16 12:39:43.379 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.87, TargetAmount: 10000000, AnnualReturn: 4, InvestmentHorizon: 9.
2025-05-16 12:39:43.385 +05:30 [INF] Calculated investment amount: 131383.72.
2025-05-16 12:39:43.388 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: T. Bill.
2025-05-16 12:39:43.392 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.27, TargetAmount: 10000000, AnnualReturn: 5.1, InvestmentHorizon: 9.
2025-05-16 12:39:43.396 +05:30 [INF] Calculated investment amount: 145077.95.
2025-05-16 12:39:43.398 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.4, TargetAmount: 10000000, AnnualReturn: 5.4, InvestmentHorizon: 9.
2025-05-16 12:39:43.403 +05:30 [INF] Calculated investment amount: 149501.57.
2025-05-16 12:39:43.411 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: REITs.
2025-05-16 12:39:43.416 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.12, TargetAmount: 10000000, AnnualReturn: 8.9, InvestmentHorizon: 9.
2025-05-16 12:39:43.426 +05:30 [INF] Calculated investment amount: 98420.36.
2025-05-16 12:39:43.430 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.26, TargetAmount: 10000000, AnnualReturn: 9.5, InvestmentHorizon: 9.
2025-05-16 12:39:43.435 +05:30 [INF] Calculated investment amount: 99857.66.
2025-05-16 12:39:43.440 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Residential Prop.
2025-05-16 12:39:43.445 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.4, TargetAmount: 10000000, AnnualReturn: 6.7, InvestmentHorizon: 9.
2025-05-16 12:39:43.451 +05:30 [INF] Calculated investment amount: 78099.5.
2025-05-16 12:39:43.457 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.52, TargetAmount: 10000000, AnnualReturn: 7.3, InvestmentHorizon: 9.
2025-05-16 12:39:43.463 +05:30 [INF] Calculated investment amount: 80620.61.
2025-05-16 12:39:43.467 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Commercial Prop.
2025-05-16 12:39:43.471 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.23, TargetAmount: 10000000, AnnualReturn: 10.2, InvestmentHorizon: 9.
2025-05-16 12:39:43.482 +05:30 [INF] Calculated investment amount: 93040.17.
2025-05-16 12:39:43.488 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.15, TargetAmount: 10000000, AnnualReturn: 9.8, InvestmentHorizon: 9.
2025-05-16 12:39:43.498 +05:30 [INF] Calculated investment amount: 92686.7.
2025-05-16 12:39:43.515 +05:30 [INF] Product allocations saved successfully to ProductAllocations.json
2025-05-16 12:39:43.518 +05:30 [INF] Final Product Allocations: {"equity":{"Large Cap":{"BlueChip Fund ":{"product_name":"BlueChip Fund ","annual_return":10,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Stable returns","Low risk"],"cons":["Lower growth"],"risk_level":"Low","percentage_split":6.25,"InvestmentAmount":265061.01},"Index Fund ":{"product_name":"Index Fund ","annual_return":9.2,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Diversified","Low cost"],"cons":["Market dependent"],"risk_level":"Moderate","percentage_split":5.75,"InvestmentAmount":260413.86}},"Mid Cap":{"Mid Cap Growth ":{"product_name":"Mid Cap Growth ","annual_return":12.5,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["High growth potential"],"cons":["Volatile"],"risk_level":"High","percentage_split":4.79,"InvestmentAmount":165944.48},"MidCap Blend ":{"product_name":"MidCap Blend ","annual_return":11,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["Balanced approach"],"cons":["Moderate risk"],"risk_level":"Moderate","percentage_split":4.21,"InvestmentAmount":164579.33}},"Small Cap":{"SmallCap Aggressive ":{"product_name":"SmallCap Aggressive ","annual_return":14,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Medium","pros":["High return potential"],"cons":["Very volatile"],"risk_level":"High","percentage_split":4.63,"InvestmentAmount":142376.18},"Emerging Companies ":{"product_name":"Emerging Companies ","annual_return":13.2,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Low","pros":["Growth stocks"],"cons":["Liquidity risk"],"risk_level":"High","percentage_split":4.37,"InvestmentAmount":143173.81}}},"fixedIncome":{"Gov Bonds":{"Government Bond ":{"product_name":"Government Bond ","annual_return":5,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Very safe","Guaranteed return"],"cons":["Low return"],"risk_level":"Low","percentage_split":4.59,"InvestmentAmount":295875.49},"Sovereign Bond ":{"product_name":"Sovereign Bond ","annual_return":4.8,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Stable income"],"cons":["Interest rate sensitive"],"risk_level":"Low","percentage_split":4.41,"InvestmentAmount":289192.51}},"Corp Bonds":{"Corporate Bond ":{"product_name":"Corporate Bond ","annual_return":6.8,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Better return"],"cons":["Company risk"],"risk_level":"Moderate","percentage_split":5.87,"InvestmentAmount":324710.87},"Private Corp Bond ":{"product_name":"Private Corp Bond ","annual_return":7.1,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Good yield"],"cons":["Credit risk"],"risk_level":"High","percentage_split":6.13,"InvestmentAmount":330639.88}},"Fixed Dep":{"Fixed Deposit ":{"product_name":"Fixed Deposit ","annual_return":5.5,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Capital safety"],"cons":["Low returns"],"risk_level":"Low","percentage_split":4.42,"InvestmentAmount":272992.13},"Bank FD ":{"product_name":"Bank FD ","annual_return":5.7,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Easy access"],"cons":["Taxable"],"risk_level":"Low","percentage_split":4.58,"InvestmentAmount":278093.34}}},"commodities":{"Precious Metals":{"Gold ETF":{"product_name":"Gold ETF","annual_return":7.8,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Inflation hedge","Safe haven asset"],"cons":["No income generation","Price volatility"],"risk_level":"Moderate","percentage_split":3.69,"InvestmentAmount":187697.08},"Silver Trust":{"product_name":"Silver Trust","annual_return":6.3,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Alternative investment","Deflation hedge"],"cons":["Subject to price swings","Not income-producing"],"risk_level":"Moderate","percentage_split":2.98,"InvestmentAmount":171955.82}},"Energy":{"Energy Fund":{"product_name":"Energy Fund","annual_return":9.2,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["High demand","Diversified exposure"],"cons":["Subject to price fluctuations","Geopolitical risks"],"risk_level":"Moderate","percentage_split":2.36,"InvestmentAmount":106882.91},"Oil \u0026 Gas ETF":{"product_name":"Oil \u0026 Gas ETF","annual_return":10.3,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["Strong returns","Global demand"],"cons":["Environmental impact","Political risk"],"risk_level":"High","percentage_split":2.64,"InvestmentAmount":109250.72}},"Agriculture":{"Agricultural ETF":{"product_name":"Agricultural ETF","annual_return":8.5,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Diversification","Growth potential"],"cons":["Weather dependent","Global supply issues"],"risk_level":"Moderate","percentage_split":2.74,"InvestmentAmount":131487.03},"Crop Futures B":{"product_name":"Crop Futures B","annual_return":7,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Alternative to stocks","Hedge against inflation"],"cons":["Market volatility","Weather sensitivity"],"risk_level":"Moderate","percentage_split":2.26,"InvestmentAmount":122929.03}}},"cash":{"Liquid Mutual Funds":{"Liquid Fund":{"product_name":"Liquid Fund","annual_return":5.2,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Quick redemption","Low risk"],"cons":["Lower returns","Short-term horizon"],"risk_level":"Low","percentage_split":1.78,"InvestmentAmount":112792.01},"Ultra Short Fund":{"product_name":"Ultra Short Fund","annual_return":5,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Better returns than savings","High liquidity"],"cons":["Interest rate risk","Short-term only"],"risk_level":"Low","percentage_split":1.72,"InvestmentAmount":110872.73}},"Savings Acc":{"Standard Savings Account":{"product_name":"Standard Savings Account","annual_return":3.5,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Very liquid","Capital safety"],"cons":["Very low returns","Not suitable for growth"],"risk_level":"Low","percentage_split":1.63,"InvestmentAmount":119598.15},"High Interest Savings":{"product_name":"High Interest Savings","annual_return":4,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Slightly higher returns","Safe and accessible"],"cons":["Still low returns","Inflation risk"],"risk_level":"Low","percentage_split":1.87,"InvestmentAmount":131383.72}},"T. Bill":{"91-Day T-Bill":{"product_name":"91-Day T-Bill","annual_return":5.1,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Government backed","Low risk"],"cons":["Fixed tenure","Lower yield"],"risk_level":"Low","percentage_split":2.27,"InvestmentAmount":145077.95},"182-Day T-Bill":{"product_name":"182-Day T-Bill","annual_return":5.4,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Safe investment","Short maturity"],"cons":["Not liquid before maturity","Limited returns"],"risk_level":"Low","percentage_split":2.4,"InvestmentAmount":149501.57}}},"realEstate":{"REITs":{"REITs Trust ":{"product_name":"REITs Trust ","annual_return":8.9,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"Moderate","pros":["Stable returns","Diversified portfolio"],"cons":["Sensitive to interest rates","Limited growth"],"risk_level":"Moderate","percentage_split":2.12,"InvestmentAmount":98420.36},"Vanguad Real Estate":{"product_name":"Vanguad Real Estate","annual_return":9.5,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"High","pros":["Tax efficiency","Regular income"],"cons":["Market volatility","Fees"],"risk_level":"High","percentage_split":2.26,"InvestmentAmount":99857.66}},"Residential Prop":{"Residential Scheme ":{"product_name":"Residential Scheme ","annual_return":6.7,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Low","pros":["Stable income","Low volatility"],"cons":["Low liquidity","Maintenance costs"],"risk_level":"Low","percentage_split":1.4,"InvestmentAmount":78099.5},"Housing Fund":{"product_name":"Housing Fund","annual_return":7.3,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Moderate","pros":["Tax benefits","Long-term growth"],"cons":["Location dependent","Slow ROI"],"risk_level":"Moderate","percentage_split":1.52,"InvestmentAmount":80620.61}},"Commercial Prop":{"Commercial Plaza":{"product_name":"Commercial Plaza","annual_return":10.2,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Low","pros":["High rental yields","Strong appreciation"],"cons":["High initial cost","Vacancy risk"],"risk_level":"High","percentage_split":2.23,"InvestmentAmount":93040.17},"Office Fund":{"product_name":"Office Fund","annual_return":9.8,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Moderate","pros":["Steady returns","Long leases"],"cons":["Tenant turnover","High maintenance"],"risk_level":"High","percentage_split":2.15,"InvestmentAmount":92686.7}}}}
2025-05-16 12:39:43.580 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:39:43.587 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 635.9006ms
2025-05-16 12:39:43.589 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 12:39:43.592 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000000&investmentHorizon=9 - 200 null application/json; charset=utf-8 676.8822ms
2025-05-16 12:39:43.625 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:39:43.627 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:39:43.652 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:39:43.645 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:39:43.656 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 29.0158ms
2025-05-16 12:39:43.660 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 35.1579ms
2025-05-16 12:39:43.669 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:39:43.679 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:39:43.684 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:39:43.688 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:39:43.690 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:39:43.694 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:39:43.697 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 12:39:43.702 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 12:39:43.713 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 12:39:43.724 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 12:39:43.737 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 12:39:43.742 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 12:39:43.749 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:39:43.754 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:39:43.765 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 51.9574ms
2025-05-16 12:39:43.785 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 61.0268ms
2025-05-16 12:39:43.794 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:39:43.802 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:39:43.810 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 140.5425ms
2025-05-16 12:39:43.815 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 136.6446ms
2025-05-16 12:43:54.151 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:43:54.151 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:43:54.157 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:43:54.164 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:43:54.166 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 15.2784ms
2025-05-16 12:43:54.174 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 23.086ms
2025-05-16 12:43:54.184 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:43:54.194 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:43:54.205 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:43:54.225 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:43:54.232 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:43:54.235 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:43:54.239 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 12:43:54.243 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 12:43:54.255 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 12:43:54.262 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 12:43:54.270 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 12:43:54.272 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 12:43:54.274 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:43:54.279 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:43:54.286 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 31.4437ms
2025-05-16 12:43:54.297 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 34.6433ms
2025-05-16 12:43:54.304 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:43:54.311 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:43:54.319 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 135.6009ms
2025-05-16 12:43:54.321 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 127.3569ms
2025-05-16 12:44:07.757 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:44:07.757 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:44:07.772 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:44:07.764 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:44:07.778 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 20.684ms
2025-05-16 12:44:07.780 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 23.0909ms
2025-05-16 12:44:07.792 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:44:07.812 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:44:07.814 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:44:07.807 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:44:07.818 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 12:44:07.822 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:44:07.837 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:44:07.836 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 12:44:07.839 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 12:44:07.842 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 12:44:07.852 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 12:44:07.856 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:44:07.859 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 12:44:07.861 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 26.141ms
2025-05-16 12:44:07.868 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:44:07.873 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:44:07.889 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 37.1535ms
2025-05-16 12:44:07.892 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 100.42ms
2025-05-16 12:44:07.898 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:44:07.911 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 103.1145ms
2025-05-16 12:46:11.800 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:46:11.806 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:46:11.818 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:46:11.831 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:46:11.834 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 33.8395ms
2025-05-16 12:46:11.839 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 33.2179ms
2025-05-16 12:46:11.853 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:46:11.865 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:46:11.876 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:46:11.892 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:46:11.903 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:46:11.907 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:46:11.912 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 12:46:11.922 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 12:46:11.933 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 12:46:11.942 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 12:46:11.949 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 12:46:11.951 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 12:46:11.952 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:46:11.955 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:46:11.966 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 33.0236ms
2025-05-16 12:46:11.969 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 27.4434ms
2025-05-16 12:46:11.973 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:46:11.981 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:46:11.984 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 130.7518ms
2025-05-16 12:46:11.988 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 122.8159ms
2025-05-16 12:47:40.455 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:47:40.458 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:47:40.461 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:47:40.468 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:47:40.473 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 17.8856ms
2025-05-16 12:47:40.477 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 18.9773ms
2025-05-16 12:47:40.485 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:47:40.496 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:47:40.502 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:47:40.518 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:47:40.522 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:47:40.526 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:47:40.529 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 12:47:40.534 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 12:47:40.549 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 12:47:40.565 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 12:47:40.576 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 12:47:40.581 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 12:47:40.583 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:47:40.588 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:47:40.599 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 49.4875ms
2025-05-16 12:47:40.628 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 63.3046ms
2025-05-16 12:47:40.635 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:47:40.647 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:47:40.650 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 165.0558ms
2025-05-16 12:47:40.653 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 157.4111ms
2025-05-16 12:47:42.369 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:47:42.369 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:47:42.376 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:47:42.388 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:47:42.382 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:47:42.391 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 12:47:42.410 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:47:42.419 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 12:47:42.423 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 12:47:42.426 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 12:47:42.433 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 12:47:42.435 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:47:42.440 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 12:47:42.450 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 31.2811ms
2025-05-16 12:47:42.457 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:47:42.462 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:47:42.465 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 32.5975ms
2025-05-16 12:47:42.467 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 98.7148ms
2025-05-16 12:47:42.475 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:47:42.482 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 113.18ms
2025-05-16 12:48:17.649 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:48:17.655 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:48:17.662 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:48:17.675 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:48:17.678 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 28.8964ms
2025-05-16 12:48:17.683 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 28.5084ms
2025-05-16 12:48:17.694 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:48:17.711 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:48:17.725 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:48:17.739 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:48:17.743 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:48:17.746 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:48:17.751 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 12:48:17.755 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 12:48:17.769 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 12:48:17.778 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 12:48:17.790 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 12:48:17.795 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 12:48:17.797 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:48:17.806 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:48:17.812 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 42.4268ms
2025-05-16 12:48:17.838 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 59.7921ms
2025-05-16 12:48:17.843 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:48:17.850 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:48:17.852 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 157.4416ms
2025-05-16 12:48:17.859 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 148.3842ms
2025-05-16 12:48:21.824 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:48:21.826 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:48:21.829 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:48:21.833 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:48:21.835 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:48:21.837 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:48:21.839 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 12:48:21.846 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 12:48:21.862 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 12:48:21.872 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 12:48:21.881 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 12:48:21.895 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 12:48:21.897 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:48:21.904 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:48:21.914 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 51.1561ms
2025-05-16 12:48:21.924 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 52.1748ms
2025-05-16 12:48:21.936 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:48:21.941 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:48:21.945 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 120.9692ms
2025-05-16 12:48:21.954 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 127.6016ms
2025-05-16 12:48:39.754 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-16 12:48:39.766 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:48:39.768 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 14.1554ms
2025-05-16 12:48:39.777 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 102
2025-05-16 12:48:39.781 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:48:39.783 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 12:48:39.784 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 12:48:39.796 +05:30 [INF] Starting allocation calculation...
2025-05-16 12:48:39.798 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 12:48:39.800 +05:30 [INF] Looking up base allocation for key: Low+Short
2025-05-16 12:48:39.801 +05:30 [INF] Base allocation found: {"equity":10,"fixedIncome":40,"commodities":5,"cash":40,"realEstate":5}
2025-05-16 12:48:39.803 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 12:48:39.808 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 12:48:39.814 +05:30 [INF] Looking up goal tuning for goal: Child's Education
2025-05-16 12:48:39.816 +05:30 [WRN] No goal tuning found for goal: Child's Education
2025-05-16 12:48:39.823 +05:30 [INF] Sub-allocations for equity: {"Large Cap":12.5,"Mid Cap":5,"Small Cap":2.5}
2025-05-16 12:48:39.825 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":17.5,"Corp Bonds":7,"Fixed Dep":10.5}
2025-05-16 12:48:39.829 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":3.12,"Energy":1.25,"Agriculture":0.62}
2025-05-16 12:48:39.831 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":8.08,"Savings Acc":13.46,"T. Bill":13.46}
2025-05-16 12:48:39.833 +05:30 [INF] Sub-allocations for realEstate: {"REITs":2,"Residential Prop":2,"Commercial Prop":1}
2025-05-16 12:48:39.837 +05:30 [INF] Added sub-assets for equity: {"Large Cap":12.5,"Mid Cap":5,"Small Cap":2.5}
2025-05-16 12:48:39.839 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":17.5,"Corp Bonds":7,"Fixed Dep":10.5}
2025-05-16 12:48:39.843 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":3.12,"Energy":1.25,"Agriculture":0.62}
2025-05-16 12:48:39.845 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":8.08,"Savings Acc":13.46,"T. Bill":13.46}
2025-05-16 12:48:39.846 +05:30 [INF] Added sub-assets for realEstate: {"REITs":2,"Residential Prop":2,"Commercial Prop":1}
2025-05-16 12:48:39.848 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":20,"subAssets":{"Large Cap":12.5,"Mid Cap":5,"Small Cap":2.5}},"fixedIncome":{"percentage":35,"subAssets":{"Gov Bonds":17.5,"Corp Bonds":7,"Fixed Dep":10.5}},"commodities":{"percentage":5,"subAssets":{"Precious Metals":3.12,"Energy":1.25,"Agriculture":0.62}},"cash":{"percentage":35,"subAssets":{"Liquid Mutual Funds":8.08,"Savings Acc":13.46,"T. Bill":13.46}},"realEstate":{"percentage":5,"subAssets":{"REITs":2,"Residential Prop":2,"Commercial Prop":1}}}
2025-05-16 12:48:39.858 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 12:48:39.860 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":20,"subAssets":{"Large Cap":12.5,"Mid Cap":5,"Small Cap":2.5}},"fixedIncome":{"percentage":35,"subAssets":{"Gov Bonds":17.5,"Corp Bonds":7,"Fixed Dep":10.5}},"commodities":{"percentage":5,"subAssets":{"Precious Metals":3.12,"Energy":1.25,"Agriculture":0.62}},"cash":{"percentage":35,"subAssets":{"Liquid Mutual Funds":8.08,"Savings Acc":13.46,"T. Bill":13.46}},"realEstate":{"percentage":5,"subAssets":{"REITs":2,"Residential Prop":2,"Commercial Prop":1}}}
2025-05-16 12:48:39.863 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 12:48:39.864 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 69.5027ms
2025-05-16 12:48:39.866 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 12:48:39.868 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 90.3657ms
2025-05-16 12:48:39.872 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=20000&investmentHorizon=3 - null null
2025-05-16 12:48:39.881 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:48:39.884 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=20000&investmentHorizon=3 - 204 null null 11.4084ms
2025-05-16 12:48:39.900 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=20000&investmentHorizon=3 - application/json 491
2025-05-16 12:48:39.913 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:48:39.916 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 12:48:39.921 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 12:48:39.950 +05:30 [INF] Starting product allocation calculation.
2025-05-16 12:48:39.954 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 12:48:39.965 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 12:48:40.102 +05:30 [INF] Product data loaded successfully.
2025-05-16 12:48:40.103 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 12:48:40.111 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.51, TargetAmount: 20000, AnnualReturn: 10, InvestmentHorizon: 3.
2025-05-16 12:48:40.115 +05:30 [INF] Calculated investment amount: 978.21.
2025-05-16 12:48:40.116 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.99, TargetAmount: 20000, AnnualReturn: 9.2, InvestmentHorizon: 3.
2025-05-16 12:48:40.119 +05:30 [INF] Calculated investment amount: 920.
2025-05-16 12:48:40.120 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 12:48:40.122 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.66, TargetAmount: 20000, AnnualReturn: 12.5, InvestmentHorizon: 3.
2025-05-16 12:48:40.126 +05:30 [INF] Calculated investment amount: 373.64.
2025-05-16 12:48:40.128 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.34, TargetAmount: 20000, AnnualReturn: 11, InvestmentHorizon: 3.
2025-05-16 12:48:40.130 +05:30 [INF] Calculated investment amount: 342.2.
2025-05-16 12:48:40.132 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 12:48:40.138 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.29, TargetAmount: 20000, AnnualReturn: 14, InvestmentHorizon: 3.
2025-05-16 12:48:40.142 +05:30 [INF] Calculated investment amount: 174.14.
2025-05-16 12:48:40.143 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.21, TargetAmount: 20000, AnnualReturn: 13.2, InvestmentHorizon: 3.
2025-05-16 12:48:40.146 +05:30 [INF] Calculated investment amount: 166.83.
2025-05-16 12:48:40.147 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 12:48:40.151 +05:30 [INF] Calculating investment amount with PercentageSplit: 8.93, TargetAmount: 20000, AnnualReturn: 5, InvestmentHorizon: 3.
2025-05-16 12:48:40.155 +05:30 [INF] Calculated investment amount: 1542.81.
2025-05-16 12:48:40.156 +05:30 [INF] Calculating investment amount with PercentageSplit: 8.57, TargetAmount: 20000, AnnualReturn: 4.8, InvestmentHorizon: 3.
2025-05-16 12:48:40.159 +05:30 [INF] Calculated investment amount: 1489.11.
2025-05-16 12:48:40.160 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 12:48:40.162 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.42, TargetAmount: 20000, AnnualReturn: 6.8, InvestmentHorizon: 3.
2025-05-16 12:48:40.173 +05:30 [INF] Calculated investment amount: 561.49.
2025-05-16 12:48:40.179 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.58, TargetAmount: 20000, AnnualReturn: 7.1, InvestmentHorizon: 3.
2025-05-16 12:48:40.190 +05:30 [INF] Calculated investment amount: 582.83.
2025-05-16 12:48:40.195 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 12:48:40.203 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.16, TargetAmount: 20000, AnnualReturn: 5.5, InvestmentHorizon: 3.
2025-05-16 12:48:40.209 +05:30 [INF] Calculated investment amount: 878.87.
2025-05-16 12:48:40.212 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.34, TargetAmount: 20000, AnnualReturn: 5.7, InvestmentHorizon: 3.
2025-05-16 12:48:40.228 +05:30 [INF] Calculated investment amount: 904.37.
2025-05-16 12:48:40.235 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 12:48:40.239 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.73, TargetAmount: 20000, AnnualReturn: 7.8, InvestmentHorizon: 3.
2025-05-16 12:48:40.250 +05:30 [INF] Calculated investment amount: 276.2.
2025-05-16 12:48:40.253 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.39, TargetAmount: 20000, AnnualReturn: 6.3, InvestmentHorizon: 3.
2025-05-16 12:48:40.260 +05:30 [INF] Calculated investment amount: 231.44.
2025-05-16 12:48:40.267 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Energy.
2025-05-16 12:48:40.271 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.59, TargetAmount: 20000, AnnualReturn: 9.2, InvestmentHorizon: 3.
2025-05-16 12:48:40.281 +05:30 [INF] Calculated investment amount: 90.62.
2025-05-16 12:48:40.285 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.66, TargetAmount: 20000, AnnualReturn: 10.3, InvestmentHorizon: 3.
2025-05-16 12:48:40.291 +05:30 [INF] Calculated investment amount: 98.37.
2025-05-16 12:48:40.296 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Agriculture.
2025-05-16 12:48:40.299 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.34, TargetAmount: 20000, AnnualReturn: 8.5, InvestmentHorizon: 3.
2025-05-16 12:48:40.305 +05:30 [INF] Calculated investment amount: 53.24.
2025-05-16 12:48:40.308 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.28, TargetAmount: 20000, AnnualReturn: 7, InvestmentHorizon: 3.
2025-05-16 12:48:40.321 +05:30 [INF] Calculated investment amount: 45.71.
2025-05-16 12:48:40.330 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Liquid Mutual Funds.
2025-05-16 12:48:40.334 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.12, TargetAmount: 20000, AnnualReturn: 5.2, InvestmentHorizon: 3.
2025-05-16 12:48:40.340 +05:30 [INF] Calculated investment amount: 707.75.
2025-05-16 12:48:40.347 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.96, TargetAmount: 20000, AnnualReturn: 5, InvestmentHorizon: 3.
2025-05-16 12:48:40.354 +05:30 [INF] Calculated investment amount: 684.16.
2025-05-16 12:48:40.361 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Savings Acc.
2025-05-16 12:48:40.365 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.28, TargetAmount: 20000, AnnualReturn: 3.5, InvestmentHorizon: 3.
2025-05-16 12:48:40.370 +05:30 [INF] Calculated investment amount: 1132.84.
2025-05-16 12:48:40.372 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.18, TargetAmount: 20000, AnnualReturn: 4, InvestmentHorizon: 3.
2025-05-16 12:48:40.378 +05:30 [INF] Calculated investment amount: 1276.6.
2025-05-16 12:48:40.383 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: T. Bill.
2025-05-16 12:48:40.385 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.54, TargetAmount: 20000, AnnualReturn: 5.1, InvestmentHorizon: 3.
2025-05-16 12:48:40.394 +05:30 [INF] Calculated investment amount: 1126.68.
2025-05-16 12:48:40.396 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.92, TargetAmount: 20000, AnnualReturn: 5.4, InvestmentHorizon: 3.
2025-05-16 12:48:40.401 +05:30 [INF] Calculated investment amount: 1181.99.
2025-05-16 12:48:40.402 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: REITs.
2025-05-16 12:48:40.407 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.97, TargetAmount: 20000, AnnualReturn: 8.9, InvestmentHorizon: 3.
2025-05-16 12:48:40.412 +05:30 [INF] Calculated investment amount: 150.22.
2025-05-16 12:48:40.413 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.03, TargetAmount: 20000, AnnualReturn: 9.5, InvestmentHorizon: 3.
2025-05-16 12:48:40.417 +05:30 [INF] Calculated investment amount: 156.9.
2025-05-16 12:48:40.419 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Residential Prop.
2025-05-16 12:48:40.423 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.96, TargetAmount: 20000, AnnualReturn: 6.7, InvestmentHorizon: 3.
2025-05-16 12:48:40.430 +05:30 [INF] Calculated investment amount: 158.05.
2025-05-16 12:48:40.432 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.04, TargetAmount: 20000, AnnualReturn: 7.3, InvestmentHorizon: 3.
2025-05-16 12:48:40.435 +05:30 [INF] Calculated investment amount: 168.37.
2025-05-16 12:48:40.438 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Commercial Prop.
2025-05-16 12:48:40.440 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.51, TargetAmount: 20000, AnnualReturn: 10.2, InvestmentHorizon: 3.
2025-05-16 12:48:40.444 +05:30 [INF] Calculated investment amount: 76.22.
2025-05-16 12:48:40.446 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.49, TargetAmount: 20000, AnnualReturn: 9.8, InvestmentHorizon: 3.
2025-05-16 12:48:40.448 +05:30 [INF] Calculated investment amount: 74.03.
2025-05-16 12:48:40.453 +05:30 [INF] Product allocations saved successfully to ProductAllocations.json
2025-05-16 12:48:40.456 +05:30 [INF] Final Product Allocations: {"equity":{"Large Cap":{"BlueChip Fund ":{"product_name":"BlueChip Fund ","annual_return":10,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Stable returns","Low risk"],"cons":["Lower growth"],"risk_level":"Low","percentage_split":6.51,"InvestmentAmount":978.21},"Index Fund ":{"product_name":"Index Fund ","annual_return":9.2,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Diversified","Low cost"],"cons":["Market dependent"],"risk_level":"Moderate","percentage_split":5.99,"InvestmentAmount":920}},"Mid Cap":{"Mid Cap Growth ":{"product_name":"Mid Cap Growth ","annual_return":12.5,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["High growth potential"],"cons":["Volatile"],"risk_level":"High","percentage_split":2.66,"InvestmentAmount":373.64},"MidCap Blend ":{"product_name":"MidCap Blend ","annual_return":11,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["Balanced approach"],"cons":["Moderate risk"],"risk_level":"Moderate","percentage_split":2.34,"InvestmentAmount":342.2}},"Small Cap":{"SmallCap Aggressive ":{"product_name":"SmallCap Aggressive ","annual_return":14,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Medium","pros":["High return potential"],"cons":["Very volatile"],"risk_level":"High","percentage_split":1.29,"InvestmentAmount":174.14},"Emerging Companies ":{"product_name":"Emerging Companies ","annual_return":13.2,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Low","pros":["Growth stocks"],"cons":["Liquidity risk"],"risk_level":"High","percentage_split":1.21,"InvestmentAmount":166.83}}},"fixedIncome":{"Gov Bonds":{"Government Bond ":{"product_name":"Government Bond ","annual_return":5,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Very safe","Guaranteed return"],"cons":["Low return"],"risk_level":"Low","percentage_split":8.93,"InvestmentAmount":1542.81},"Sovereign Bond ":{"product_name":"Sovereign Bond ","annual_return":4.8,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Stable income"],"cons":["Interest rate sensitive"],"risk_level":"Low","percentage_split":8.57,"InvestmentAmount":1489.11}},"Corp Bonds":{"Corporate Bond ":{"product_name":"Corporate Bond ","annual_return":6.8,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Better return"],"cons":["Company risk"],"risk_level":"Moderate","percentage_split":3.42,"InvestmentAmount":561.49},"Private Corp Bond ":{"product_name":"Private Corp Bond ","annual_return":7.1,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Good yield"],"cons":["Credit risk"],"risk_level":"High","percentage_split":3.58,"InvestmentAmount":582.83}},"Fixed Dep":{"Fixed Deposit ":{"product_name":"Fixed Deposit ","annual_return":5.5,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Capital safety"],"cons":["Low returns"],"risk_level":"Low","percentage_split":5.16,"InvestmentAmount":878.87},"Bank FD ":{"product_name":"Bank FD ","annual_return":5.7,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Easy access"],"cons":["Taxable"],"risk_level":"Low","percentage_split":5.34,"InvestmentAmount":904.37}}},"commodities":{"Precious Metals":{"Gold ETF":{"product_name":"Gold ETF","annual_return":7.8,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Inflation hedge","Safe haven asset"],"cons":["No income generation","Price volatility"],"risk_level":"Moderate","percentage_split":1.73,"InvestmentAmount":276.2},"Silver Trust":{"product_name":"Silver Trust","annual_return":6.3,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Alternative investment","Deflation hedge"],"cons":["Subject to price swings","Not income-producing"],"risk_level":"Moderate","percentage_split":1.39,"InvestmentAmount":231.44}},"Energy":{"Energy Fund":{"product_name":"Energy Fund","annual_return":9.2,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["High demand","Diversified exposure"],"cons":["Subject to price fluctuations","Geopolitical risks"],"risk_level":"Moderate","percentage_split":0.59,"InvestmentAmount":90.62},"Oil \u0026 Gas ETF":{"product_name":"Oil \u0026 Gas ETF","annual_return":10.3,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["Strong returns","Global demand"],"cons":["Environmental impact","Political risk"],"risk_level":"High","percentage_split":0.66,"InvestmentAmount":98.37}},"Agriculture":{"Agricultural ETF":{"product_name":"Agricultural ETF","annual_return":8.5,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Diversification","Growth potential"],"cons":["Weather dependent","Global supply issues"],"risk_level":"Moderate","percentage_split":0.34,"InvestmentAmount":53.24},"Crop Futures B":{"product_name":"Crop Futures B","annual_return":7,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Alternative to stocks","Hedge against inflation"],"cons":["Market volatility","Weather sensitivity"],"risk_level":"Moderate","percentage_split":0.28,"InvestmentAmount":45.71}}},"cash":{"Liquid Mutual Funds":{"Liquid Fund":{"product_name":"Liquid Fund","annual_return":5.2,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Quick redemption","Low risk"],"cons":["Lower returns","Short-term horizon"],"risk_level":"Low","percentage_split":4.12,"InvestmentAmount":707.75},"Ultra Short Fund":{"product_name":"Ultra Short Fund","annual_return":5,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Better returns than savings","High liquidity"],"cons":["Interest rate risk","Short-term only"],"risk_level":"Low","percentage_split":3.96,"InvestmentAmount":684.16}},"Savings Acc":{"Standard Savings Account":{"product_name":"Standard Savings Account","annual_return":3.5,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Very liquid","Capital safety"],"cons":["Very low returns","Not suitable for growth"],"risk_level":"Low","percentage_split":6.28,"InvestmentAmount":1132.84},"High Interest Savings":{"product_name":"High Interest Savings","annual_return":4,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Slightly higher returns","Safe and accessible"],"cons":["Still low returns","Inflation risk"],"risk_level":"Low","percentage_split":7.18,"InvestmentAmount":1276.6}},"T. Bill":{"91-Day T-Bill":{"product_name":"91-Day T-Bill","annual_return":5.1,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Government backed","Low risk"],"cons":["Fixed tenure","Lower yield"],"risk_level":"Low","percentage_split":6.54,"InvestmentAmount":1126.68},"182-Day T-Bill":{"product_name":"182-Day T-Bill","annual_return":5.4,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Safe investment","Short maturity"],"cons":["Not liquid before maturity","Limited returns"],"risk_level":"Low","percentage_split":6.92,"InvestmentAmount":1181.99}}},"realEstate":{"REITs":{"REITs Trust ":{"product_name":"REITs Trust ","annual_return":8.9,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"Moderate","pros":["Stable returns","Diversified portfolio"],"cons":["Sensitive to interest rates","Limited growth"],"risk_level":"Moderate","percentage_split":0.97,"InvestmentAmount":150.22},"Vanguad Real Estate":{"product_name":"Vanguad Real Estate","annual_return":9.5,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"High","pros":["Tax efficiency","Regular income"],"cons":["Market volatility","Fees"],"risk_level":"High","percentage_split":1.03,"InvestmentAmount":156.9}},"Residential Prop":{"Residential Scheme ":{"product_name":"Residential Scheme ","annual_return":6.7,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Low","pros":["Stable income","Low volatility"],"cons":["Low liquidity","Maintenance costs"],"risk_level":"Low","percentage_split":0.96,"InvestmentAmount":158.05},"Housing Fund":{"product_name":"Housing Fund","annual_return":7.3,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Moderate","pros":["Tax benefits","Long-term growth"],"cons":["Location dependent","Slow ROI"],"risk_level":"Moderate","percentage_split":1.04,"InvestmentAmount":168.37}},"Commercial Prop":{"Commercial Plaza":{"product_name":"Commercial Plaza","annual_return":10.2,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Low","pros":["High rental yields","Strong appreciation"],"cons":["High initial cost","Vacancy risk"],"risk_level":"High","percentage_split":0.51,"InvestmentAmount":76.22},"Office Fund":{"product_name":"Office Fund","annual_return":9.8,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Moderate","pros":["Steady returns","Long leases"],"cons":["Tenant turnover","High maintenance"],"risk_level":"High","percentage_split":0.49,"InvestmentAmount":74.03}}}}
2025-05-16 12:48:40.512 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:48:40.526 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 589.094ms
2025-05-16 12:48:40.537 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 12:48:40.543 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=20000&investmentHorizon=3 - 200 null application/json; charset=utf-8 642.9295ms
2025-05-16 12:48:40.568 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:48:40.589 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:48:40.576 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:48:40.598 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 29.8089ms
2025-05-16 12:48:40.607 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:48:40.614 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 12:48:40.625 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 48.5618ms
2025-05-16 12:48:40.636 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:48:40.653 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 12:48:40.661 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:48:40.670 +05:30 [INF] CORS policy execution successful.
2025-05-16 12:48:40.672 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 12:48:40.678 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:48:40.685 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 12:48:40.687 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 12:48:40.697 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 12:48:40.703 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 12:48:40.706 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:48:40.710 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 12:48:40.726 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 41.2037ms
2025-05-16 12:48:40.729 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 12:48:40.744 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 12:48:40.750 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 47.4756ms
2025-05-16 12:48:40.759 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 12:48:40.753 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 138.5245ms
2025-05-16 12:48:40.762 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 108.1345ms
2025-05-16 12:51:55.402 +05:30 [INF] Application is shutting down...
2025-05-16 13:21:21.235 +05:30 [INF] User profile is available. Using 'C:\Users\Bhavya Bansal\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-16 13:21:21.378 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-16 13:21:21.381 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-16 13:21:21.383 +05:30 [INF] Hosting environment: Development
2025-05-16 13:21:21.384 +05:30 [INF] Content root path: C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements
2025-05-16 13:21:43.247 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-16 13:21:43.329 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:21:43.342 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 97.6464ms
2025-05-16 13:21:43.350 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 67
2025-05-16 13:21:43.445 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:21:43.451 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-16 13:21:43.491 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-16 13:21:43.603 +05:30 [INF] Executing UnauthorizedObjectResult, writing value of type '<>f__AnonymousType0`1[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:21:43.630 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 132.0836ms
2025-05-16 13:21:43.632 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-16 13:21:43.633 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 401 null application/json; charset=utf-8 282.817ms
2025-05-16 13:22:06.070 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Auth/register - null null
2025-05-16 13:22:06.081 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:22:06.082 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Auth/register - 204 null null 11.1532ms
2025-05-16 13:22:06.085 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Auth/register - application/json 105
2025-05-16 13:22:06.087 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:22:06.088 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Register (WisVest)'
2025-05-16 13:22:06.090 +05:30 [INF] Route matched with {action = "Register", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Register(UserRegisterRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-16 13:22:06.183 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType0`1[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:22:06.186 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Register (WisVest) in 95.2057ms
2025-05-16 13:22:06.189 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Register (WisVest)'
2025-05-16 13:22:06.189 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Auth/register - 200 null application/json; charset=utf-8 104.3756ms
2025-05-16 13:22:10.968 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-16 13:22:10.972 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:22:10.974 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 5.7605ms
2025-05-16 13:22:10.977 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 64
2025-05-16 13:22:10.980 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:22:10.981 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-16 13:22:10.982 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-16 13:22:11.102 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType1`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:22:11.105 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 121.991ms
2025-05-16 13:22:11.107 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-16 13:22:11.108 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 200 null application/json; charset=utf-8 131.0886ms
2025-05-16 13:22:28.256 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-16 13:22:28.258 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:22:28.260 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 4.4544ms
2025-05-16 13:22:28.263 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 104
2025-05-16 13:22:28.267 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:22:28.268 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 13:22:28.276 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 13:22:28.298 +05:30 [INF] Starting allocation calculation...
2025-05-16 13:22:28.320 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 13:22:28.320 +05:30 [INF] Looking up base allocation for key: Low+Short
2025-05-16 13:22:28.324 +05:30 [INF] Base allocation found: {"equity":10,"fixedIncome":40,"commodities":5,"cash":40,"realEstate":5}
2025-05-16 13:22:28.325 +05:30 [INF] Looking up age adjustment rules for key: 30-45
2025-05-16 13:22:28.326 +05:30 [INF] Age adjustments found: {}
2025-05-16 13:22:28.327 +05:30 [INF] Looking up goal tuning for goal: Wealth Accumulation
2025-05-16 13:22:28.334 +05:30 [INF] Goal tuning found: {"equity_priority":true,"equity_boost":2,"equity_threshold":40}
2025-05-16 13:22:28.351 +05:30 [INF] Sub-allocations for equity: {"Large Cap":12.5,"Mid Cap":5,"Small Cap":2.5}
2025-05-16 13:22:28.353 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":18.75,"Corp Bonds":7.5,"Fixed Dep":11.25}
2025-05-16 13:22:28.354 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":1.56,"Energy":0.62,"Agriculture":0.31}
2025-05-16 13:22:28.354 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":8.65,"Savings Acc":14.42,"T. Bill":14.42}
2025-05-16 13:22:28.355 +05:30 [INF] Sub-allocations for realEstate: {"REITs":1,"Residential Prop":1,"Commercial Prop":0.5}
2025-05-16 13:22:28.355 +05:30 [INF] Added sub-assets for equity: {"Large Cap":12.5,"Mid Cap":5,"Small Cap":2.5}
2025-05-16 13:22:28.356 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":18.75,"Corp Bonds":7.5,"Fixed Dep":11.25}
2025-05-16 13:22:28.357 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":1.56,"Energy":0.62,"Agriculture":0.31}
2025-05-16 13:22:28.358 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":8.65,"Savings Acc":14.42,"T. Bill":14.42}
2025-05-16 13:22:28.359 +05:30 [INF] Added sub-assets for realEstate: {"REITs":1,"Residential Prop":1,"Commercial Prop":0.5}
2025-05-16 13:22:28.379 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":20,"subAssets":{"Large Cap":12.5,"Mid Cap":5,"Small Cap":2.5}},"fixedIncome":{"percentage":37.5,"subAssets":{"Gov Bonds":18.75,"Corp Bonds":7.5,"Fixed Dep":11.25}},"commodities":{"percentage":2.5,"subAssets":{"Precious Metals":1.56,"Energy":0.62,"Agriculture":0.31}},"cash":{"percentage":37.5,"subAssets":{"Liquid Mutual Funds":8.65,"Savings Acc":14.42,"T. Bill":14.42}},"realEstate":{"percentage":2.5,"subAssets":{"REITs":1,"Residential Prop":1,"Commercial Prop":0.5}}}
2025-05-16 13:22:28.384 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 13:22:28.385 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":20,"subAssets":{"Large Cap":12.5,"Mid Cap":5,"Small Cap":2.5}},"fixedIncome":{"percentage":37.5,"subAssets":{"Gov Bonds":18.75,"Corp Bonds":7.5,"Fixed Dep":11.25}},"commodities":{"percentage":2.5,"subAssets":{"Precious Metals":1.56,"Energy":0.62,"Agriculture":0.31}},"cash":{"percentage":37.5,"subAssets":{"Liquid Mutual Funds":8.65,"Savings Acc":14.42,"T. Bill":14.42}},"realEstate":{"percentage":2.5,"subAssets":{"REITs":1,"Residential Prop":1,"Commercial Prop":0.5}}}
2025-05-16 13:22:28.387 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 13:22:28.390 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 111.4385ms
2025-05-16 13:22:28.392 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 13:22:28.396 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 132.8969ms
2025-05-16 13:22:28.400 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=3 - null null
2025-05-16 13:22:28.401 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:22:28.402 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=3 - 204 null null 2.6426ms
2025-05-16 13:22:28.404 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=3 - application/json 505
2025-05-16 13:22:28.406 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:22:28.407 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 13:22:28.414 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 13:22:28.439 +05:30 [INF] Starting product allocation calculation.
2025-05-16 13:22:28.442 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 13:22:28.445 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 13:22:28.453 +05:30 [INF] Product data loaded successfully.
2025-05-16 13:22:28.455 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 13:22:28.457 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.51, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 3.
2025-05-16 13:22:28.459 +05:30 [INF] Calculated investment amount: 489.11.
2025-05-16 13:22:28.460 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.99, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 3.
2025-05-16 13:22:28.461 +05:30 [INF] Calculated investment amount: 460.
2025-05-16 13:22:28.462 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 13:22:28.463 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.66, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 3.
2025-05-16 13:22:28.464 +05:30 [INF] Calculated investment amount: 186.82.
2025-05-16 13:22:28.464 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.34, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 3.
2025-05-16 13:22:28.465 +05:30 [INF] Calculated investment amount: 171.1.
2025-05-16 13:22:28.466 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 13:22:28.466 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.29, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 3.
2025-05-16 13:22:28.468 +05:30 [INF] Calculated investment amount: 87.07.
2025-05-16 13:22:28.468 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.21, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 3.
2025-05-16 13:22:28.470 +05:30 [INF] Calculated investment amount: 83.42.
2025-05-16 13:22:28.470 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 13:22:28.471 +05:30 [INF] Calculating investment amount with PercentageSplit: 9.57, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 3.
2025-05-16 13:22:28.472 +05:30 [INF] Calculated investment amount: 826.69.
2025-05-16 13:22:28.473 +05:30 [INF] Calculating investment amount with PercentageSplit: 9.18, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 3.
2025-05-16 13:22:28.474 +05:30 [INF] Calculated investment amount: 797.55.
2025-05-16 13:22:28.475 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 13:22:28.476 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.67, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 3.
2025-05-16 13:22:28.477 +05:30 [INF] Calculated investment amount: 301.27.
2025-05-16 13:22:28.478 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.83, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 3.
2025-05-16 13:22:28.478 +05:30 [INF] Calculated investment amount: 311.77.
2025-05-16 13:22:28.479 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 13:22:28.479 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.52, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 3.
2025-05-16 13:22:28.480 +05:30 [INF] Calculated investment amount: 470.09.
2025-05-16 13:22:28.480 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.73, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 3.
2025-05-16 13:22:28.481 +05:30 [INF] Calculated investment amount: 485.21.
2025-05-16 13:22:28.482 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 13:22:28.482 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.86, TargetAmount: 10000, AnnualReturn: 7.8, InvestmentHorizon: 3.
2025-05-16 13:22:28.483 +05:30 [INF] Calculated investment amount: 68.65.
2025-05-16 13:22:28.483 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.7, TargetAmount: 10000, AnnualReturn: 6.3, InvestmentHorizon: 3.
2025-05-16 13:22:28.484 +05:30 [INF] Calculated investment amount: 58.28.
2025-05-16 13:22:28.485 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Energy.
2025-05-16 13:22:28.485 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.29, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 3.
2025-05-16 13:22:28.486 +05:30 [INF] Calculated investment amount: 22.27.
2025-05-16 13:22:28.486 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.33, TargetAmount: 10000, AnnualReturn: 10.3, InvestmentHorizon: 3.
2025-05-16 13:22:28.487 +05:30 [INF] Calculated investment amount: 24.59.
2025-05-16 13:22:28.488 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Agriculture.
2025-05-16 13:22:28.488 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.17, TargetAmount: 10000, AnnualReturn: 8.5, InvestmentHorizon: 3.
2025-05-16 13:22:28.489 +05:30 [INF] Calculated investment amount: 13.31.
2025-05-16 13:22:28.490 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.14, TargetAmount: 10000, AnnualReturn: 7, InvestmentHorizon: 3.
2025-05-16 13:22:28.491 +05:30 [INF] Calculated investment amount: 11.43.
2025-05-16 13:22:28.492 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Liquid Mutual Funds.
2025-05-16 13:22:28.493 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.41, TargetAmount: 10000, AnnualReturn: 5.2, InvestmentHorizon: 3.
2025-05-16 13:22:28.494 +05:30 [INF] Calculated investment amount: 378.78.
2025-05-16 13:22:28.495 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.24, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 3.
2025-05-16 13:22:28.496 +05:30 [INF] Calculated investment amount: 366.27.
2025-05-16 13:22:28.496 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Savings Acc.
2025-05-16 13:22:28.497 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.73, TargetAmount: 10000, AnnualReturn: 3.5, InvestmentHorizon: 3.
2025-05-16 13:22:28.497 +05:30 [INF] Calculated investment amount: 607.01.
2025-05-16 13:22:28.498 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.69, TargetAmount: 10000, AnnualReturn: 4, InvestmentHorizon: 3.
2025-05-16 13:22:28.499 +05:30 [INF] Calculated investment amount: 683.64.
2025-05-16 13:22:28.499 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: T. Bill.
2025-05-16 13:22:28.500 +05:30 [INF] Calculating investment amount with PercentageSplit: 7, TargetAmount: 10000, AnnualReturn: 5.1, InvestmentHorizon: 3.
2025-05-16 13:22:28.500 +05:30 [INF] Calculated investment amount: 602.96.
2025-05-16 13:22:28.501 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.42, TargetAmount: 10000, AnnualReturn: 5.4, InvestmentHorizon: 3.
2025-05-16 13:22:28.502 +05:30 [INF] Calculated investment amount: 633.7.
2025-05-16 13:22:28.502 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: REITs.
2025-05-16 13:22:28.503 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.48, TargetAmount: 10000, AnnualReturn: 8.9, InvestmentHorizon: 3.
2025-05-16 13:22:28.504 +05:30 [INF] Calculated investment amount: 37.17.
2025-05-16 13:22:28.504 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.52, TargetAmount: 10000, AnnualReturn: 9.5, InvestmentHorizon: 3.
2025-05-16 13:22:28.505 +05:30 [INF] Calculated investment amount: 39.61.
2025-05-16 13:22:28.505 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Residential Prop.
2025-05-16 13:22:28.506 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.48, TargetAmount: 10000, AnnualReturn: 6.7, InvestmentHorizon: 3.
2025-05-16 13:22:28.507 +05:30 [INF] Calculated investment amount: 39.51.
2025-05-16 13:22:28.507 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.52, TargetAmount: 10000, AnnualReturn: 7.3, InvestmentHorizon: 3.
2025-05-16 13:22:28.508 +05:30 [INF] Calculated investment amount: 42.09.
2025-05-16 13:22:28.508 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Commercial Prop.
2025-05-16 13:22:28.510 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.26, TargetAmount: 10000, AnnualReturn: 10.2, InvestmentHorizon: 3.
2025-05-16 13:22:28.511 +05:30 [INF] Calculated investment amount: 19.43.
2025-05-16 13:22:28.511 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.25, TargetAmount: 10000, AnnualReturn: 9.8, InvestmentHorizon: 3.
2025-05-16 13:22:28.512 +05:30 [INF] Calculated investment amount: 18.89.
2025-05-16 13:22:28.517 +05:30 [INF] Product allocations saved successfully to ProductAllocations.json
2025-05-16 13:22:28.518 +05:30 [INF] Final Product Allocations: {"equity":{"Large Cap":{"BlueChip Fund ":{"product_name":"BlueChip Fund ","annual_return":10,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Stable returns","Low risk"],"cons":["Lower growth"],"risk_level":"Low","percentage_split":6.51,"InvestmentAmount":489.11},"Index Fund ":{"product_name":"Index Fund ","annual_return":9.2,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Diversified","Low cost"],"cons":["Market dependent"],"risk_level":"Moderate","percentage_split":5.99,"InvestmentAmount":460}},"Mid Cap":{"Mid Cap Growth ":{"product_name":"Mid Cap Growth ","annual_return":12.5,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["High growth potential"],"cons":["Volatile"],"risk_level":"High","percentage_split":2.66,"InvestmentAmount":186.82},"MidCap Blend ":{"product_name":"MidCap Blend ","annual_return":11,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["Balanced approach"],"cons":["Moderate risk"],"risk_level":"Moderate","percentage_split":2.34,"InvestmentAmount":171.1}},"Small Cap":{"SmallCap Aggressive ":{"product_name":"SmallCap Aggressive ","annual_return":14,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Medium","pros":["High return potential"],"cons":["Very volatile"],"risk_level":"High","percentage_split":1.29,"InvestmentAmount":87.07},"Emerging Companies ":{"product_name":"Emerging Companies ","annual_return":13.2,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Low","pros":["Growth stocks"],"cons":["Liquidity risk"],"risk_level":"High","percentage_split":1.21,"InvestmentAmount":83.42}}},"fixedIncome":{"Gov Bonds":{"Government Bond ":{"product_name":"Government Bond ","annual_return":5,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Very safe","Guaranteed return"],"cons":["Low return"],"risk_level":"Low","percentage_split":9.57,"InvestmentAmount":826.69},"Sovereign Bond ":{"product_name":"Sovereign Bond ","annual_return":4.8,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Stable income"],"cons":["Interest rate sensitive"],"risk_level":"Low","percentage_split":9.18,"InvestmentAmount":797.55}},"Corp Bonds":{"Corporate Bond ":{"product_name":"Corporate Bond ","annual_return":6.8,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Better return"],"cons":["Company risk"],"risk_level":"Moderate","percentage_split":3.67,"InvestmentAmount":301.27},"Private Corp Bond ":{"product_name":"Private Corp Bond ","annual_return":7.1,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Good yield"],"cons":["Credit risk"],"risk_level":"High","percentage_split":3.83,"InvestmentAmount":311.77}},"Fixed Dep":{"Fixed Deposit ":{"product_name":"Fixed Deposit ","annual_return":5.5,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Capital safety"],"cons":["Low returns"],"risk_level":"Low","percentage_split":5.52,"InvestmentAmount":470.09},"Bank FD ":{"product_name":"Bank FD ","annual_return":5.7,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Easy access"],"cons":["Taxable"],"risk_level":"Low","percentage_split":5.73,"InvestmentAmount":485.21}}},"commodities":{"Precious Metals":{"Gold ETF":{"product_name":"Gold ETF","annual_return":7.8,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Inflation hedge","Safe haven asset"],"cons":["No income generation","Price volatility"],"risk_level":"Moderate","percentage_split":0.86,"InvestmentAmount":68.65},"Silver Trust":{"product_name":"Silver Trust","annual_return":6.3,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Alternative investment","Deflation hedge"],"cons":["Subject to price swings","Not income-producing"],"risk_level":"Moderate","percentage_split":0.7,"InvestmentAmount":58.28}},"Energy":{"Energy Fund":{"product_name":"Energy Fund","annual_return":9.2,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["High demand","Diversified exposure"],"cons":["Subject to price fluctuations","Geopolitical risks"],"risk_level":"Moderate","percentage_split":0.29,"InvestmentAmount":22.27},"Oil \u0026 Gas ETF":{"product_name":"Oil \u0026 Gas ETF","annual_return":10.3,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["Strong returns","Global demand"],"cons":["Environmental impact","Political risk"],"risk_level":"High","percentage_split":0.33,"InvestmentAmount":24.59}},"Agriculture":{"Agricultural ETF":{"product_name":"Agricultural ETF","annual_return":8.5,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Diversification","Growth potential"],"cons":["Weather dependent","Global supply issues"],"risk_level":"Moderate","percentage_split":0.17,"InvestmentAmount":13.31},"Crop Futures B":{"product_name":"Crop Futures B","annual_return":7,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Alternative to stocks","Hedge against inflation"],"cons":["Market volatility","Weather sensitivity"],"risk_level":"Moderate","percentage_split":0.14,"InvestmentAmount":11.43}}},"cash":{"Liquid Mutual Funds":{"Liquid Fund":{"product_name":"Liquid Fund","annual_return":5.2,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Quick redemption","Low risk"],"cons":["Lower returns","Short-term horizon"],"risk_level":"Low","percentage_split":4.41,"InvestmentAmount":378.78},"Ultra Short Fund":{"product_name":"Ultra Short Fund","annual_return":5,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Better returns than savings","High liquidity"],"cons":["Interest rate risk","Short-term only"],"risk_level":"Low","percentage_split":4.24,"InvestmentAmount":366.27}},"Savings Acc":{"Standard Savings Account":{"product_name":"Standard Savings Account","annual_return":3.5,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Very liquid","Capital safety"],"cons":["Very low returns","Not suitable for growth"],"risk_level":"Low","percentage_split":6.73,"InvestmentAmount":607.01},"High Interest Savings":{"product_name":"High Interest Savings","annual_return":4,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Slightly higher returns","Safe and accessible"],"cons":["Still low returns","Inflation risk"],"risk_level":"Low","percentage_split":7.69,"InvestmentAmount":683.64}},"T. Bill":{"91-Day T-Bill":{"product_name":"91-Day T-Bill","annual_return":5.1,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Government backed","Low risk"],"cons":["Fixed tenure","Lower yield"],"risk_level":"Low","percentage_split":7,"InvestmentAmount":602.96},"182-Day T-Bill":{"product_name":"182-Day T-Bill","annual_return":5.4,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Safe investment","Short maturity"],"cons":["Not liquid before maturity","Limited returns"],"risk_level":"Low","percentage_split":7.42,"InvestmentAmount":633.7}}},"realEstate":{"REITs":{"REITs Trust ":{"product_name":"REITs Trust ","annual_return":8.9,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"Moderate","pros":["Stable returns","Diversified portfolio"],"cons":["Sensitive to interest rates","Limited growth"],"risk_level":"Moderate","percentage_split":0.48,"InvestmentAmount":37.17},"Vanguad Real Estate":{"product_name":"Vanguad Real Estate","annual_return":9.5,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"High","pros":["Tax efficiency","Regular income"],"cons":["Market volatility","Fees"],"risk_level":"High","percentage_split":0.52,"InvestmentAmount":39.61}},"Residential Prop":{"Residential Scheme ":{"product_name":"Residential Scheme ","annual_return":6.7,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Low","pros":["Stable income","Low volatility"],"cons":["Low liquidity","Maintenance costs"],"risk_level":"Low","percentage_split":0.48,"InvestmentAmount":39.51},"Housing Fund":{"product_name":"Housing Fund","annual_return":7.3,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Moderate","pros":["Tax benefits","Long-term growth"],"cons":["Location dependent","Slow ROI"],"risk_level":"Moderate","percentage_split":0.52,"InvestmentAmount":42.09}},"Commercial Prop":{"Commercial Plaza":{"product_name":"Commercial Plaza","annual_return":10.2,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Low","pros":["High rental yields","Strong appreciation"],"cons":["High initial cost","Vacancy risk"],"risk_level":"High","percentage_split":0.26,"InvestmentAmount":19.43},"Office Fund":{"product_name":"Office Fund","annual_return":9.8,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Moderate","pros":["Steady returns","Long leases"],"cons":["Tenant turnover","High maintenance"],"risk_level":"High","percentage_split":0.25,"InvestmentAmount":18.89}}}}
2025-05-16 13:22:28.520 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:22:28.522 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 107.235ms
2025-05-16 13:22:28.523 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 13:22:28.525 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=3 - 200 null application/json; charset=utf-8 120.5864ms
2025-05-16 13:22:28.534 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:22:28.535 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:22:28.536 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:22:28.538 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:22:28.538 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 4.4149ms
2025-05-16 13:22:28.539 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 4.1184ms
2025-05-16 13:22:28.540 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:22:28.543 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:22:28.549 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:22:28.549 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:22:28.550 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:22:28.551 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:22:28.555 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 13:22:28.555 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 13:22:28.559 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 13:22:28.560 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 13:22:28.561 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 13:22:28.562 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:22:28.563 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 13:22:28.565 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 7.6537ms
2025-05-16 13:22:28.565 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:22:28.566 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 25.4897ms
2025-05-16 13:22:28.567 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:22:28.573 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 14.6056ms
2025-05-16 13:22:28.574 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:22:28.575 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 31.9509ms
2025-05-16 13:23:50.427 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:23:50.427 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:23:50.432 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:23:50.433 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:23:50.433 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 6.0824ms
2025-05-16 13:23:50.433 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 6.0127ms
2025-05-16 13:23:50.586 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:23:50.586 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:23:50.610 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:23:50.619 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:23:50.619 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:23:50.623 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 13:23:50.624 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:23:50.627 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 13:23:50.628 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 13:23:50.630 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 13:23:50.630 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 13:23:50.632 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:23:50.632 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 13:23:50.633 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 7.1397ms
2025-05-16 13:23:50.634 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:23:50.634 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:23:50.636 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 7.0567ms
2025-05-16 13:23:50.636 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 50.0995ms
2025-05-16 13:23:50.637 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:23:50.643 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 57.1164ms
2025-05-16 13:24:50.211 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:24:50.211 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:24:50.213 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:24:50.214 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:24:50.215 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 4.0386ms
2025-05-16 13:24:50.215 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 4.5709ms
2025-05-16 13:24:50.217 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:24:50.219 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:24:50.222 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:24:50.223 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:24:50.223 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:24:50.224 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:24:50.224 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 13:24:50.225 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 13:24:50.226 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 13:24:50.227 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 13:24:50.229 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 13:24:50.230 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 13:24:50.232 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:24:50.235 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 9.3768ms
2025-05-16 13:24:50.233 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:24:50.238 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:24:50.240 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 23.3021ms
2025-05-16 13:24:50.239 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 12.451ms
2025-05-16 13:24:50.249 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:24:50.250 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 30.7019ms
2025-05-16 13:24:56.368 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:24:56.368 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:24:56.372 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:24:56.377 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:24:56.378 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 10.4004ms
2025-05-16 13:24:56.380 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 11.519ms
2025-05-16 13:24:56.383 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:24:56.386 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:24:56.389 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:24:56.391 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:24:56.392 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:24:56.398 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 13:24:56.399 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 13:24:56.391 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:24:56.400 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 13:24:56.401 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 13:24:56.402 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:24:56.404 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 13:24:56.408 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 9.0147ms
2025-05-16 13:24:56.409 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 13:24:56.410 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:24:56.411 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:24:56.413 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 26.4197ms
2025-05-16 13:24:56.415 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 10.9537ms
2025-05-16 13:24:56.420 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:24:56.421 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 37.8791ms
2025-05-16 13:25:00.449 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:25:00.449 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:25:00.452 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:25:00.452 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:25:00.453 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:25:00.453 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:25:00.454 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 13:25:00.454 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 13:25:00.455 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 13:25:00.456 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 13:25:00.457 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 13:25:00.457 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 13:25:00.458 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:25:00.458 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:25:00.459 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 3.4965ms
2025-05-16 13:25:00.459 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 3.1896ms
2025-05-16 13:25:00.460 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:25:00.460 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:25:00.461 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 11.3115ms
2025-05-16 13:25:00.461 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 11.7615ms
2025-05-16 13:25:19.417 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:25:19.417 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:25:19.421 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:25:19.424 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:25:19.424 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 7.7681ms
2025-05-16 13:25:19.425 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 8.2016ms
2025-05-16 13:25:19.427 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:25:19.429 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:25:19.431 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:25:19.432 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:25:19.433 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:25:19.433 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:25:19.434 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 13:25:19.435 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 13:25:19.437 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 13:25:19.438 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 13:25:19.439 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 13:25:19.440 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 13:25:19.440 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:25:19.441 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:25:19.442 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 5.4012ms
2025-05-16 13:25:19.443 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 5.6171ms
2025-05-16 13:25:19.444 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:25:19.445 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:25:19.446 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 18.4011ms
2025-05-16 13:25:19.446 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 17.1385ms
2025-05-16 13:26:16.350 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:26:16.350 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:26:16.355 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:26:16.356 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:26:16.357 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 6.5512ms
2025-05-16 13:26:16.358 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 7.2433ms
2025-05-16 13:26:16.361 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:26:16.365 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:26:16.368 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:26:16.374 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:26:16.374 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:26:16.376 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 13:26:16.377 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:26:16.378 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 13:26:16.379 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 13:26:16.383 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 13:26:16.384 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 13:26:16.385 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:26:16.389 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 13:26:16.390 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 11.731ms
2025-05-16 13:26:16.391 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:26:16.392 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:26:16.394 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 9.4739ms
2025-05-16 13:26:16.394 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 33.0825ms
2025-05-16 13:26:16.395 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:26:16.403 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 37.8603ms
2025-05-16 13:26:28.028 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:26:28.028 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:26:28.031 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:26:28.033 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:26:28.033 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 5.3553ms
2025-05-16 13:26:28.034 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 5.6693ms
2025-05-16 13:26:28.036 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:26:28.037 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:26:28.039 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:26:28.040 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:26:28.041 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:26:28.041 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:26:28.042 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 13:26:28.046 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 13:26:28.044 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 13:26:28.048 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 13:26:28.049 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 13:26:28.049 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:26:28.050 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 13:26:28.051 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 5.3894ms
2025-05-16 13:26:28.052 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:26:28.053 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:26:28.054 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 5.0164ms
2025-05-16 13:26:28.054 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 18.646ms
2025-05-16 13:26:28.056 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:26:28.061 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 23.7352ms
2025-05-16 13:27:57.374 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:27:57.374 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:27:57.378 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:27:57.380 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:27:57.380 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 5.7011ms
2025-05-16 13:27:57.381 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 6.5613ms
2025-05-16 13:27:57.386 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:27:57.388 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:27:57.390 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:27:57.392 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:27:57.392 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:27:57.393 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:27:57.394 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 13:27:57.395 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 13:27:57.396 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 13:27:57.397 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 13:27:57.399 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 13:27:57.401 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 13:27:57.402 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:27:57.402 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:27:57.403 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 7.088ms
2025-05-16 13:27:57.404 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 6.5436ms
2025-05-16 13:27:57.405 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:27:57.405 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:27:57.406 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 20.5341ms
2025-05-16 13:27:57.407 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 19.1328ms
2025-05-16 13:28:57.350 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:28:57.350 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:28:57.352 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:28:57.354 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:28:57.355 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 5.5286ms
2025-05-16 13:28:57.355 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 5.4148ms
2025-05-16 13:28:57.359 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:28:57.362 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:28:57.364 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:28:57.365 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:28:57.365 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:28:57.366 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:28:57.367 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 13:28:57.367 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 13:28:57.369 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 13:28:57.370 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 13:28:57.372 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 13:28:57.372 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 13:28:57.372 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:28:57.373 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:28:57.374 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 4.7865ms
2025-05-16 13:28:57.375 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 4.579ms
2025-05-16 13:28:57.375 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:28:57.376 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:28:57.376 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 17.6892ms
2025-05-16 13:28:57.377 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 14.6241ms
2025-05-16 13:29:03.241 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:29:03.241 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:29:03.243 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:29:03.244 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:29:03.245 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 3.8228ms
2025-05-16 13:29:03.245 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 3.972ms
2025-05-16 13:29:03.247 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:29:03.249 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:29:03.251 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:29:03.252 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:29:03.252 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:29:03.252 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:29:03.253 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 13:29:03.255 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 13:29:03.259 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 13:29:03.261 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 13:29:03.261 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 13:29:03.262 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 13:29:03.262 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:29:03.263 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:29:03.264 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 5.2767ms
2025-05-16 13:29:03.265 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 4.5167ms
2025-05-16 13:29:03.266 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:29:03.267 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:29:03.268 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 20.7508ms
2025-05-16 13:29:03.269 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 20.2831ms
2025-05-16 13:29:13.886 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:29:13.886 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:29:13.888 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:29:13.890 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 3.8629ms
2025-05-16 13:29:13.890 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:29:13.891 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:29:13.892 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 5.6081ms
2025-05-16 13:29:13.893 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:29:13.894 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:29:13.895 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:29:13.896 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:29:13.896 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 13:29:13.897 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:29:13.898 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 13:29:13.899 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 13:29:13.900 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 13:29:13.901 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 13:29:13.902 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:29:13.902 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 13:29:13.903 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 4.8015ms
2025-05-16 13:29:13.903 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:29:13.904 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:29:13.905 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 4.1409ms
2025-05-16 13:29:13.905 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 14.0843ms
2025-05-16 13:29:13.906 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:29:13.909 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 14.8662ms
2025-05-16 13:29:29.453 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:29:29.453 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:29:29.458 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:29:29.462 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:29:29.464 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 11.3049ms
2025-05-16 13:29:29.465 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 11.9463ms
2025-05-16 13:29:29.469 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:29:29.471 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:29:29.473 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:29:29.474 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:29:29.475 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:29:29.475 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:29:29.476 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 13:29:29.477 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 13:29:29.478 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 13:29:29.479 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 13:29:29.480 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 13:29:29.480 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 13:29:29.481 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:29:29.481 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:29:29.482 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 4.2211ms
2025-05-16 13:29:29.483 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 4.0586ms
2025-05-16 13:29:29.483 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:29:29.485 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:29:29.486 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 17.0462ms
2025-05-16 13:29:29.486 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 15.6354ms
2025-05-16 13:29:32.872 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:29:32.872 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:29:32.875 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:29:32.876 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:29:32.876 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:29:32.877 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:29:32.877 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 13:29:32.878 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 13:29:32.879 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 13:29:32.880 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 13:29:32.881 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 13:29:32.881 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 13:29:32.882 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:29:32.882 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:29:32.883 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 3.5769ms
2025-05-16 13:29:32.884 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 3.4133ms
2025-05-16 13:29:32.884 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:29:32.885 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:29:32.885 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 13.3995ms
2025-05-16 13:29:32.886 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 13.8208ms
2025-05-16 13:30:15.346 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:30:15.346 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:30:15.349 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:30:15.351 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:30:15.351 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 5.5489ms
2025-05-16 13:30:15.352 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 5.5654ms
2025-05-16 13:30:15.358 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:30:15.360 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:30:15.362 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:30:15.363 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:30:15.363 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:30:15.364 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:30:15.365 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 13:30:15.365 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 13:30:15.369 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 13:30:15.368 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 13:30:15.376 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 13:30:15.380 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 13:30:15.381 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:30:15.381 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:30:15.384 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 14.3353ms
2025-05-16 13:30:15.384 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 16.4858ms
2025-05-16 13:30:15.385 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:30:15.389 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:30:15.390 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 30.0538ms
2025-05-16 13:30:15.393 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 34.5804ms
2025-05-16 13:31:22.289 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:31:22.289 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:31:22.292 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:31:22.293 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:31:22.293 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 3.9572ms
2025-05-16 13:31:22.293 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 4.2995ms
2025-05-16 13:31:22.296 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:31:22.297 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:31:22.299 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:31:22.302 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:31:22.302 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:31:22.303 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 13:31:22.303 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:31:22.305 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 13:31:22.305 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 13:31:22.306 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 13:31:22.307 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 13:31:22.308 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:31:22.308 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 13:31:22.309 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 4.4076ms
2025-05-16 13:31:22.310 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:31:22.310 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:31:22.311 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 3.7917ms
2025-05-16 13:31:22.311 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 15.7899ms
2025-05-16 13:31:22.312 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:31:22.314 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 16.9467ms
2025-05-16 13:31:31.747 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-16 13:31:31.749 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:31:31.750 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 2.9874ms
2025-05-16 13:31:31.752 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 64
2025-05-16 13:31:31.755 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:31:31.756 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-16 13:31:31.756 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-16 13:31:31.858 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType1`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:31:31.861 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 103.7329ms
2025-05-16 13:31:31.862 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-16 13:31:31.863 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 200 null application/json; charset=utf-8 110.8969ms
2025-05-16 13:31:51.040 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-16 13:31:51.043 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:31:51.045 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 4.9139ms
2025-05-16 13:31:51.047 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 104
2025-05-16 13:31:51.054 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:31:51.055 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 13:31:51.056 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 13:31:51.057 +05:30 [INF] Starting allocation calculation...
2025-05-16 13:31:51.060 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 13:31:51.061 +05:30 [INF] Looking up base allocation for key: Low+Short
2025-05-16 13:31:51.062 +05:30 [INF] Base allocation found: {"equity":10,"fixedIncome":40,"commodities":5,"cash":40,"realEstate":5}
2025-05-16 13:31:51.063 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 13:31:51.063 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 13:31:51.064 +05:30 [INF] Looking up goal tuning for goal: Wealth Accumulation
2025-05-16 13:31:51.064 +05:30 [INF] Goal tuning found: {"equity_priority":true,"equity_boost":2,"equity_threshold":40}
2025-05-16 13:31:51.066 +05:30 [INF] Sub-allocations for equity: {"Large Cap":18.75,"Mid Cap":7.5,"Small Cap":3.75}
2025-05-16 13:31:51.068 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":16.25,"Corp Bonds":6.5,"Fixed Dep":9.75}
2025-05-16 13:31:51.069 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":1.56,"Energy":0.62,"Agriculture":0.31}
2025-05-16 13:31:51.070 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":7.5,"Savings Acc":12.5,"T. Bill":12.5}
2025-05-16 13:31:51.071 +05:30 [INF] Sub-allocations for realEstate: {"REITs":1,"Residential Prop":1,"Commercial Prop":0.5}
2025-05-16 13:31:51.072 +05:30 [INF] Added sub-assets for equity: {"Large Cap":18.75,"Mid Cap":7.5,"Small Cap":3.75}
2025-05-16 13:31:51.073 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":16.25,"Corp Bonds":6.5,"Fixed Dep":9.75}
2025-05-16 13:31:51.073 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":1.56,"Energy":0.62,"Agriculture":0.31}
2025-05-16 13:31:51.074 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":7.5,"Savings Acc":12.5,"T. Bill":12.5}
2025-05-16 13:31:51.075 +05:30 [INF] Added sub-assets for realEstate: {"REITs":1,"Residential Prop":1,"Commercial Prop":0.5}
2025-05-16 13:31:51.076 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":30,"subAssets":{"Large Cap":18.75,"Mid Cap":7.5,"Small Cap":3.75}},"fixedIncome":{"percentage":32.5,"subAssets":{"Gov Bonds":16.25,"Corp Bonds":6.5,"Fixed Dep":9.75}},"commodities":{"percentage":2.5,"subAssets":{"Precious Metals":1.56,"Energy":0.62,"Agriculture":0.31}},"cash":{"percentage":32.5,"subAssets":{"Liquid Mutual Funds":7.5,"Savings Acc":12.5,"T. Bill":12.5}},"realEstate":{"percentage":2.5,"subAssets":{"REITs":1,"Residential Prop":1,"Commercial Prop":0.5}}}
2025-05-16 13:31:51.086 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 13:31:51.087 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":30,"subAssets":{"Large Cap":18.75,"Mid Cap":7.5,"Small Cap":3.75}},"fixedIncome":{"percentage":32.5,"subAssets":{"Gov Bonds":16.25,"Corp Bonds":6.5,"Fixed Dep":9.75}},"commodities":{"percentage":2.5,"subAssets":{"Precious Metals":1.56,"Energy":0.62,"Agriculture":0.31}},"cash":{"percentage":32.5,"subAssets":{"Liquid Mutual Funds":7.5,"Savings Acc":12.5,"T. Bill":12.5}},"realEstate":{"percentage":2.5,"subAssets":{"REITs":1,"Residential Prop":1,"Commercial Prop":0.5}}}
2025-05-16 13:31:51.087 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 13:31:51.088 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 31.4944ms
2025-05-16 13:31:51.089 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 13:31:51.090 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 42.7233ms
2025-05-16 13:31:51.092 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=3 - null null
2025-05-16 13:31:51.094 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:31:51.094 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=3 - 204 null null 1.5572ms
2025-05-16 13:31:51.096 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=3 - application/json 505
2025-05-16 13:31:51.097 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:31:51.097 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 13:31:51.098 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 13:31:51.101 +05:30 [INF] Starting product allocation calculation.
2025-05-16 13:31:51.101 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 13:31:51.103 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 13:31:51.106 +05:30 [INF] Product data loaded successfully.
2025-05-16 13:31:51.106 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 13:31:51.107 +05:30 [INF] Calculating investment amount with PercentageSplit: 9.77, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 3.
2025-05-16 13:31:51.108 +05:30 [INF] Calculated investment amount: 734.03.
2025-05-16 13:31:51.109 +05:30 [INF] Calculating investment amount with PercentageSplit: 8.98, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 3.
2025-05-16 13:31:51.110 +05:30 [INF] Calculated investment amount: 689.62.
2025-05-16 13:31:51.111 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 13:31:51.112 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.99, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 3.
2025-05-16 13:31:51.113 +05:30 [INF] Calculated investment amount: 280.23.
2025-05-16 13:31:51.114 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.51, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 3.
2025-05-16 13:31:51.115 +05:30 [INF] Calculated investment amount: 256.65.
2025-05-16 13:31:51.116 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 13:31:51.117 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.93, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 3.
2025-05-16 13:31:51.118 +05:30 [INF] Calculated investment amount: 130.27.
2025-05-16 13:31:51.119 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.82, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 3.
2025-05-16 13:31:51.120 +05:30 [INF] Calculated investment amount: 125.47.
2025-05-16 13:31:51.121 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 13:31:51.122 +05:30 [INF] Calculating investment amount with PercentageSplit: 8.29, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 3.
2025-05-16 13:31:51.123 +05:30 [INF] Calculated investment amount: 716.12.
2025-05-16 13:31:51.123 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.96, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 3.
2025-05-16 13:31:51.124 +05:30 [INF] Calculated investment amount: 691.56.
2025-05-16 13:31:51.125 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 13:31:51.126 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.18, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 3.
2025-05-16 13:31:51.128 +05:30 [INF] Calculated investment amount: 261.04.
2025-05-16 13:31:51.128 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.32, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 3.
2025-05-16 13:31:51.130 +05:30 [INF] Calculated investment amount: 270.25.
2025-05-16 13:31:51.130 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 13:31:51.131 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.79, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 3.
2025-05-16 13:31:51.132 +05:30 [INF] Calculated investment amount: 407.92.
2025-05-16 13:31:51.132 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.96, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 3.
2025-05-16 13:31:51.133 +05:30 [INF] Calculated investment amount: 420.01.
2025-05-16 13:31:51.134 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 13:31:51.135 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.86, TargetAmount: 10000, AnnualReturn: 7.8, InvestmentHorizon: 3.
2025-05-16 13:31:51.136 +05:30 [INF] Calculated investment amount: 68.65.
2025-05-16 13:31:51.137 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.7, TargetAmount: 10000, AnnualReturn: 6.3, InvestmentHorizon: 3.
2025-05-16 13:31:51.138 +05:30 [INF] Calculated investment amount: 58.28.
2025-05-16 13:31:51.138 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Energy.
2025-05-16 13:31:51.138 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.29, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 3.
2025-05-16 13:31:51.139 +05:30 [INF] Calculated investment amount: 22.27.
2025-05-16 13:31:51.140 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.33, TargetAmount: 10000, AnnualReturn: 10.3, InvestmentHorizon: 3.
2025-05-16 13:31:51.140 +05:30 [INF] Calculated investment amount: 24.59.
2025-05-16 13:31:51.141 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Agriculture.
2025-05-16 13:31:51.142 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.17, TargetAmount: 10000, AnnualReturn: 8.5, InvestmentHorizon: 3.
2025-05-16 13:31:51.143 +05:30 [INF] Calculated investment amount: 13.31.
2025-05-16 13:31:51.143 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.14, TargetAmount: 10000, AnnualReturn: 7, InvestmentHorizon: 3.
2025-05-16 13:31:51.144 +05:30 [INF] Calculated investment amount: 11.43.
2025-05-16 13:31:51.145 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Liquid Mutual Funds.
2025-05-16 13:31:51.146 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.82, TargetAmount: 10000, AnnualReturn: 5.2, InvestmentHorizon: 3.
2025-05-16 13:31:51.147 +05:30 [INF] Calculated investment amount: 328.11.
2025-05-16 13:31:51.148 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.68, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 3.
2025-05-16 13:31:51.149 +05:30 [INF] Calculated investment amount: 317.89.
2025-05-16 13:31:51.150 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Savings Acc.
2025-05-16 13:31:51.151 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.83, TargetAmount: 10000, AnnualReturn: 3.5, InvestmentHorizon: 3.
2025-05-16 13:31:51.152 +05:30 [INF] Calculated investment amount: 525.83.
2025-05-16 13:31:51.152 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.67, TargetAmount: 10000, AnnualReturn: 4, InvestmentHorizon: 3.
2025-05-16 13:31:51.153 +05:30 [INF] Calculated investment amount: 592.96.
2025-05-16 13:31:51.154 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: T. Bill.
2025-05-16 13:31:51.155 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.07, TargetAmount: 10000, AnnualReturn: 5.1, InvestmentHorizon: 3.
2025-05-16 13:31:51.156 +05:30 [INF] Calculated investment amount: 522.85.
2025-05-16 13:31:51.157 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.43, TargetAmount: 10000, AnnualReturn: 5.4, InvestmentHorizon: 3.
2025-05-16 13:31:51.158 +05:30 [INF] Calculated investment amount: 549.15.
2025-05-16 13:31:51.159 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: REITs.
2025-05-16 13:31:51.159 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.48, TargetAmount: 10000, AnnualReturn: 8.9, InvestmentHorizon: 3.
2025-05-16 13:31:51.160 +05:30 [INF] Calculated investment amount: 37.17.
2025-05-16 13:31:51.161 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.52, TargetAmount: 10000, AnnualReturn: 9.5, InvestmentHorizon: 3.
2025-05-16 13:31:51.162 +05:30 [INF] Calculated investment amount: 39.61.
2025-05-16 13:31:51.162 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Residential Prop.
2025-05-16 13:31:51.163 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.48, TargetAmount: 10000, AnnualReturn: 6.7, InvestmentHorizon: 3.
2025-05-16 13:31:51.164 +05:30 [INF] Calculated investment amount: 39.51.
2025-05-16 13:31:51.165 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.52, TargetAmount: 10000, AnnualReturn: 7.3, InvestmentHorizon: 3.
2025-05-16 13:31:51.166 +05:30 [INF] Calculated investment amount: 42.09.
2025-05-16 13:31:51.168 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Commercial Prop.
2025-05-16 13:31:51.169 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.26, TargetAmount: 10000, AnnualReturn: 10.2, InvestmentHorizon: 3.
2025-05-16 13:31:51.170 +05:30 [INF] Calculated investment amount: 19.43.
2025-05-16 13:31:51.171 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.25, TargetAmount: 10000, AnnualReturn: 9.8, InvestmentHorizon: 3.
2025-05-16 13:31:51.172 +05:30 [INF] Calculated investment amount: 18.89.
2025-05-16 13:31:51.175 +05:30 [INF] Product allocations saved successfully to ProductAllocations.json
2025-05-16 13:31:51.176 +05:30 [INF] Final Product Allocations: {"equity":{"Large Cap":{"BlueChip Fund ":{"product_name":"BlueChip Fund ","annual_return":10,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Stable returns","Low risk"],"cons":["Lower growth"],"risk_level":"Low","percentage_split":9.77,"InvestmentAmount":734.03},"Index Fund ":{"product_name":"Index Fund ","annual_return":9.2,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Diversified","Low cost"],"cons":["Market dependent"],"risk_level":"Moderate","percentage_split":8.98,"InvestmentAmount":689.62}},"Mid Cap":{"Mid Cap Growth ":{"product_name":"Mid Cap Growth ","annual_return":12.5,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["High growth potential"],"cons":["Volatile"],"risk_level":"High","percentage_split":3.99,"InvestmentAmount":280.23},"MidCap Blend ":{"product_name":"MidCap Blend ","annual_return":11,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["Balanced approach"],"cons":["Moderate risk"],"risk_level":"Moderate","percentage_split":3.51,"InvestmentAmount":256.65}},"Small Cap":{"SmallCap Aggressive ":{"product_name":"SmallCap Aggressive ","annual_return":14,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Medium","pros":["High return potential"],"cons":["Very volatile"],"risk_level":"High","percentage_split":1.93,"InvestmentAmount":130.27},"Emerging Companies ":{"product_name":"Emerging Companies ","annual_return":13.2,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Low","pros":["Growth stocks"],"cons":["Liquidity risk"],"risk_level":"High","percentage_split":1.82,"InvestmentAmount":125.47}}},"fixedIncome":{"Gov Bonds":{"Government Bond ":{"product_name":"Government Bond ","annual_return":5,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Very safe","Guaranteed return"],"cons":["Low return"],"risk_level":"Low","percentage_split":8.29,"InvestmentAmount":716.12},"Sovereign Bond ":{"product_name":"Sovereign Bond ","annual_return":4.8,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Stable income"],"cons":["Interest rate sensitive"],"risk_level":"Low","percentage_split":7.96,"InvestmentAmount":691.56}},"Corp Bonds":{"Corporate Bond ":{"product_name":"Corporate Bond ","annual_return":6.8,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Better return"],"cons":["Company risk"],"risk_level":"Moderate","percentage_split":3.18,"InvestmentAmount":261.04},"Private Corp Bond ":{"product_name":"Private Corp Bond ","annual_return":7.1,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Good yield"],"cons":["Credit risk"],"risk_level":"High","percentage_split":3.32,"InvestmentAmount":270.25}},"Fixed Dep":{"Fixed Deposit ":{"product_name":"Fixed Deposit ","annual_return":5.5,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Capital safety"],"cons":["Low returns"],"risk_level":"Low","percentage_split":4.79,"InvestmentAmount":407.92},"Bank FD ":{"product_name":"Bank FD ","annual_return":5.7,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Easy access"],"cons":["Taxable"],"risk_level":"Low","percentage_split":4.96,"InvestmentAmount":420.01}}},"commodities":{"Precious Metals":{"Gold ETF":{"product_name":"Gold ETF","annual_return":7.8,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Inflation hedge","Safe haven asset"],"cons":["No income generation","Price volatility"],"risk_level":"Moderate","percentage_split":0.86,"InvestmentAmount":68.65},"Silver Trust":{"product_name":"Silver Trust","annual_return":6.3,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Alternative investment","Deflation hedge"],"cons":["Subject to price swings","Not income-producing"],"risk_level":"Moderate","percentage_split":0.7,"InvestmentAmount":58.28}},"Energy":{"Energy Fund":{"product_name":"Energy Fund","annual_return":9.2,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["High demand","Diversified exposure"],"cons":["Subject to price fluctuations","Geopolitical risks"],"risk_level":"Moderate","percentage_split":0.29,"InvestmentAmount":22.27},"Oil \u0026 Gas ETF":{"product_name":"Oil \u0026 Gas ETF","annual_return":10.3,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["Strong returns","Global demand"],"cons":["Environmental impact","Political risk"],"risk_level":"High","percentage_split":0.33,"InvestmentAmount":24.59}},"Agriculture":{"Agricultural ETF":{"product_name":"Agricultural ETF","annual_return":8.5,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Diversification","Growth potential"],"cons":["Weather dependent","Global supply issues"],"risk_level":"Moderate","percentage_split":0.17,"InvestmentAmount":13.31},"Crop Futures B":{"product_name":"Crop Futures B","annual_return":7,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Alternative to stocks","Hedge against inflation"],"cons":["Market volatility","Weather sensitivity"],"risk_level":"Moderate","percentage_split":0.14,"InvestmentAmount":11.43}}},"cash":{"Liquid Mutual Funds":{"Liquid Fund":{"product_name":"Liquid Fund","annual_return":5.2,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Quick redemption","Low risk"],"cons":["Lower returns","Short-term horizon"],"risk_level":"Low","percentage_split":3.82,"InvestmentAmount":328.11},"Ultra Short Fund":{"product_name":"Ultra Short Fund","annual_return":5,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Better returns than savings","High liquidity"],"cons":["Interest rate risk","Short-term only"],"risk_level":"Low","percentage_split":3.68,"InvestmentAmount":317.89}},"Savings Acc":{"Standard Savings Account":{"product_name":"Standard Savings Account","annual_return":3.5,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Very liquid","Capital safety"],"cons":["Very low returns","Not suitable for growth"],"risk_level":"Low","percentage_split":5.83,"InvestmentAmount":525.83},"High Interest Savings":{"product_name":"High Interest Savings","annual_return":4,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Slightly higher returns","Safe and accessible"],"cons":["Still low returns","Inflation risk"],"risk_level":"Low","percentage_split":6.67,"InvestmentAmount":592.96}},"T. Bill":{"91-Day T-Bill":{"product_name":"91-Day T-Bill","annual_return":5.1,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Government backed","Low risk"],"cons":["Fixed tenure","Lower yield"],"risk_level":"Low","percentage_split":6.07,"InvestmentAmount":522.85},"182-Day T-Bill":{"product_name":"182-Day T-Bill","annual_return":5.4,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Safe investment","Short maturity"],"cons":["Not liquid before maturity","Limited returns"],"risk_level":"Low","percentage_split":6.43,"InvestmentAmount":549.15}}},"realEstate":{"REITs":{"REITs Trust ":{"product_name":"REITs Trust ","annual_return":8.9,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"Moderate","pros":["Stable returns","Diversified portfolio"],"cons":["Sensitive to interest rates","Limited growth"],"risk_level":"Moderate","percentage_split":0.48,"InvestmentAmount":37.17},"Vanguad Real Estate":{"product_name":"Vanguad Real Estate","annual_return":9.5,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"High","pros":["Tax efficiency","Regular income"],"cons":["Market volatility","Fees"],"risk_level":"High","percentage_split":0.52,"InvestmentAmount":39.61}},"Residential Prop":{"Residential Scheme ":{"product_name":"Residential Scheme ","annual_return":6.7,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Low","pros":["Stable income","Low volatility"],"cons":["Low liquidity","Maintenance costs"],"risk_level":"Low","percentage_split":0.48,"InvestmentAmount":39.51},"Housing Fund":{"product_name":"Housing Fund","annual_return":7.3,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Moderate","pros":["Tax benefits","Long-term growth"],"cons":["Location dependent","Slow ROI"],"risk_level":"Moderate","percentage_split":0.52,"InvestmentAmount":42.09}},"Commercial Prop":{"Commercial Plaza":{"product_name":"Commercial Plaza","annual_return":10.2,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Low","pros":["High rental yields","Strong appreciation"],"cons":["High initial cost","Vacancy risk"],"risk_level":"High","percentage_split":0.26,"InvestmentAmount":19.43},"Office Fund":{"product_name":"Office Fund","annual_return":9.8,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Moderate","pros":["Steady returns","Long leases"],"cons":["Tenant turnover","High maintenance"],"risk_level":"High","percentage_split":0.25,"InvestmentAmount":18.89}}}}
2025-05-16 13:31:51.178 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:31:51.178 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 79.3948ms
2025-05-16 13:31:51.179 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 13:31:51.180 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=3 - 200 null application/json; charset=utf-8 83.9201ms
2025-05-16 13:31:51.188 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:31:51.188 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:31:51.190 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:31:51.191 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:31:51.191 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 3.2541ms
2025-05-16 13:31:51.192 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 3.4592ms
2025-05-16 13:31:51.194 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:31:51.196 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:31:51.198 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:31:51.199 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:31:51.200 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:31:51.200 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:31:51.201 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 13:31:51.201 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 13:31:51.203 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 13:31:51.204 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 13:31:51.204 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 13:31:51.205 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 13:31:51.205 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:31:51.206 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:31:51.206 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 3.8856ms
2025-05-16 13:31:51.207 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 3.8795ms
2025-05-16 13:31:51.208 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:31:51.209 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:31:51.209 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 15.814ms
2025-05-16 13:31:51.210 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 14.2213ms
2025-05-16 13:33:19.526 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:33:19.526 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:33:19.529 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:33:19.530 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:33:19.531 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 5.4574ms
2025-05-16 13:33:19.530 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 4.7034ms
2025-05-16 13:33:19.534 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:33:19.536 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:33:19.538 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:33:19.539 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:33:19.540 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:33:19.540 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:33:19.540 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 13:33:19.541 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 13:33:19.542 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 13:33:19.543 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 13:33:19.543 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 13:33:19.544 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 13:33:19.545 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:33:19.545 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:33:19.546 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 4.1414ms
2025-05-16 13:33:19.548 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:33:19.547 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 4.5176ms
2025-05-16 13:33:19.549 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 14.7488ms
2025-05-16 13:33:19.551 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:33:19.553 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 17.0212ms
2025-05-16 13:33:29.860 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:33:29.861 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:33:29.863 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:33:29.865 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:33:29.865 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 4.7924ms
2025-05-16 13:33:29.865 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 4.6342ms
2025-05-16 13:33:29.867 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:33:29.869 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:33:29.870 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:33:29.871 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:33:29.871 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:33:29.872 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:33:29.872 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 13:33:29.875 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 13:33:29.878 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 13:33:29.885 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 13:33:29.887 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 13:33:29.889 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:33:29.889 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 13:33:29.891 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 13.3562ms
2025-05-16 13:33:29.891 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:33:29.892 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:33:29.893 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 7.5741ms
2025-05-16 13:33:29.893 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 26.243ms
2025-05-16 13:33:29.898 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:33:29.901 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 32.6438ms
2025-05-16 13:36:23.650 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:36:23.650 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:36:23.652 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:36:23.654 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:36:23.654 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 4.2531ms
2025-05-16 13:36:23.655 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 4.7683ms
2025-05-16 13:36:23.659 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:36:23.662 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:36:23.663 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:36:23.666 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:36:23.666 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:36:23.666 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:36:23.667 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 13:36:23.668 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 13:36:23.672 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 13:36:23.671 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 13:36:23.674 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 13:36:23.675 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 13:36:23.675 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:36:23.675 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:36:23.676 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 4.4593ms
2025-05-16 13:36:23.677 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 5.8901ms
2025-05-16 13:36:23.677 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:36:23.678 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:36:23.679 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 16.9987ms
2025-05-16 13:36:23.680 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 21.1319ms
2025-05-16 13:36:26.408 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:36:26.409 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:36:26.413 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:36:26.415 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:36:26.415 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:36:26.416 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:36:26.417 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 13:36:26.419 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 13:36:26.421 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 13:36:26.421 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 13:36:26.423 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 13:36:26.423 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 13:36:26.424 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:36:26.424 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:36:26.426 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 5.7821ms
2025-05-16 13:36:26.426 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 4.8792ms
2025-05-16 13:36:26.427 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:36:26.428 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:36:26.429 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 20.5006ms
2025-05-16 13:36:26.429 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 20.5325ms
2025-05-16 13:36:38.366 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:36:38.367 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:36:38.369 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:36:38.371 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:36:38.372 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 6.0548ms
2025-05-16 13:36:38.372 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 5.5339ms
2025-05-16 13:36:38.375 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:36:38.378 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:36:38.379 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:36:38.382 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:36:38.382 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:36:38.383 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:36:38.384 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 13:36:38.384 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 13:36:38.385 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 13:36:38.386 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 13:36:38.387 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 13:36:38.388 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 13:36:38.388 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:36:38.389 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:36:38.390 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 4.2296ms
2025-05-16 13:36:38.390 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 4.0468ms
2025-05-16 13:36:38.391 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:36:38.392 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:36:38.393 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 17.7006ms
2025-05-16 13:36:38.394 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 15.9107ms
2025-05-16 13:36:41.440 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:36:41.441 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:36:41.444 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:36:41.448 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:36:41.449 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:36:41.450 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:36:41.451 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 13:36:41.452 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 13:36:41.454 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 13:36:41.456 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 13:36:41.457 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 13:36:41.459 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 13:36:41.459 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:36:41.460 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:36:41.461 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 7.6372ms
2025-05-16 13:36:41.462 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 6.4117ms
2025-05-16 13:36:41.463 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:36:41.464 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:36:41.465 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 24.7097ms
2025-05-16 13:36:41.465 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 24.1631ms
2025-05-16 13:36:49.416 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:36:49.417 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:36:49.420 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:36:49.423 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:36:49.424 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 8.6983ms
2025-05-16 13:36:49.426 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 9.0243ms
2025-05-16 13:36:49.433 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:36:49.436 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:36:49.438 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:36:49.440 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:36:49.441 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:36:49.441 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:36:49.442 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 13:36:49.443 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 13:36:49.444 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 13:36:49.446 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 13:36:49.447 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 13:36:49.447 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 13:36:49.448 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:36:49.449 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:36:49.450 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 5.5124ms
2025-05-16 13:36:49.452 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 5.9213ms
2025-05-16 13:36:49.453 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:36:49.454 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:36:49.454 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 21.9549ms
2025-05-16 13:36:49.455 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 18.9795ms
2025-05-16 13:36:54.395 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:36:54.395 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:36:54.400 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:36:54.404 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:36:54.405 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:36:54.405 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:36:54.407 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 13:36:54.408 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 13:36:54.409 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 13:36:54.410 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 13:36:54.411 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 13:36:54.412 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 13:36:54.413 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:36:54.413 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:36:54.414 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 4.9168ms
2025-05-16 13:36:54.415 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 4.5902ms
2025-05-16 13:36:54.415 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:36:54.416 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:36:54.417 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 22.5167ms
2025-05-16 13:36:54.418 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 22.8322ms
2025-05-16 13:36:55.431 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:36:55.432 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:36:55.435 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:36:55.437 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:36:55.437 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 6.8378ms
2025-05-16 13:36:55.439 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 7.4796ms
2025-05-16 13:36:55.445 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:36:55.447 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:36:55.450 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:36:55.452 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:36:55.452 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:36:55.453 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:36:55.454 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 13:36:55.454 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 13:36:55.456 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 13:36:55.459 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 13:36:55.460 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 13:36:55.461 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 13:36:55.461 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:36:55.462 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:36:55.463 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 6.7541ms
2025-05-16 13:36:55.464 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 5.2588ms
2025-05-16 13:36:55.465 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:36:55.466 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:36:55.467 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 22.1041ms
2025-05-16 13:36:55.467 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 20.6602ms
2025-05-16 13:39:57.456 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:39:57.456 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:39:57.458 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:39:57.461 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:39:57.461 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 5.0891ms
2025-05-16 13:39:57.461 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 4.5936ms
2025-05-16 13:39:57.464 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:39:57.466 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:39:57.469 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:39:57.469 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:39:57.470 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:39:57.470 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:39:57.471 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 13:39:57.471 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 13:39:57.472 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 13:39:57.473 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 13:39:57.474 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 13:39:57.474 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 13:39:57.475 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:39:57.475 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:39:57.478 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 4.7467ms
2025-05-16 13:39:57.478 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 6.1381ms
2025-05-16 13:39:57.481 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:39:57.482 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:39:57.483 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 16.5265ms
2025-05-16 13:39:57.484 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 19.6903ms
2025-05-16 13:39:59.371 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 13:39:59.372 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 13:39:59.374 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:39:59.376 +05:30 [INF] CORS policy execution successful.
2025-05-16 13:39:59.376 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:39:59.377 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:39:59.377 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 13:39:59.378 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 13:39:59.379 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 13:39:59.380 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 13:39:59.381 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 13:39:59.381 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 13:39:59.381 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:39:59.382 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 13:39:59.383 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 3.9414ms
2025-05-16 13:39:59.383 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 3.6632ms
2025-05-16 13:39:59.384 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 13:39:59.385 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 13:39:59.385 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 13.9592ms
2025-05-16 13:39:59.386 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 14.2766ms
2025-05-16 14:03:23.382 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:03:23.383 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:03:23.386 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:03:23.388 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:03:23.390 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 7.6077ms
2025-05-16 14:03:23.390 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 8.2833ms
2025-05-16 14:03:23.404 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:03:23.408 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:03:23.412 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:03:23.415 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:03:23.416 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:03:23.416 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:03:23.418 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:03:23.419 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:03:23.421 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 14:03:23.424 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 14:03:23.438 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 14:03:23.441 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:03:23.444 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 20.3499ms
2025-05-16 14:03:23.445 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:03:23.448 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 39.5295ms
2025-05-16 14:03:23.450 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 14:03:23.456 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:03:23.458 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 37.0246ms
2025-05-16 14:03:23.460 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:03:23.461 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 56.4962ms
2025-05-16 14:11:16.193 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:11:16.193 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:11:16.195 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:11:16.198 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:11:16.198 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 5.5178ms
2025-05-16 14:11:16.199 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 5.5509ms
2025-05-16 14:11:16.201 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:11:16.204 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:11:16.207 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:11:16.208 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:11:16.209 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:11:16.209 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:11:16.210 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:11:16.211 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:11:16.213 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 14:11:16.216 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 14:11:16.217 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 14:11:16.226 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 14:11:16.228 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:11:16.242 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:11:16.243 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 30.533ms
2025-05-16 14:11:16.251 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:11:16.251 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 36.5421ms
2025-05-16 14:11:16.252 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 50.7235ms
2025-05-16 14:11:16.257 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:11:16.260 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 56.3275ms
2025-05-16 14:16:19.082 +05:30 [INF] User profile is available. Using 'C:\Users\Bhavya Bansal\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-16 14:16:19.220 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-16 14:16:19.226 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-16 14:16:19.229 +05:30 [INF] Hosting environment: Development
2025-05-16 14:16:19.232 +05:30 [INF] Content root path: C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements
2025-05-16 14:16:58.627 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-16 14:16:58.738 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:16:58.754 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 129.2483ms
2025-05-16 14:16:58.765 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 64
2025-05-16 14:16:58.885 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:16:58.891 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-16 14:16:58.922 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-16 14:16:59.293 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType1`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:16:59.334 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 402.537ms
2025-05-16 14:16:59.335 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-16 14:16:59.337 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 200 null application/json; charset=utf-8 572.0272ms
2025-05-16 14:17:15.553 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-16 14:17:15.564 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:15.565 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 12.0227ms
2025-05-16 14:17:15.566 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 102
2025-05-16 14:17:15.569 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:15.570 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:17:15.580 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:17:15.613 +05:30 [INF] Starting allocation calculation...
2025-05-16 14:17:15.667 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 14:17:15.671 +05:30 [INF] Looking up base allocation for key: Mid+Long
2025-05-16 14:17:15.680 +05:30 [INF] Base allocation found: {"equity":50,"fixedIncome":30,"commodities":10,"cash":5,"realEstate":5}
2025-05-16 14:17:15.686 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 14:17:15.688 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 14:17:15.692 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-16 14:17:15.704 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-16 14:17:15.750 +05:30 [INF] Sub-allocations for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 14:17:15.756 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 14:17:15.757 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 14:17:15.763 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 14:17:15.770 +05:30 [INF] Sub-allocations for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 14:17:15.773 +05:30 [INF] Added sub-assets for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 14:17:15.777 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 14:17:15.782 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 14:17:15.785 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 14:17:15.788 +05:30 [INF] Added sub-assets for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 14:17:15.833 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 14:17:15.854 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 14:17:15.856 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 14:17:15.862 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 14:17:15.873 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 284.3272ms
2025-05-16 14:17:15.876 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:17:15.884 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 317.6362ms
2025-05-16 14:17:15.894 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - null null
2025-05-16 14:17:15.900 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:15.901 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - 204 null null 6.9341ms
2025-05-16 14:17:15.906 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - application/json 483
2025-05-16 14:17:15.914 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:15.917 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:17:15.928 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:17:15.983 +05:30 [INF] Starting product allocation calculation.
2025-05-16 14:17:15.989 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 14:17:16.023 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 14:17:16.040 +05:30 [INF] Product data loaded successfully.
2025-05-16 14:17:16.045 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 14:17:16.054 +05:30 [INF] Calculating investment amount with PercentageSplit: 10.42, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 8.
2025-05-16 14:17:16.058 +05:30 [INF] Calculated investment amount: 486.1.
2025-05-16 14:17:16.060 +05:30 [INF] Calculating investment amount with PercentageSplit: 9.58, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 8.
2025-05-16 14:17:16.064 +05:30 [INF] Calculated investment amount: 473.79.
2025-05-16 14:17:16.066 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 14:17:16.069 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.98, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 8.
2025-05-16 14:17:16.075 +05:30 [INF] Calculated investment amount: 311.02.
2025-05-16 14:17:16.080 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.02, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 8.
2025-05-16 14:17:16.087 +05:30 [INF] Calculated investment amount: 304.62.
2025-05-16 14:17:16.090 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 14:17:16.096 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.72, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 8.
2025-05-16 14:17:16.105 +05:30 [INF] Calculated investment amount: 270.63.
2025-05-16 14:17:16.109 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.28, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 8.
2025-05-16 14:17:16.116 +05:30 [INF] Calculated investment amount: 270.
2025-05-16 14:17:16.120 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 14:17:16.123 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.3, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 8.
2025-05-16 14:17:16.127 +05:30 [INF] Calculated investment amount: 155.67.
2025-05-16 14:17:16.131 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.2, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 8.
2025-05-16 14:17:16.138 +05:30 [INF] Calculated investment amount: 151.19.
2025-05-16 14:17:16.141 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 14:17:16.146 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.94, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 8.
2025-05-16 14:17:16.155 +05:30 [INF] Calculated investment amount: 173.69.
2025-05-16 14:17:16.158 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.06, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 8.
2025-05-16 14:17:16.166 +05:30 [INF] Calculated investment amount: 176.77.
2025-05-16 14:17:16.171 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 14:17:16.176 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.21, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 8.
2025-05-16 14:17:16.183 +05:30 [INF] Calculated investment amount: 144.
2025-05-16 14:17:16.189 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.29, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 8.
2025-05-16 14:17:16.196 +05:30 [INF] Calculated investment amount: 146.97.
2025-05-16 14:17:16.201 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 14:17:16.205 +05:30 [ERR] Invalid input detected: Percentage split must be between 1 and 100.
System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
2025-05-16 14:17:16.245 +05:30 [ERR] Error calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
2025-05-16 14:17:16.256 +05:30 [ERR] Error occurred while calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
   at WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations(AllocationResultDTO allocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Controllers\ProdAllocController.cs:line 106
2025-05-16 14:17:16.264 +05:30 [INF] Executing ObjectResult, writing value of type 'System.String'.
2025-05-16 14:17:16.269 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 333.6555ms
2025-05-16 14:17:16.272 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:17:16.276 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - 500 null text/plain; charset=utf-8 369.5312ms
2025-05-16 14:17:18.844 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 102
2025-05-16 14:17:18.848 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:18.849 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:17:18.850 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:17:18.852 +05:30 [INF] Starting allocation calculation...
2025-05-16 14:17:18.858 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 14:17:18.860 +05:30 [INF] Looking up base allocation for key: Mid+Long
2025-05-16 14:17:18.862 +05:30 [INF] Base allocation found: {"equity":50,"fixedIncome":30,"commodities":10,"cash":5,"realEstate":5}
2025-05-16 14:17:18.863 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 14:17:18.864 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 14:17:18.866 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-16 14:17:18.868 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-16 14:17:18.872 +05:30 [INF] Sub-allocations for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 14:17:18.875 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 14:17:18.877 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 14:17:18.879 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 14:17:18.880 +05:30 [INF] Sub-allocations for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 14:17:18.883 +05:30 [INF] Added sub-assets for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 14:17:18.885 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 14:17:18.887 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 14:17:18.889 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 14:17:18.891 +05:30 [INF] Added sub-assets for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 14:17:18.893 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 14:17:18.897 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 14:17:18.899 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 14:17:18.901 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 14:17:18.903 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 51.4833ms
2025-05-16 14:17:18.904 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:17:18.906 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 62.3518ms
2025-05-16 14:17:18.910 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - application/json 483
2025-05-16 14:17:18.916 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:18.917 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:17:18.918 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:17:18.923 +05:30 [INF] Starting product allocation calculation.
2025-05-16 14:17:18.924 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 14:17:18.927 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 14:17:18.933 +05:30 [INF] Product data loaded successfully.
2025-05-16 14:17:18.934 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 14:17:18.936 +05:30 [INF] Calculating investment amount with PercentageSplit: 10.42, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 8.
2025-05-16 14:17:18.939 +05:30 [INF] Calculated investment amount: 486.1.
2025-05-16 14:17:18.941 +05:30 [INF] Calculating investment amount with PercentageSplit: 9.58, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 8.
2025-05-16 14:17:18.943 +05:30 [INF] Calculated investment amount: 473.79.
2025-05-16 14:17:18.945 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 14:17:18.947 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.98, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 8.
2025-05-16 14:17:18.950 +05:30 [INF] Calculated investment amount: 311.02.
2025-05-16 14:17:18.951 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.02, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 8.
2025-05-16 14:17:18.954 +05:30 [INF] Calculated investment amount: 304.62.
2025-05-16 14:17:18.955 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 14:17:18.957 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.72, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 8.
2025-05-16 14:17:18.960 +05:30 [INF] Calculated investment amount: 270.63.
2025-05-16 14:17:18.962 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.28, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 8.
2025-05-16 14:17:18.965 +05:30 [INF] Calculated investment amount: 270.
2025-05-16 14:17:18.966 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 14:17:18.968 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.3, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 8.
2025-05-16 14:17:18.970 +05:30 [INF] Calculated investment amount: 155.67.
2025-05-16 14:17:18.971 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.2, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 8.
2025-05-16 14:17:18.973 +05:30 [INF] Calculated investment amount: 151.19.
2025-05-16 14:17:18.975 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 14:17:18.977 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.94, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 8.
2025-05-16 14:17:18.979 +05:30 [INF] Calculated investment amount: 173.69.
2025-05-16 14:17:18.981 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.06, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 8.
2025-05-16 14:17:18.984 +05:30 [INF] Calculated investment amount: 176.77.
2025-05-16 14:17:18.985 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 14:17:18.987 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.21, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 8.
2025-05-16 14:17:18.989 +05:30 [INF] Calculated investment amount: 144.
2025-05-16 14:17:18.991 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.29, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 8.
2025-05-16 14:17:18.993 +05:30 [INF] Calculated investment amount: 146.97.
2025-05-16 14:17:18.995 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 14:17:18.997 +05:30 [ERR] Invalid input detected: Percentage split must be between 1 and 100.
System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
2025-05-16 14:17:18.999 +05:30 [ERR] Error calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
2025-05-16 14:17:19.002 +05:30 [ERR] Error occurred while calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
   at WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations(AllocationResultDTO allocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Controllers\ProdAllocController.cs:line 106
2025-05-16 14:17:19.006 +05:30 [INF] Executing ObjectResult, writing value of type 'System.String'.
2025-05-16 14:17:19.008 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 88.1808ms
2025-05-16 14:17:19.010 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:17:19.011 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - 500 null text/plain; charset=utf-8 101.578ms
2025-05-16 14:17:23.048 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-16 14:17:23.050 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:23.052 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 3.8376ms
2025-05-16 14:17:23.054 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 102
2025-05-16 14:17:23.058 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:23.059 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:17:23.061 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:17:23.064 +05:30 [INF] Starting allocation calculation...
2025-05-16 14:17:23.066 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 14:17:23.067 +05:30 [INF] Looking up base allocation for key: Mid+Long
2025-05-16 14:17:23.067 +05:30 [INF] Base allocation found: {"equity":50,"fixedIncome":30,"commodities":10,"cash":5,"realEstate":5}
2025-05-16 14:17:23.068 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 14:17:23.069 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 14:17:23.070 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-16 14:17:23.071 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-16 14:17:23.073 +05:30 [INF] Sub-allocations for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 14:17:23.075 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 14:17:23.077 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 14:17:23.082 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 14:17:23.084 +05:30 [INF] Sub-allocations for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 14:17:23.086 +05:30 [INF] Added sub-assets for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 14:17:23.088 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 14:17:23.088 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 14:17:23.090 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 14:17:23.092 +05:30 [INF] Added sub-assets for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 14:17:23.094 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 14:17:23.096 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 14:17:23.097 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 14:17:23.099 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 14:17:23.102 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 39.5747ms
2025-05-16 14:17:23.104 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:17:23.105 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 50.591ms
2025-05-16 14:17:23.109 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - null null
2025-05-16 14:17:23.112 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:23.113 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - 204 null null 3.5651ms
2025-05-16 14:17:23.117 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - application/json 483
2025-05-16 14:17:23.121 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:23.122 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:17:23.123 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:17:23.129 +05:30 [INF] Starting product allocation calculation.
2025-05-16 14:17:23.130 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 14:17:23.132 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 14:17:23.138 +05:30 [INF] Product data loaded successfully.
2025-05-16 14:17:23.139 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 14:17:23.141 +05:30 [INF] Calculating investment amount with PercentageSplit: 10.42, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 8.
2025-05-16 14:17:23.144 +05:30 [INF] Calculated investment amount: 486.1.
2025-05-16 14:17:23.146 +05:30 [INF] Calculating investment amount with PercentageSplit: 9.58, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 8.
2025-05-16 14:17:23.149 +05:30 [INF] Calculated investment amount: 473.79.
2025-05-16 14:17:23.151 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 14:17:23.153 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.98, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 8.
2025-05-16 14:17:23.155 +05:30 [INF] Calculated investment amount: 311.02.
2025-05-16 14:17:23.156 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.02, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 8.
2025-05-16 14:17:23.159 +05:30 [INF] Calculated investment amount: 304.62.
2025-05-16 14:17:23.161 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 14:17:23.162 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.72, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 8.
2025-05-16 14:17:23.165 +05:30 [INF] Calculated investment amount: 270.63.
2025-05-16 14:17:23.166 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.28, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 8.
2025-05-16 14:17:23.169 +05:30 [INF] Calculated investment amount: 270.
2025-05-16 14:17:23.170 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 14:17:23.172 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.3, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 8.
2025-05-16 14:17:23.176 +05:30 [INF] Calculated investment amount: 155.67.
2025-05-16 14:17:23.177 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.2, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 8.
2025-05-16 14:17:23.181 +05:30 [INF] Calculated investment amount: 151.19.
2025-05-16 14:17:23.182 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 14:17:23.184 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.94, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 8.
2025-05-16 14:17:23.186 +05:30 [INF] Calculated investment amount: 173.69.
2025-05-16 14:17:23.187 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.06, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 8.
2025-05-16 14:17:23.189 +05:30 [INF] Calculated investment amount: 176.77.
2025-05-16 14:17:23.190 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 14:17:23.192 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.21, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 8.
2025-05-16 14:17:23.194 +05:30 [INF] Calculated investment amount: 144.
2025-05-16 14:17:23.196 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.29, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 8.
2025-05-16 14:17:23.198 +05:30 [INF] Calculated investment amount: 146.97.
2025-05-16 14:17:23.199 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 14:17:23.201 +05:30 [ERR] Invalid input detected: Percentage split must be between 1 and 100.
System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
2025-05-16 14:17:23.203 +05:30 [ERR] Error calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
2025-05-16 14:17:23.206 +05:30 [ERR] Error occurred while calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
   at WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations(AllocationResultDTO allocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Controllers\ProdAllocController.cs:line 106
2025-05-16 14:17:23.209 +05:30 [INF] Executing ObjectResult, writing value of type 'System.String'.
2025-05-16 14:17:23.211 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 85.8361ms
2025-05-16 14:17:23.213 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:17:23.214 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - 500 null text/plain; charset=utf-8 97.0866ms
2025-05-16 14:17:26.882 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 102
2025-05-16 14:17:26.885 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:26.886 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:17:26.887 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:17:26.891 +05:30 [INF] Starting allocation calculation...
2025-05-16 14:17:26.893 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 14:17:26.893 +05:30 [INF] Looking up base allocation for key: Mid+Long
2025-05-16 14:17:26.894 +05:30 [INF] Base allocation found: {"equity":50,"fixedIncome":30,"commodities":10,"cash":5,"realEstate":5}
2025-05-16 14:17:26.895 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 14:17:26.896 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 14:17:26.897 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-16 14:17:26.898 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-16 14:17:26.901 +05:30 [INF] Sub-allocations for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 14:17:26.902 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 14:17:26.903 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 14:17:26.904 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 14:17:26.907 +05:30 [INF] Sub-allocations for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 14:17:26.907 +05:30 [INF] Added sub-assets for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 14:17:26.909 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 14:17:26.910 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 14:17:26.911 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 14:17:26.912 +05:30 [INF] Added sub-assets for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 14:17:26.913 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 14:17:26.915 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 14:17:26.916 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 14:17:26.917 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 14:17:26.919 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 28.933ms
2025-05-16 14:17:26.920 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:17:26.921 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 38.7306ms
2025-05-16 14:17:26.925 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - application/json 483
2025-05-16 14:17:26.928 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:26.929 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:17:26.930 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:17:26.932 +05:30 [INF] Starting product allocation calculation.
2025-05-16 14:17:26.933 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 14:17:26.934 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 14:17:26.937 +05:30 [INF] Product data loaded successfully.
2025-05-16 14:17:26.942 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 14:17:26.943 +05:30 [INF] Calculating investment amount with PercentageSplit: 10.42, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 8.
2025-05-16 14:17:26.944 +05:30 [INF] Calculated investment amount: 486.1.
2025-05-16 14:17:26.945 +05:30 [INF] Calculating investment amount with PercentageSplit: 9.58, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 8.
2025-05-16 14:17:26.946 +05:30 [INF] Calculated investment amount: 473.79.
2025-05-16 14:17:26.947 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 14:17:26.948 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.98, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 8.
2025-05-16 14:17:26.949 +05:30 [INF] Calculated investment amount: 311.02.
2025-05-16 14:17:26.950 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.02, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 8.
2025-05-16 14:17:26.952 +05:30 [INF] Calculated investment amount: 304.62.
2025-05-16 14:17:26.953 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 14:17:26.958 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.72, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 8.
2025-05-16 14:17:26.960 +05:30 [INF] Calculated investment amount: 270.63.
2025-05-16 14:17:26.961 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.28, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 8.
2025-05-16 14:17:26.962 +05:30 [INF] Calculated investment amount: 270.
2025-05-16 14:17:26.963 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 14:17:26.964 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.3, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 8.
2025-05-16 14:17:26.966 +05:30 [INF] Calculated investment amount: 155.67.
2025-05-16 14:17:26.966 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.2, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 8.
2025-05-16 14:17:26.968 +05:30 [INF] Calculated investment amount: 151.19.
2025-05-16 14:17:26.969 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 14:17:26.970 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.94, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 8.
2025-05-16 14:17:26.974 +05:30 [INF] Calculated investment amount: 173.69.
2025-05-16 14:17:26.975 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.06, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 8.
2025-05-16 14:17:26.976 +05:30 [INF] Calculated investment amount: 176.77.
2025-05-16 14:17:26.977 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 14:17:26.978 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.21, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 8.
2025-05-16 14:17:26.979 +05:30 [INF] Calculated investment amount: 144.
2025-05-16 14:17:26.980 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.29, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 8.
2025-05-16 14:17:26.981 +05:30 [INF] Calculated investment amount: 146.97.
2025-05-16 14:17:26.982 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 14:17:26.983 +05:30 [ERR] Invalid input detected: Percentage split must be between 1 and 100.
System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
2025-05-16 14:17:26.984 +05:30 [ERR] Error calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
2025-05-16 14:17:26.986 +05:30 [ERR] Error occurred while calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
   at WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations(AllocationResultDTO allocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Controllers\ProdAllocController.cs:line 106
2025-05-16 14:17:26.990 +05:30 [INF] Executing ObjectResult, writing value of type 'System.String'.
2025-05-16 14:17:26.992 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 60.2725ms
2025-05-16 14:17:26.993 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:17:26.994 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - 500 null text/plain; charset=utf-8 68.876ms
2025-05-16 14:17:32.262 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-16 14:17:32.265 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:32.266 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 3.8982ms
2025-05-16 14:17:32.269 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 102
2025-05-16 14:17:32.274 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:32.275 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:17:32.276 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:17:32.279 +05:30 [INF] Starting allocation calculation...
2025-05-16 14:17:32.284 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 14:17:32.285 +05:30 [INF] Looking up base allocation for key: Mid+Long
2025-05-16 14:17:32.287 +05:30 [INF] Base allocation found: {"equity":50,"fixedIncome":30,"commodities":10,"cash":5,"realEstate":5}
2025-05-16 14:17:32.288 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 14:17:32.289 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 14:17:32.290 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-16 14:17:32.292 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-16 14:17:32.295 +05:30 [INF] Sub-allocations for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 14:17:32.298 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 14:17:32.300 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 14:17:32.302 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 14:17:32.304 +05:30 [INF] Sub-allocations for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 14:17:32.306 +05:30 [INF] Added sub-assets for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 14:17:32.310 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 14:17:32.313 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 14:17:32.316 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 14:17:32.318 +05:30 [INF] Added sub-assets for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 14:17:32.319 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 14:17:32.334 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 14:17:32.336 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 14:17:32.339 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 14:17:32.341 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 62.9431ms
2025-05-16 14:17:32.343 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:17:32.344 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 74.8387ms
2025-05-16 14:17:32.347 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - null null
2025-05-16 14:17:32.353 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:32.354 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - 204 null null 6.7246ms
2025-05-16 14:17:32.361 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - application/json 483
2025-05-16 14:17:32.367 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:32.368 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:17:32.371 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:17:32.375 +05:30 [INF] Starting product allocation calculation.
2025-05-16 14:17:32.377 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 14:17:32.380 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 14:17:32.387 +05:30 [INF] Product data loaded successfully.
2025-05-16 14:17:32.388 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 14:17:32.391 +05:30 [INF] Calculating investment amount with PercentageSplit: 10.42, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 8.
2025-05-16 14:17:32.394 +05:30 [INF] Calculated investment amount: 486.1.
2025-05-16 14:17:32.395 +05:30 [INF] Calculating investment amount with PercentageSplit: 9.58, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 8.
2025-05-16 14:17:32.397 +05:30 [INF] Calculated investment amount: 473.79.
2025-05-16 14:17:32.398 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 14:17:32.400 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.98, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 8.
2025-05-16 14:17:32.403 +05:30 [INF] Calculated investment amount: 311.02.
2025-05-16 14:17:32.405 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.02, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 8.
2025-05-16 14:17:32.408 +05:30 [INF] Calculated investment amount: 304.62.
2025-05-16 14:17:32.411 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 14:17:32.412 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.72, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 8.
2025-05-16 14:17:32.415 +05:30 [INF] Calculated investment amount: 270.63.
2025-05-16 14:17:32.417 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.28, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 8.
2025-05-16 14:17:32.419 +05:30 [INF] Calculated investment amount: 270.
2025-05-16 14:17:32.421 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 14:17:32.422 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.3, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 8.
2025-05-16 14:17:32.424 +05:30 [INF] Calculated investment amount: 155.67.
2025-05-16 14:17:32.426 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.2, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 8.
2025-05-16 14:17:32.429 +05:30 [INF] Calculated investment amount: 151.19.
2025-05-16 14:17:32.431 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 14:17:32.433 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.94, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 8.
2025-05-16 14:17:32.436 +05:30 [INF] Calculated investment amount: 173.69.
2025-05-16 14:17:32.437 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.06, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 8.
2025-05-16 14:17:32.439 +05:30 [INF] Calculated investment amount: 176.77.
2025-05-16 14:17:32.441 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 14:17:32.443 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.21, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 8.
2025-05-16 14:17:32.446 +05:30 [INF] Calculated investment amount: 144.
2025-05-16 14:17:32.448 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.29, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 8.
2025-05-16 14:17:32.451 +05:30 [INF] Calculated investment amount: 146.97.
2025-05-16 14:17:32.453 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 14:17:32.455 +05:30 [ERR] Invalid input detected: Percentage split must be between 1 and 100.
System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
2025-05-16 14:17:32.457 +05:30 [ERR] Error calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
2025-05-16 14:17:32.461 +05:30 [ERR] Error occurred while calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
   at WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations(AllocationResultDTO allocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Controllers\ProdAllocController.cs:line 106
2025-05-16 14:17:32.465 +05:30 [INF] Executing ObjectResult, writing value of type 'System.String'.
2025-05-16 14:17:32.467 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 93.6891ms
2025-05-16 14:17:32.468 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:17:32.469 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - 500 null text/plain; charset=utf-8 108.1231ms
2025-05-16 14:17:32.833 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 102
2025-05-16 14:17:32.839 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:32.840 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:17:32.842 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:17:32.847 +05:30 [INF] Starting allocation calculation...
2025-05-16 14:17:32.851 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 14:17:32.851 +05:30 [INF] Looking up base allocation for key: Mid+Long
2025-05-16 14:17:32.853 +05:30 [INF] Base allocation found: {"equity":50,"fixedIncome":30,"commodities":10,"cash":5,"realEstate":5}
2025-05-16 14:17:32.854 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 14:17:32.855 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 14:17:32.856 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-16 14:17:32.857 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-16 14:17:32.860 +05:30 [INF] Sub-allocations for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 14:17:32.861 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 14:17:32.863 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 14:17:32.865 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 14:17:32.868 +05:30 [INF] Sub-allocations for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 14:17:32.869 +05:30 [INF] Added sub-assets for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 14:17:32.871 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 14:17:32.872 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 14:17:32.873 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 14:17:32.874 +05:30 [INF] Added sub-assets for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 14:17:32.876 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 14:17:32.879 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 14:17:32.879 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 14:17:32.881 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 14:17:32.883 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 35.7048ms
2025-05-16 14:17:32.884 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:17:32.885 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 51.7814ms
2025-05-16 14:17:32.889 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - application/json 483
2025-05-16 14:17:32.895 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:32.897 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:17:32.899 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:17:32.902 +05:30 [INF] Starting product allocation calculation.
2025-05-16 14:17:32.903 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 14:17:32.905 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 14:17:32.909 +05:30 [INF] Product data loaded successfully.
2025-05-16 14:17:32.909 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 14:17:32.911 +05:30 [INF] Calculating investment amount with PercentageSplit: 10.42, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 8.
2025-05-16 14:17:32.912 +05:30 [INF] Calculated investment amount: 486.1.
2025-05-16 14:17:32.914 +05:30 [INF] Calculating investment amount with PercentageSplit: 9.58, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 8.
2025-05-16 14:17:32.917 +05:30 [INF] Calculated investment amount: 473.79.
2025-05-16 14:17:32.919 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 14:17:32.921 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.98, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 8.
2025-05-16 14:17:32.925 +05:30 [INF] Calculated investment amount: 311.02.
2025-05-16 14:17:32.928 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.02, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 8.
2025-05-16 14:17:32.931 +05:30 [INF] Calculated investment amount: 304.62.
2025-05-16 14:17:32.933 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 14:17:32.935 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.72, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 8.
2025-05-16 14:17:32.937 +05:30 [INF] Calculated investment amount: 270.63.
2025-05-16 14:17:32.939 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.28, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 8.
2025-05-16 14:17:32.941 +05:30 [INF] Calculated investment amount: 270.
2025-05-16 14:17:32.943 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 14:17:32.945 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.3, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 8.
2025-05-16 14:17:32.948 +05:30 [INF] Calculated investment amount: 155.67.
2025-05-16 14:17:32.950 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.2, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 8.
2025-05-16 14:17:32.953 +05:30 [INF] Calculated investment amount: 151.19.
2025-05-16 14:17:32.955 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 14:17:32.957 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.94, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 8.
2025-05-16 14:17:32.960 +05:30 [INF] Calculated investment amount: 173.69.
2025-05-16 14:17:32.962 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.06, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 8.
2025-05-16 14:17:32.965 +05:30 [INF] Calculated investment amount: 176.77.
2025-05-16 14:17:32.967 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 14:17:32.969 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.21, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 8.
2025-05-16 14:17:32.972 +05:30 [INF] Calculated investment amount: 144.
2025-05-16 14:17:32.973 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.29, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 8.
2025-05-16 14:17:32.975 +05:30 [INF] Calculated investment amount: 146.97.
2025-05-16 14:17:32.979 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 14:17:32.982 +05:30 [ERR] Invalid input detected: Percentage split must be between 1 and 100.
System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
2025-05-16 14:17:32.985 +05:30 [ERR] Error calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
2025-05-16 14:17:32.988 +05:30 [ERR] Error occurred while calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
   at WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations(AllocationResultDTO allocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Controllers\ProdAllocController.cs:line 106
2025-05-16 14:17:32.992 +05:30 [INF] Executing ObjectResult, writing value of type 'System.String'.
2025-05-16 14:17:32.995 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 94.1195ms
2025-05-16 14:17:32.997 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:17:32.999 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - 500 null text/plain; charset=utf-8 109.6157ms
2025-05-16 14:17:33.049 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 102
2025-05-16 14:17:33.055 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:33.057 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:17:33.059 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:17:33.065 +05:30 [INF] Starting allocation calculation...
2025-05-16 14:17:33.069 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 14:17:33.071 +05:30 [INF] Looking up base allocation for key: Mid+Long
2025-05-16 14:17:33.073 +05:30 [INF] Base allocation found: {"equity":50,"fixedIncome":30,"commodities":10,"cash":5,"realEstate":5}
2025-05-16 14:17:33.074 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 14:17:33.076 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 14:17:33.078 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-16 14:17:33.080 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-16 14:17:33.082 +05:30 [INF] Sub-allocations for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 14:17:33.084 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 14:17:33.086 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 14:17:33.088 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 14:17:33.089 +05:30 [INF] Sub-allocations for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 14:17:33.090 +05:30 [INF] Added sub-assets for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 14:17:33.092 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 14:17:33.093 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 14:17:33.094 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 14:17:33.095 +05:30 [INF] Added sub-assets for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 14:17:33.096 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 14:17:33.099 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 14:17:33.100 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 14:17:33.101 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 14:17:33.104 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 38.8938ms
2025-05-16 14:17:33.106 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:17:33.108 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 59.2044ms
2025-05-16 14:17:33.111 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - application/json 483
2025-05-16 14:17:33.116 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:33.117 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:17:33.119 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:17:33.122 +05:30 [INF] Starting product allocation calculation.
2025-05-16 14:17:33.124 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 14:17:33.126 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 14:17:33.131 +05:30 [INF] Product data loaded successfully.
2025-05-16 14:17:33.132 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 14:17:33.133 +05:30 [INF] Calculating investment amount with PercentageSplit: 10.42, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 8.
2025-05-16 14:17:33.136 +05:30 [INF] Calculated investment amount: 486.1.
2025-05-16 14:17:33.137 +05:30 [INF] Calculating investment amount with PercentageSplit: 9.58, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 8.
2025-05-16 14:17:33.139 +05:30 [INF] Calculated investment amount: 473.79.
2025-05-16 14:17:33.140 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 14:17:33.141 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.98, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 8.
2025-05-16 14:17:33.144 +05:30 [INF] Calculated investment amount: 311.02.
2025-05-16 14:17:33.147 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.02, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 8.
2025-05-16 14:17:33.149 +05:30 [INF] Calculated investment amount: 304.62.
2025-05-16 14:17:33.151 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 14:17:33.153 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.72, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 8.
2025-05-16 14:17:33.155 +05:30 [INF] Calculated investment amount: 270.63.
2025-05-16 14:17:33.157 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.28, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 8.
2025-05-16 14:17:33.159 +05:30 [INF] Calculated investment amount: 270.
2025-05-16 14:17:33.161 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 14:17:33.163 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.3, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 8.
2025-05-16 14:17:33.166 +05:30 [INF] Calculated investment amount: 155.67.
2025-05-16 14:17:33.168 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.2, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 8.
2025-05-16 14:17:33.171 +05:30 [INF] Calculated investment amount: 151.19.
2025-05-16 14:17:33.172 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 14:17:33.174 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.94, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 8.
2025-05-16 14:17:33.176 +05:30 [INF] Calculated investment amount: 173.69.
2025-05-16 14:17:33.178 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.06, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 8.
2025-05-16 14:17:33.180 +05:30 [INF] Calculated investment amount: 176.77.
2025-05-16 14:17:33.182 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 14:17:33.184 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.21, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 8.
2025-05-16 14:17:33.187 +05:30 [INF] Calculated investment amount: 144.
2025-05-16 14:17:33.189 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.29, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 8.
2025-05-16 14:17:33.191 +05:30 [INF] Calculated investment amount: 146.97.
2025-05-16 14:17:33.193 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 14:17:33.195 +05:30 [ERR] Invalid input detected: Percentage split must be between 1 and 100.
System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
2025-05-16 14:17:33.198 +05:30 [ERR] Error calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
2025-05-16 14:17:33.201 +05:30 [ERR] Error occurred while calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
   at WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations(AllocationResultDTO allocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Controllers\ProdAllocController.cs:line 106
2025-05-16 14:17:33.205 +05:30 [INF] Executing ObjectResult, writing value of type 'System.String'.
2025-05-16 14:17:33.208 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 86.3867ms
2025-05-16 14:17:33.210 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:17:33.211 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - 500 null text/plain; charset=utf-8 100.0531ms
2025-05-16 14:17:33.264 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 102
2025-05-16 14:17:33.268 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:33.269 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:17:33.271 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:17:33.273 +05:30 [INF] Starting allocation calculation...
2025-05-16 14:17:33.276 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 14:17:33.277 +05:30 [INF] Looking up base allocation for key: Mid+Long
2025-05-16 14:17:33.279 +05:30 [INF] Base allocation found: {"equity":50,"fixedIncome":30,"commodities":10,"cash":5,"realEstate":5}
2025-05-16 14:17:33.280 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 14:17:33.282 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 14:17:33.283 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-16 14:17:33.285 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-16 14:17:33.287 +05:30 [INF] Sub-allocations for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 14:17:33.288 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 14:17:33.289 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 14:17:33.291 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 14:17:33.293 +05:30 [INF] Sub-allocations for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 14:17:33.295 +05:30 [INF] Added sub-assets for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 14:17:33.297 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 14:17:33.298 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 14:17:33.300 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 14:17:33.301 +05:30 [INF] Added sub-assets for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 14:17:33.303 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 14:17:33.305 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 14:17:33.307 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 14:17:33.308 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 14:17:33.310 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 37.1314ms
2025-05-16 14:17:33.312 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:17:33.313 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 49.674ms
2025-05-16 14:17:33.316 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - application/json 483
2025-05-16 14:17:33.319 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:33.321 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:17:33.322 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:17:33.325 +05:30 [INF] Starting product allocation calculation.
2025-05-16 14:17:33.327 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 14:17:33.328 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 14:17:33.334 +05:30 [INF] Product data loaded successfully.
2025-05-16 14:17:33.336 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 14:17:33.338 +05:30 [INF] Calculating investment amount with PercentageSplit: 10.42, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 8.
2025-05-16 14:17:33.339 +05:30 [INF] Calculated investment amount: 486.1.
2025-05-16 14:17:33.340 +05:30 [INF] Calculating investment amount with PercentageSplit: 9.58, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 8.
2025-05-16 14:17:33.342 +05:30 [INF] Calculated investment amount: 473.79.
2025-05-16 14:17:33.343 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 14:17:33.345 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.98, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 8.
2025-05-16 14:17:33.348 +05:30 [INF] Calculated investment amount: 311.02.
2025-05-16 14:17:33.349 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.02, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 8.
2025-05-16 14:17:33.352 +05:30 [INF] Calculated investment amount: 304.62.
2025-05-16 14:17:33.354 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 14:17:33.354 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.72, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 8.
2025-05-16 14:17:33.356 +05:30 [INF] Calculated investment amount: 270.63.
2025-05-16 14:17:33.357 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.28, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 8.
2025-05-16 14:17:33.360 +05:30 [INF] Calculated investment amount: 270.
2025-05-16 14:17:33.362 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 14:17:33.364 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.3, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 8.
2025-05-16 14:17:33.366 +05:30 [INF] Calculated investment amount: 155.67.
2025-05-16 14:17:33.367 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.2, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 8.
2025-05-16 14:17:33.370 +05:30 [INF] Calculated investment amount: 151.19.
2025-05-16 14:17:33.371 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 14:17:33.373 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.94, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 8.
2025-05-16 14:17:33.375 +05:30 [INF] Calculated investment amount: 173.69.
2025-05-16 14:17:33.377 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.06, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 8.
2025-05-16 14:17:33.380 +05:30 [INF] Calculated investment amount: 176.77.
2025-05-16 14:17:33.381 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 14:17:33.383 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.21, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 8.
2025-05-16 14:17:33.386 +05:30 [INF] Calculated investment amount: 144.
2025-05-16 14:17:33.387 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.29, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 8.
2025-05-16 14:17:33.390 +05:30 [INF] Calculated investment amount: 146.97.
2025-05-16 14:17:33.392 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 14:17:33.393 +05:30 [ERR] Invalid input detected: Percentage split must be between 1 and 100.
System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
2025-05-16 14:17:33.395 +05:30 [ERR] Error calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
2025-05-16 14:17:33.398 +05:30 [ERR] Error occurred while calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
   at WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations(AllocationResultDTO allocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Controllers\ProdAllocController.cs:line 106
2025-05-16 14:17:33.401 +05:30 [INF] Executing ObjectResult, writing value of type 'System.String'.
2025-05-16 14:17:33.402 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 78.9375ms
2025-05-16 14:17:33.404 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:17:33.407 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - 500 null text/plain; charset=utf-8 90.5727ms
2025-05-16 14:17:34.184 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 102
2025-05-16 14:17:34.192 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:34.195 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:17:34.199 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:17:34.205 +05:30 [INF] Starting allocation calculation...
2025-05-16 14:17:34.209 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 14:17:34.212 +05:30 [INF] Looking up base allocation for key: Mid+Long
2025-05-16 14:17:34.215 +05:30 [INF] Base allocation found: {"equity":50,"fixedIncome":30,"commodities":10,"cash":5,"realEstate":5}
2025-05-16 14:17:34.219 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 14:17:34.222 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 14:17:34.223 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-16 14:17:34.225 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-16 14:17:34.229 +05:30 [INF] Sub-allocations for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 14:17:34.235 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 14:17:34.238 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 14:17:34.239 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 14:17:34.242 +05:30 [INF] Sub-allocations for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 14:17:34.247 +05:30 [INF] Added sub-assets for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 14:17:34.253 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 14:17:34.255 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 14:17:34.256 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 14:17:34.261 +05:30 [INF] Added sub-assets for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 14:17:34.267 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 14:17:34.273 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 14:17:34.276 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 14:17:34.282 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 14:17:34.288 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 83.9356ms
2025-05-16 14:17:34.294 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:17:34.300 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 115.6181ms
2025-05-16 14:17:34.305 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - application/json 483
2025-05-16 14:17:34.314 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:34.318 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:17:34.321 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:17:34.325 +05:30 [INF] Starting product allocation calculation.
2025-05-16 14:17:34.328 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 14:17:34.334 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 14:17:34.344 +05:30 [INF] Product data loaded successfully.
2025-05-16 14:17:34.348 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 14:17:34.354 +05:30 [INF] Calculating investment amount with PercentageSplit: 10.42, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 8.
2025-05-16 14:17:34.356 +05:30 [INF] Calculated investment amount: 486.1.
2025-05-16 14:17:34.359 +05:30 [INF] Calculating investment amount with PercentageSplit: 9.58, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 8.
2025-05-16 14:17:34.366 +05:30 [INF] Calculated investment amount: 473.79.
2025-05-16 14:17:34.371 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 14:17:34.372 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.98, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 8.
2025-05-16 14:17:34.377 +05:30 [INF] Calculated investment amount: 311.02.
2025-05-16 14:17:34.382 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.02, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 8.
2025-05-16 14:17:34.388 +05:30 [INF] Calculated investment amount: 304.62.
2025-05-16 14:17:34.389 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 14:17:34.391 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.72, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 8.
2025-05-16 14:17:34.399 +05:30 [INF] Calculated investment amount: 270.63.
2025-05-16 14:17:34.403 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.28, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 8.
2025-05-16 14:17:34.409 +05:30 [INF] Calculated investment amount: 270.
2025-05-16 14:17:34.413 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 14:17:34.418 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.3, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 8.
2025-05-16 14:17:34.422 +05:30 [INF] Calculated investment amount: 155.67.
2025-05-16 14:17:34.425 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.2, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 8.
2025-05-16 14:17:34.431 +05:30 [INF] Calculated investment amount: 151.19.
2025-05-16 14:17:34.435 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 14:17:34.437 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.94, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 8.
2025-05-16 14:17:34.439 +05:30 [INF] Calculated investment amount: 173.69.
2025-05-16 14:17:34.441 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.06, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 8.
2025-05-16 14:17:34.443 +05:30 [INF] Calculated investment amount: 176.77.
2025-05-16 14:17:34.447 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 14:17:34.453 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.21, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 8.
2025-05-16 14:17:34.455 +05:30 [INF] Calculated investment amount: 144.
2025-05-16 14:17:34.459 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.29, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 8.
2025-05-16 14:17:34.465 +05:30 [INF] Calculated investment amount: 146.97.
2025-05-16 14:17:34.468 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 14:17:34.471 +05:30 [ERR] Invalid input detected: Percentage split must be between 1 and 100.
System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
2025-05-16 14:17:34.475 +05:30 [ERR] Error calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
2025-05-16 14:17:34.481 +05:30 [ERR] Error occurred while calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
   at WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations(AllocationResultDTO allocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Controllers\ProdAllocController.cs:line 106
2025-05-16 14:17:34.488 +05:30 [INF] Executing ObjectResult, writing value of type 'System.String'.
2025-05-16 14:17:34.491 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 167.2725ms
2025-05-16 14:17:34.497 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:17:34.502 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - 500 null text/plain; charset=utf-8 196.9263ms
2025-05-16 14:17:35.054 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 102
2025-05-16 14:17:35.062 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:35.065 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:17:35.071 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:17:35.074 +05:30 [INF] Starting allocation calculation...
2025-05-16 14:17:35.077 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 14:17:35.079 +05:30 [INF] Looking up base allocation for key: Mid+Long
2025-05-16 14:17:35.082 +05:30 [INF] Base allocation found: {"equity":50,"fixedIncome":30,"commodities":10,"cash":5,"realEstate":5}
2025-05-16 14:17:35.084 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 14:17:35.087 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 14:17:35.090 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-16 14:17:35.095 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-16 14:17:35.099 +05:30 [INF] Sub-allocations for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 14:17:35.101 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 14:17:35.103 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 14:17:35.105 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 14:17:35.107 +05:30 [INF] Sub-allocations for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 14:17:35.110 +05:30 [INF] Added sub-assets for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 14:17:35.114 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 14:17:35.118 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 14:17:35.120 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 14:17:35.121 +05:30 [INF] Added sub-assets for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 14:17:35.122 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 14:17:35.125 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 14:17:35.126 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 14:17:35.128 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 14:17:35.130 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 56.8283ms
2025-05-16 14:17:35.132 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:17:35.134 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 79.8905ms
2025-05-16 14:17:35.137 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - application/json 483
2025-05-16 14:17:35.142 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:35.143 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:17:35.145 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:17:35.148 +05:30 [INF] Starting product allocation calculation.
2025-05-16 14:17:35.149 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 14:17:35.151 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 14:17:35.158 +05:30 [INF] Product data loaded successfully.
2025-05-16 14:17:35.159 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 14:17:35.162 +05:30 [INF] Calculating investment amount with PercentageSplit: 10.42, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 8.
2025-05-16 14:17:35.165 +05:30 [INF] Calculated investment amount: 486.1.
2025-05-16 14:17:35.166 +05:30 [INF] Calculating investment amount with PercentageSplit: 9.58, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 8.
2025-05-16 14:17:35.168 +05:30 [INF] Calculated investment amount: 473.79.
2025-05-16 14:17:35.170 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 14:17:35.171 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.98, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 8.
2025-05-16 14:17:35.174 +05:30 [INF] Calculated investment amount: 311.02.
2025-05-16 14:17:35.175 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.02, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 8.
2025-05-16 14:17:35.178 +05:30 [INF] Calculated investment amount: 304.62.
2025-05-16 14:17:35.179 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 14:17:35.181 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.72, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 8.
2025-05-16 14:17:35.184 +05:30 [INF] Calculated investment amount: 270.63.
2025-05-16 14:17:35.186 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.28, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 8.
2025-05-16 14:17:35.188 +05:30 [INF] Calculated investment amount: 270.
2025-05-16 14:17:35.190 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 14:17:35.192 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.3, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 8.
2025-05-16 14:17:35.194 +05:30 [INF] Calculated investment amount: 155.67.
2025-05-16 14:17:35.195 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.2, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 8.
2025-05-16 14:17:35.198 +05:30 [INF] Calculated investment amount: 151.19.
2025-05-16 14:17:35.199 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 14:17:35.201 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.94, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 8.
2025-05-16 14:17:35.203 +05:30 [INF] Calculated investment amount: 173.69.
2025-05-16 14:17:35.204 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.06, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 8.
2025-05-16 14:17:35.207 +05:30 [INF] Calculated investment amount: 176.77.
2025-05-16 14:17:35.208 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 14:17:35.210 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.21, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 8.
2025-05-16 14:17:35.212 +05:30 [INF] Calculated investment amount: 144.
2025-05-16 14:17:35.214 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.29, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 8.
2025-05-16 14:17:35.216 +05:30 [INF] Calculated investment amount: 146.97.
2025-05-16 14:17:35.217 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 14:17:35.220 +05:30 [ERR] Invalid input detected: Percentage split must be between 1 and 100.
System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
2025-05-16 14:17:35.221 +05:30 [ERR] Error calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
2025-05-16 14:17:35.224 +05:30 [ERR] Error occurred while calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
   at WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations(AllocationResultDTO allocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Controllers\ProdAllocController.cs:line 106
2025-05-16 14:17:35.228 +05:30 [INF] Executing ObjectResult, writing value of type 'System.String'.
2025-05-16 14:17:35.230 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 82.3021ms
2025-05-16 14:17:35.231 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:17:35.233 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - 500 null text/plain; charset=utf-8 95.3852ms
2025-05-16 14:17:35.251 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 102
2025-05-16 14:17:35.255 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:35.259 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:17:35.264 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:17:35.269 +05:30 [INF] Starting allocation calculation...
2025-05-16 14:17:35.270 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 14:17:35.272 +05:30 [INF] Looking up base allocation for key: Mid+Long
2025-05-16 14:17:35.273 +05:30 [INF] Base allocation found: {"equity":50,"fixedIncome":30,"commodities":10,"cash":5,"realEstate":5}
2025-05-16 14:17:35.274 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 14:17:35.275 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 14:17:35.276 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-16 14:17:35.277 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-16 14:17:35.281 +05:30 [INF] Sub-allocations for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 14:17:35.285 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 14:17:35.288 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 14:17:35.293 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 14:17:35.296 +05:30 [INF] Sub-allocations for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 14:17:35.302 +05:30 [INF] Added sub-assets for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 14:17:35.305 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 14:17:35.309 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 14:17:35.313 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 14:17:35.318 +05:30 [INF] Added sub-assets for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 14:17:35.321 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 14:17:35.326 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 14:17:35.327 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 14:17:35.331 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 14:17:35.336 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 67.7854ms
2025-05-16 14:17:35.339 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:17:35.345 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 93.3923ms
2025-05-16 14:17:35.348 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - application/json 483
2025-05-16 14:17:35.355 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:35.357 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:17:35.360 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:17:35.365 +05:30 [INF] Starting product allocation calculation.
2025-05-16 14:17:35.365 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 14:17:35.367 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 14:17:35.369 +05:30 [INF] Product data loaded successfully.
2025-05-16 14:17:35.371 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 14:17:35.372 +05:30 [INF] Calculating investment amount with PercentageSplit: 10.42, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 8.
2025-05-16 14:17:35.374 +05:30 [INF] Calculated investment amount: 486.1.
2025-05-16 14:17:35.375 +05:30 [INF] Calculating investment amount with PercentageSplit: 9.58, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 8.
2025-05-16 14:17:35.378 +05:30 [INF] Calculated investment amount: 473.79.
2025-05-16 14:17:35.380 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 14:17:35.381 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.98, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 8.
2025-05-16 14:17:35.383 +05:30 [INF] Calculated investment amount: 311.02.
2025-05-16 14:17:35.384 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.02, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 8.
2025-05-16 14:17:35.387 +05:30 [INF] Calculated investment amount: 304.62.
2025-05-16 14:17:35.389 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 14:17:35.391 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.72, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 8.
2025-05-16 14:17:35.393 +05:30 [INF] Calculated investment amount: 270.63.
2025-05-16 14:17:35.394 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.28, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 8.
2025-05-16 14:17:35.396 +05:30 [INF] Calculated investment amount: 270.
2025-05-16 14:17:35.399 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 14:17:35.403 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.3, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 8.
2025-05-16 14:17:35.406 +05:30 [INF] Calculated investment amount: 155.67.
2025-05-16 14:17:35.410 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.2, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 8.
2025-05-16 14:17:35.415 +05:30 [INF] Calculated investment amount: 151.19.
2025-05-16 14:17:35.417 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 14:17:35.419 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.94, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 8.
2025-05-16 14:17:35.424 +05:30 [INF] Calculated investment amount: 173.69.
2025-05-16 14:17:35.426 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.06, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 8.
2025-05-16 14:17:35.428 +05:30 [INF] Calculated investment amount: 176.77.
2025-05-16 14:17:35.430 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 14:17:35.432 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.21, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 8.
2025-05-16 14:17:35.435 +05:30 [INF] Calculated investment amount: 144.
2025-05-16 14:17:35.436 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.29, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 8.
2025-05-16 14:17:35.440 +05:30 [INF] Calculated investment amount: 146.97.
2025-05-16 14:17:35.442 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 14:17:35.444 +05:30 [ERR] Invalid input detected: Percentage split must be between 1 and 100.
System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
2025-05-16 14:17:35.447 +05:30 [ERR] Error calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
2025-05-16 14:17:35.449 +05:30 [ERR] Error occurred while calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
   at WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations(AllocationResultDTO allocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Controllers\ProdAllocController.cs:line 106
2025-05-16 14:17:35.452 +05:30 [INF] Executing ObjectResult, writing value of type 'System.String'.
2025-05-16 14:17:35.452 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 102
2025-05-16 14:17:35.453 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 88.6822ms
2025-05-16 14:17:35.455 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:35.457 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:17:35.458 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:17:35.459 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - 500 null text/plain; charset=utf-8 110.876ms
2025-05-16 14:17:35.460 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:17:35.468 +05:30 [INF] Starting allocation calculation...
2025-05-16 14:17:35.470 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 14:17:35.471 +05:30 [INF] Looking up base allocation for key: Mid+Long
2025-05-16 14:17:35.471 +05:30 [INF] Base allocation found: {"equity":50,"fixedIncome":30,"commodities":10,"cash":5,"realEstate":5}
2025-05-16 14:17:35.473 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 14:17:35.474 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 14:17:35.475 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-16 14:17:35.476 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-16 14:17:35.478 +05:30 [INF] Sub-allocations for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 14:17:35.480 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 14:17:35.481 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 14:17:35.483 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 14:17:35.486 +05:30 [INF] Sub-allocations for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 14:17:35.487 +05:30 [INF] Added sub-assets for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 14:17:35.488 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 14:17:35.490 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 14:17:35.491 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 14:17:35.493 +05:30 [INF] Added sub-assets for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 14:17:35.495 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 14:17:35.497 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 14:17:35.498 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 14:17:35.499 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 14:17:35.501 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 33.2501ms
2025-05-16 14:17:35.503 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:17:35.504 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 51.5988ms
2025-05-16 14:17:35.506 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - application/json 483
2025-05-16 14:17:35.510 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:35.511 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:17:35.512 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:17:35.515 +05:30 [INF] Starting product allocation calculation.
2025-05-16 14:17:35.516 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 14:17:35.518 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 14:17:35.525 +05:30 [INF] Product data loaded successfully.
2025-05-16 14:17:35.526 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 14:17:35.528 +05:30 [INF] Calculating investment amount with PercentageSplit: 10.42, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 8.
2025-05-16 14:17:35.530 +05:30 [INF] Calculated investment amount: 486.1.
2025-05-16 14:17:35.532 +05:30 [INF] Calculating investment amount with PercentageSplit: 9.58, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 8.
2025-05-16 14:17:35.534 +05:30 [INF] Calculated investment amount: 473.79.
2025-05-16 14:17:35.535 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 14:17:35.537 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.98, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 8.
2025-05-16 14:17:35.538 +05:30 [INF] Calculated investment amount: 311.02.
2025-05-16 14:17:35.539 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.02, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 8.
2025-05-16 14:17:35.541 +05:30 [INF] Calculated investment amount: 304.62.
2025-05-16 14:17:35.543 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 14:17:35.544 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.72, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 8.
2025-05-16 14:17:35.545 +05:30 [INF] Calculated investment amount: 270.63.
2025-05-16 14:17:35.547 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.28, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 8.
2025-05-16 14:17:35.550 +05:30 [INF] Calculated investment amount: 270.
2025-05-16 14:17:35.551 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 14:17:35.552 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.3, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 8.
2025-05-16 14:17:35.555 +05:30 [INF] Calculated investment amount: 155.67.
2025-05-16 14:17:35.556 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.2, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 8.
2025-05-16 14:17:35.559 +05:30 [INF] Calculated investment amount: 151.19.
2025-05-16 14:17:35.560 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 14:17:35.562 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.94, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 8.
2025-05-16 14:17:35.564 +05:30 [INF] Calculated investment amount: 173.69.
2025-05-16 14:17:35.565 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.06, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 8.
2025-05-16 14:17:35.568 +05:30 [INF] Calculated investment amount: 176.77.
2025-05-16 14:17:35.570 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 14:17:35.572 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.21, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 8.
2025-05-16 14:17:35.574 +05:30 [INF] Calculated investment amount: 144.
2025-05-16 14:17:35.576 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.29, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 8.
2025-05-16 14:17:35.579 +05:30 [INF] Calculated investment amount: 146.97.
2025-05-16 14:17:35.580 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 14:17:35.582 +05:30 [ERR] Invalid input detected: Percentage split must be between 1 and 100.
System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
2025-05-16 14:17:35.585 +05:30 [ERR] Error calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
2025-05-16 14:17:35.588 +05:30 [ERR] Error occurred while calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
   at WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations(AllocationResultDTO allocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Controllers\ProdAllocController.cs:line 106
2025-05-16 14:17:35.592 +05:30 [INF] Executing ObjectResult, writing value of type 'System.String'.
2025-05-16 14:17:35.593 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 78.6112ms
2025-05-16 14:17:35.594 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:17:35.595 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - 500 null text/plain; charset=utf-8 89.0625ms
2025-05-16 14:17:35.653 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 102
2025-05-16 14:17:35.660 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:35.662 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:17:35.665 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:17:35.670 +05:30 [INF] Starting allocation calculation...
2025-05-16 14:17:35.672 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 14:17:35.673 +05:30 [INF] Looking up base allocation for key: Mid+Long
2025-05-16 14:17:35.675 +05:30 [INF] Base allocation found: {"equity":50,"fixedIncome":30,"commodities":10,"cash":5,"realEstate":5}
2025-05-16 14:17:35.676 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 14:17:35.677 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 14:17:35.677 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-16 14:17:35.679 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-16 14:17:35.681 +05:30 [INF] Sub-allocations for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 14:17:35.682 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 14:17:35.684 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 14:17:35.686 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 14:17:35.688 +05:30 [INF] Sub-allocations for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 14:17:35.689 +05:30 [INF] Added sub-assets for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 14:17:35.690 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 14:17:35.692 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 14:17:35.694 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 14:17:35.697 +05:30 [INF] Added sub-assets for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 14:17:35.699 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 14:17:35.702 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 14:17:35.704 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 14:17:35.705 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 14:17:35.707 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 37.9905ms
2025-05-16 14:17:35.709 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:17:35.710 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 57.5484ms
2025-05-16 14:17:35.713 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - application/json 483
2025-05-16 14:17:35.718 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:35.719 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:17:35.720 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:17:35.722 +05:30 [INF] Starting product allocation calculation.
2025-05-16 14:17:35.723 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 14:17:35.724 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 14:17:35.730 +05:30 [INF] Product data loaded successfully.
2025-05-16 14:17:35.732 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 14:17:35.734 +05:30 [INF] Calculating investment amount with PercentageSplit: 10.42, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 8.
2025-05-16 14:17:35.736 +05:30 [INF] Calculated investment amount: 486.1.
2025-05-16 14:17:35.737 +05:30 [INF] Calculating investment amount with PercentageSplit: 9.58, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 8.
2025-05-16 14:17:35.739 +05:30 [INF] Calculated investment amount: 473.79.
2025-05-16 14:17:35.740 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 14:17:35.742 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.98, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 8.
2025-05-16 14:17:35.744 +05:30 [INF] Calculated investment amount: 311.02.
2025-05-16 14:17:35.745 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.02, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 8.
2025-05-16 14:17:35.747 +05:30 [INF] Calculated investment amount: 304.62.
2025-05-16 14:17:35.749 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 14:17:35.750 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.72, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 8.
2025-05-16 14:17:35.753 +05:30 [INF] Calculated investment amount: 270.63.
2025-05-16 14:17:35.754 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.28, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 8.
2025-05-16 14:17:35.755 +05:30 [INF] Calculated investment amount: 270.
2025-05-16 14:17:35.757 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 14:17:35.759 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.3, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 8.
2025-05-16 14:17:35.762 +05:30 [INF] Calculated investment amount: 155.67.
2025-05-16 14:17:35.764 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.2, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 8.
2025-05-16 14:17:35.766 +05:30 [INF] Calculated investment amount: 151.19.
2025-05-16 14:17:35.768 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 14:17:35.770 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.94, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 8.
2025-05-16 14:17:35.772 +05:30 [INF] Calculated investment amount: 173.69.
2025-05-16 14:17:35.772 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.06, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 8.
2025-05-16 14:17:35.774 +05:30 [INF] Calculated investment amount: 176.77.
2025-05-16 14:17:35.775 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 14:17:35.776 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.21, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 8.
2025-05-16 14:17:35.778 +05:30 [INF] Calculated investment amount: 144.
2025-05-16 14:17:35.780 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.29, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 8.
2025-05-16 14:17:35.782 +05:30 [INF] Calculated investment amount: 146.97.
2025-05-16 14:17:35.784 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 14:17:35.785 +05:30 [ERR] Invalid input detected: Percentage split must be between 1 and 100.
System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
2025-05-16 14:17:35.787 +05:30 [ERR] Error calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
2025-05-16 14:17:35.790 +05:30 [ERR] Error occurred while calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
   at WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations(AllocationResultDTO allocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Controllers\ProdAllocController.cs:line 106
2025-05-16 14:17:35.793 +05:30 [INF] Executing ObjectResult, writing value of type 'System.String'.
2025-05-16 14:17:35.795 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 74.3444ms
2025-05-16 14:17:35.797 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:17:35.799 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - 500 null text/plain; charset=utf-8 86.0335ms
2025-05-16 14:17:35.868 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 102
2025-05-16 14:17:35.873 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:35.875 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:17:35.880 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:17:35.888 +05:30 [INF] Starting allocation calculation...
2025-05-16 14:17:35.892 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 14:17:35.895 +05:30 [INF] Looking up base allocation for key: Mid+Long
2025-05-16 14:17:35.897 +05:30 [INF] Base allocation found: {"equity":50,"fixedIncome":30,"commodities":10,"cash":5,"realEstate":5}
2025-05-16 14:17:35.899 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 14:17:35.900 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 14:17:35.902 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-16 14:17:35.904 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-16 14:17:35.905 +05:30 [INF] Sub-allocations for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 14:17:35.907 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 14:17:35.912 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 14:17:35.917 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 14:17:35.921 +05:30 [INF] Sub-allocations for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 14:17:35.922 +05:30 [INF] Added sub-assets for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 14:17:35.924 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 14:17:35.928 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 14:17:35.930 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 14:17:35.933 +05:30 [INF] Added sub-assets for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 14:17:35.935 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 14:17:35.938 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 14:17:35.940 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 14:17:35.941 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 14:17:35.945 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 57.7918ms
2025-05-16 14:17:35.949 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:17:35.953 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 84.884ms
2025-05-16 14:17:35.957 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - application/json 483
2025-05-16 14:17:35.963 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:35.964 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:17:35.969 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:17:35.974 +05:30 [INF] Starting product allocation calculation.
2025-05-16 14:17:35.977 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 14:17:35.979 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 14:17:35.986 +05:30 [INF] Product data loaded successfully.
2025-05-16 14:17:35.987 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 14:17:35.989 +05:30 [INF] Calculating investment amount with PercentageSplit: 10.42, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 8.
2025-05-16 14:17:35.991 +05:30 [INF] Calculated investment amount: 486.1.
2025-05-16 14:17:35.992 +05:30 [INF] Calculating investment amount with PercentageSplit: 9.58, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 8.
2025-05-16 14:17:35.994 +05:30 [INF] Calculated investment amount: 473.79.
2025-05-16 14:17:35.996 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 14:17:35.997 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.98, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 8.
2025-05-16 14:17:36.000 +05:30 [INF] Calculated investment amount: 311.02.
2025-05-16 14:17:36.001 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.02, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 8.
2025-05-16 14:17:36.004 +05:30 [INF] Calculated investment amount: 304.62.
2025-05-16 14:17:36.005 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 14:17:36.007 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.72, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 8.
2025-05-16 14:17:36.009 +05:30 [INF] Calculated investment amount: 270.63.
2025-05-16 14:17:36.010 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.28, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 8.
2025-05-16 14:17:36.013 +05:30 [INF] Calculated investment amount: 270.
2025-05-16 14:17:36.015 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 14:17:36.017 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.3, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 8.
2025-05-16 14:17:36.020 +05:30 [INF] Calculated investment amount: 155.67.
2025-05-16 14:17:36.021 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.2, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 8.
2025-05-16 14:17:36.024 +05:30 [INF] Calculated investment amount: 151.19.
2025-05-16 14:17:36.025 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 14:17:36.028 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.94, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 8.
2025-05-16 14:17:36.030 +05:30 [INF] Calculated investment amount: 173.69.
2025-05-16 14:17:36.032 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.06, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 8.
2025-05-16 14:17:36.034 +05:30 [INF] Calculated investment amount: 176.77.
2025-05-16 14:17:36.036 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 14:17:36.038 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.21, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 8.
2025-05-16 14:17:36.039 +05:30 [INF] Calculated investment amount: 144.
2025-05-16 14:17:36.040 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.29, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 8.
2025-05-16 14:17:36.043 +05:30 [INF] Calculated investment amount: 146.97.
2025-05-16 14:17:36.045 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 14:17:36.047 +05:30 [ERR] Invalid input detected: Percentage split must be between 1 and 100.
System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
2025-05-16 14:17:36.049 +05:30 [ERR] Error calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
2025-05-16 14:17:36.052 +05:30 [ERR] Error occurred while calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
   at WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations(AllocationResultDTO allocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Controllers\ProdAllocController.cs:line 106
2025-05-16 14:17:36.055 +05:30 [INF] Executing ObjectResult, writing value of type 'System.String'.
2025-05-16 14:17:36.056 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 84.2032ms
2025-05-16 14:17:36.059 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:17:36.060 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - 500 null text/plain; charset=utf-8 102.9192ms
2025-05-16 14:17:43.124 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-16 14:17:43.129 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:43.131 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 6.7851ms
2025-05-16 14:17:43.135 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 102
2025-05-16 14:17:43.140 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:43.142 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:17:43.148 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:17:43.154 +05:30 [INF] Starting allocation calculation...
2025-05-16 14:17:43.156 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 14:17:43.157 +05:30 [INF] Looking up base allocation for key: Mid+Long
2025-05-16 14:17:43.159 +05:30 [INF] Base allocation found: {"equity":50,"fixedIncome":30,"commodities":10,"cash":5,"realEstate":5}
2025-05-16 14:17:43.161 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 14:17:43.163 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 14:17:43.165 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-16 14:17:43.167 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-16 14:17:43.170 +05:30 [INF] Sub-allocations for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 14:17:43.171 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 14:17:43.172 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 14:17:43.173 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 14:17:43.175 +05:30 [INF] Sub-allocations for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 14:17:43.177 +05:30 [INF] Added sub-assets for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 14:17:43.178 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 14:17:43.180 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 14:17:43.181 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 14:17:43.183 +05:30 [INF] Added sub-assets for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 14:17:43.185 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 14:17:43.187 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 14:17:43.189 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 14:17:43.190 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 14:17:43.192 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 38.0799ms
2025-05-16 14:17:43.193 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:17:43.195 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 60.0627ms
2025-05-16 14:17:43.199 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - null null
2025-05-16 14:17:43.203 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:43.205 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - 204 null null 5.2009ms
2025-05-16 14:17:43.209 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - application/json 483
2025-05-16 14:17:43.213 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:43.215 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:17:43.216 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:17:43.219 +05:30 [INF] Starting product allocation calculation.
2025-05-16 14:17:43.221 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 14:17:43.222 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 14:17:43.228 +05:30 [INF] Product data loaded successfully.
2025-05-16 14:17:43.229 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 14:17:43.231 +05:30 [INF] Calculating investment amount with PercentageSplit: 10.42, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 8.
2025-05-16 14:17:43.234 +05:30 [INF] Calculated investment amount: 486.1.
2025-05-16 14:17:43.235 +05:30 [INF] Calculating investment amount with PercentageSplit: 9.58, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 8.
2025-05-16 14:17:43.238 +05:30 [INF] Calculated investment amount: 473.79.
2025-05-16 14:17:43.239 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 14:17:43.241 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.98, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 8.
2025-05-16 14:17:43.243 +05:30 [INF] Calculated investment amount: 311.02.
2025-05-16 14:17:43.245 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.02, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 8.
2025-05-16 14:17:43.247 +05:30 [INF] Calculated investment amount: 304.62.
2025-05-16 14:17:43.248 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 14:17:43.250 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.72, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 8.
2025-05-16 14:17:43.252 +05:30 [INF] Calculated investment amount: 270.63.
2025-05-16 14:17:43.254 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.28, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 8.
2025-05-16 14:17:43.256 +05:30 [INF] Calculated investment amount: 270.
2025-05-16 14:17:43.258 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 14:17:43.260 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.3, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 8.
2025-05-16 14:17:43.262 +05:30 [INF] Calculated investment amount: 155.67.
2025-05-16 14:17:43.264 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.2, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 8.
2025-05-16 14:17:43.266 +05:30 [INF] Calculated investment amount: 151.19.
2025-05-16 14:17:43.268 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 14:17:43.269 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.94, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 8.
2025-05-16 14:17:43.272 +05:30 [INF] Calculated investment amount: 173.69.
2025-05-16 14:17:43.273 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.06, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 8.
2025-05-16 14:17:43.276 +05:30 [INF] Calculated investment amount: 176.77.
2025-05-16 14:17:43.278 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 14:17:43.279 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.21, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 8.
2025-05-16 14:17:43.282 +05:30 [INF] Calculated investment amount: 144.
2025-05-16 14:17:43.283 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.29, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 8.
2025-05-16 14:17:43.286 +05:30 [INF] Calculated investment amount: 146.97.
2025-05-16 14:17:43.287 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 14:17:43.289 +05:30 [ERR] Invalid input detected: Percentage split must be between 1 and 100.
System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
2025-05-16 14:17:43.291 +05:30 [ERR] Error calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
2025-05-16 14:17:43.294 +05:30 [ERR] Error occurred while calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
   at WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations(AllocationResultDTO allocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Controllers\ProdAllocController.cs:line 106
2025-05-16 14:17:43.298 +05:30 [INF] Executing ObjectResult, writing value of type 'System.String'.
2025-05-16 14:17:43.300 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 81.4379ms
2025-05-16 14:17:43.302 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:17:43.304 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - 500 null text/plain; charset=utf-8 94.7907ms
2025-05-16 14:17:51.392 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-16 14:17:51.394 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:51.395 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 2.2437ms
2025-05-16 14:17:51.400 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 95
2025-05-16 14:17:51.403 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:51.404 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:17:51.406 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:17:51.408 +05:30 [INF] Starting allocation calculation...
2025-05-16 14:17:51.409 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 14:17:51.410 +05:30 [INF] Looking up base allocation for key: Low+Long
2025-05-16 14:17:51.411 +05:30 [INF] Base allocation found: {"equity":30,"fixedIncome":45,"commodities":10,"cash":10,"realEstate":5}
2025-05-16 14:17:51.411 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 14:17:51.412 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 14:17:51.412 +05:30 [INF] Looking up goal tuning for goal: Retirement
2025-05-16 14:17:51.413 +05:30 [INF] Goal tuning found: {"fixedIncome_boost":10,"realEstate_boost":5}
2025-05-16 14:17:51.418 +05:30 [INF] Sub-allocations for equity: {"Large Cap":25,"Mid Cap":10,"Small Cap":5}
2025-05-16 14:17:51.420 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":17.5,"Corp Bonds":7,"Fixed Dep":10.5}
2025-05-16 14:17:51.421 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":6.25,"Energy":2.5,"Agriculture":1.25}
2025-05-16 14:17:51.423 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":1.15,"Savings Acc":1.92,"T. Bill":1.92}
2025-05-16 14:17:51.425 +05:30 [INF] Sub-allocations for realEstate: {"REITs":4,"Residential Prop":4,"Commercial Prop":2}
2025-05-16 14:17:51.426 +05:30 [INF] Added sub-assets for equity: {"Large Cap":25,"Mid Cap":10,"Small Cap":5}
2025-05-16 14:17:51.428 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":17.5,"Corp Bonds":7,"Fixed Dep":10.5}
2025-05-16 14:17:51.429 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":6.25,"Energy":2.5,"Agriculture":1.25}
2025-05-16 14:17:51.431 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":1.15,"Savings Acc":1.92,"T. Bill":1.92}
2025-05-16 14:17:51.432 +05:30 [INF] Added sub-assets for realEstate: {"REITs":4,"Residential Prop":4,"Commercial Prop":2}
2025-05-16 14:17:51.433 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":40,"subAssets":{"Large Cap":25,"Mid Cap":10,"Small Cap":5}},"fixedIncome":{"percentage":35,"subAssets":{"Gov Bonds":17.5,"Corp Bonds":7,"Fixed Dep":10.5}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":6.25,"Energy":2.5,"Agriculture":1.25}},"cash":{"percentage":5,"subAssets":{"Liquid Mutual Funds":1.15,"Savings Acc":1.92,"T. Bill":1.92}},"realEstate":{"percentage":10,"subAssets":{"REITs":4,"Residential Prop":4,"Commercial Prop":2}}}
2025-05-16 14:17:51.435 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 14:17:51.437 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":40,"subAssets":{"Large Cap":25,"Mid Cap":10,"Small Cap":5}},"fixedIncome":{"percentage":35,"subAssets":{"Gov Bonds":17.5,"Corp Bonds":7,"Fixed Dep":10.5}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":6.25,"Energy":2.5,"Agriculture":1.25}},"cash":{"percentage":5,"subAssets":{"Liquid Mutual Funds":1.15,"Savings Acc":1.92,"T. Bill":1.92}},"realEstate":{"percentage":10,"subAssets":{"REITs":4,"Residential Prop":4,"Commercial Prop":2}}}
2025-05-16 14:17:51.437 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 14:17:51.440 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 32.256ms
2025-05-16 14:17:51.444 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:17:51.447 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 47.1429ms
2025-05-16 14:17:51.456 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - null null
2025-05-16 14:17:51.460 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:51.462 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - 204 null null 6.3515ms
2025-05-16 14:17:51.466 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - application/json 486
2025-05-16 14:17:51.470 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:51.470 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:17:51.471 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:17:51.475 +05:30 [INF] Starting product allocation calculation.
2025-05-16 14:17:51.476 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 14:17:51.478 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 14:17:51.484 +05:30 [INF] Product data loaded successfully.
2025-05-16 14:17:51.486 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 14:17:51.488 +05:30 [INF] Calculating investment amount with PercentageSplit: 13.02, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 8.
2025-05-16 14:17:51.490 +05:30 [INF] Calculated investment amount: 607.39.
2025-05-16 14:17:51.492 +05:30 [INF] Calculating investment amount with PercentageSplit: 11.98, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 8.
2025-05-16 14:17:51.494 +05:30 [INF] Calculated investment amount: 592.48.
2025-05-16 14:17:51.496 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 14:17:51.497 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.32, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 8.
2025-05-16 14:17:51.500 +05:30 [INF] Calculated investment amount: 207.34.
2025-05-16 14:17:51.502 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.68, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 8.
2025-05-16 14:17:51.504 +05:30 [INF] Calculated investment amount: 203.08.
2025-05-16 14:17:51.505 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 14:17:51.507 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.57, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 8.
2025-05-16 14:17:51.510 +05:30 [INF] Calculated investment amount: 90.09.
2025-05-16 14:17:51.511 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.43, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 8.
2025-05-16 14:17:51.514 +05:30 [INF] Calculated investment amount: 90.12.
2025-05-16 14:17:51.516 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 14:17:51.518 +05:30 [INF] Calculating investment amount with PercentageSplit: 8.93, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 8.
2025-05-16 14:17:51.521 +05:30 [INF] Calculated investment amount: 604.42.
2025-05-16 14:17:51.522 +05:30 [INF] Calculating investment amount with PercentageSplit: 8.57, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 8.
2025-05-16 14:17:51.525 +05:30 [INF] Calculated investment amount: 588.97.
2025-05-16 14:17:51.526 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 14:17:51.528 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.42, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 8.
2025-05-16 14:17:51.530 +05:30 [INF] Calculated investment amount: 202.05.
2025-05-16 14:17:51.532 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.58, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 8.
2025-05-16 14:17:51.535 +05:30 [INF] Calculated investment amount: 206.81.
2025-05-16 14:17:51.536 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 14:17:51.537 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.16, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 8.
2025-05-16 14:17:51.540 +05:30 [INF] Calculated investment amount: 336.23.
2025-05-16 14:17:51.541 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.34, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 8.
2025-05-16 14:17:51.544 +05:30 [INF] Calculated investment amount: 342.72.
2025-05-16 14:17:51.545 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 14:17:51.547 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.46, TargetAmount: 10000, AnnualReturn: 7.8, InvestmentHorizon: 8.
2025-05-16 14:17:51.549 +05:30 [INF] Calculated investment amount: 189.73.
2025-05-16 14:17:51.550 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.79, TargetAmount: 10000, AnnualReturn: 6.3, InvestmentHorizon: 8.
2025-05-16 14:17:51.553 +05:30 [INF] Calculated investment amount: 171.13.
2025-05-16 14:17:51.554 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Energy.
2025-05-16 14:17:51.555 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.18, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 8.
2025-05-16 14:17:51.557 +05:30 [INF] Calculated investment amount: 58.36.
2025-05-16 14:17:51.558 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.32, TargetAmount: 10000, AnnualReturn: 10.3, InvestmentHorizon: 8.
2025-05-16 14:17:51.561 +05:30 [INF] Calculated investment amount: 60.25.
2025-05-16 14:17:51.563 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Agriculture.
2025-05-16 14:17:51.564 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.69, TargetAmount: 10000, AnnualReturn: 8.5, InvestmentHorizon: 8.
2025-05-16 14:17:51.567 +05:30 [INF] Calculated investment amount: 35.93.
2025-05-16 14:17:51.569 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.56, TargetAmount: 10000, AnnualReturn: 7, InvestmentHorizon: 8.
2025-05-16 14:17:51.571 +05:30 [INF] Calculated investment amount: 32.59.
2025-05-16 14:17:51.571 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Liquid Mutual Funds.
2025-05-16 14:17:51.573 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.59, TargetAmount: 10000, AnnualReturn: 5.2, InvestmentHorizon: 8.
2025-05-16 14:17:51.576 +05:30 [INF] Calculated investment amount: 39.33.
2025-05-16 14:17:51.577 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.56, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 8.
2025-05-16 14:17:51.580 +05:30 [INF] Calculated investment amount: 37.9.
2025-05-16 14:17:51.582 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Savings Acc.
2025-05-16 14:17:51.584 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.9, TargetAmount: 10000, AnnualReturn: 3.5, InvestmentHorizon: 8.
2025-05-16 14:17:51.587 +05:30 [INF] Calculated investment amount: 68.35.
2025-05-16 14:17:51.587 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.02, TargetAmount: 10000, AnnualReturn: 4, InvestmentHorizon: 8.
2025-05-16 14:17:51.589 +05:30 [INF] Calculated investment amount: 74.53.
2025-05-16 14:17:51.591 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: T. Bill.
2025-05-16 14:17:51.592 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.93, TargetAmount: 10000, AnnualReturn: 5.1, InvestmentHorizon: 8.
2025-05-16 14:17:51.596 +05:30 [INF] Calculated investment amount: 62.47.
2025-05-16 14:17:51.597 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.99, TargetAmount: 10000, AnnualReturn: 5.4, InvestmentHorizon: 8.
2025-05-16 14:17:51.600 +05:30 [INF] Calculated investment amount: 65.
2025-05-16 14:17:51.602 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: REITs.
2025-05-16 14:17:51.603 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.93, TargetAmount: 10000, AnnualReturn: 8.9, InvestmentHorizon: 8.
2025-05-16 14:17:51.605 +05:30 [INF] Calculated investment amount: 97.57.
2025-05-16 14:17:51.606 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.07, TargetAmount: 10000, AnnualReturn: 9.5, InvestmentHorizon: 8.
2025-05-16 14:17:51.609 +05:30 [INF] Calculated investment amount: 100.15.
2025-05-16 14:17:51.611 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Residential Prop.
2025-05-16 14:17:51.613 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.91, TargetAmount: 10000, AnnualReturn: 6.7, InvestmentHorizon: 8.
2025-05-16 14:17:51.615 +05:30 [INF] Calculated investment amount: 113.69.
2025-05-16 14:17:51.617 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.09, TargetAmount: 10000, AnnualReturn: 7.3, InvestmentHorizon: 8.
2025-05-16 14:17:51.620 +05:30 [INF] Calculated investment amount: 118.95.
2025-05-16 14:17:51.621 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Commercial Prop.
2025-05-16 14:17:51.623 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.02, TargetAmount: 10000, AnnualReturn: 10.2, InvestmentHorizon: 8.
2025-05-16 14:17:51.626 +05:30 [INF] Calculated investment amount: 46.9.
2025-05-16 14:17:51.627 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.98, TargetAmount: 10000, AnnualReturn: 9.8, InvestmentHorizon: 8.
2025-05-16 14:17:51.631 +05:30 [INF] Calculated investment amount: 46.39.
2025-05-16 14:17:51.648 +05:30 [INF] Product allocations saved successfully to ProductAllocations.json
2025-05-16 14:17:51.652 +05:30 [INF] Final Product Allocations: {"equity":{"Large Cap":{"BlueChip Fund ":{"product_name":"BlueChip Fund ","annual_return":10,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Stable returns","Low risk"],"cons":["Lower growth"],"risk_level":"Low","percentage_split":13.02,"InvestmentAmount":607.39},"Index Fund ":{"product_name":"Index Fund ","annual_return":9.2,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Diversified","Low cost"],"cons":["Market dependent"],"risk_level":"Moderate","percentage_split":11.98,"InvestmentAmount":592.48}},"Mid Cap":{"Mid Cap Growth ":{"product_name":"Mid Cap Growth ","annual_return":12.5,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["High growth potential"],"cons":["Volatile"],"risk_level":"High","percentage_split":5.32,"InvestmentAmount":207.34},"MidCap Blend ":{"product_name":"MidCap Blend ","annual_return":11,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["Balanced approach"],"cons":["Moderate risk"],"risk_level":"Moderate","percentage_split":4.68,"InvestmentAmount":203.08}},"Small Cap":{"SmallCap Aggressive ":{"product_name":"SmallCap Aggressive ","annual_return":14,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Medium","pros":["High return potential"],"cons":["Very volatile"],"risk_level":"High","percentage_split":2.57,"InvestmentAmount":90.09},"Emerging Companies ":{"product_name":"Emerging Companies ","annual_return":13.2,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Low","pros":["Growth stocks"],"cons":["Liquidity risk"],"risk_level":"High","percentage_split":2.43,"InvestmentAmount":90.12}}},"fixedIncome":{"Gov Bonds":{"Government Bond ":{"product_name":"Government Bond ","annual_return":5,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Very safe","Guaranteed return"],"cons":["Low return"],"risk_level":"Low","percentage_split":8.93,"InvestmentAmount":604.42},"Sovereign Bond ":{"product_name":"Sovereign Bond ","annual_return":4.8,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Stable income"],"cons":["Interest rate sensitive"],"risk_level":"Low","percentage_split":8.57,"InvestmentAmount":588.97}},"Corp Bonds":{"Corporate Bond ":{"product_name":"Corporate Bond ","annual_return":6.8,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Better return"],"cons":["Company risk"],"risk_level":"Moderate","percentage_split":3.42,"InvestmentAmount":202.05},"Private Corp Bond ":{"product_name":"Private Corp Bond ","annual_return":7.1,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Good yield"],"cons":["Credit risk"],"risk_level":"High","percentage_split":3.58,"InvestmentAmount":206.81}},"Fixed Dep":{"Fixed Deposit ":{"product_name":"Fixed Deposit ","annual_return":5.5,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Capital safety"],"cons":["Low returns"],"risk_level":"Low","percentage_split":5.16,"InvestmentAmount":336.23},"Bank FD ":{"product_name":"Bank FD ","annual_return":5.7,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Easy access"],"cons":["Taxable"],"risk_level":"Low","percentage_split":5.34,"InvestmentAmount":342.72}}},"commodities":{"Precious Metals":{"Gold ETF":{"product_name":"Gold ETF","annual_return":7.8,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Inflation hedge","Safe haven asset"],"cons":["No income generation","Price volatility"],"risk_level":"Moderate","percentage_split":3.46,"InvestmentAmount":189.73},"Silver Trust":{"product_name":"Silver Trust","annual_return":6.3,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Alternative investment","Deflation hedge"],"cons":["Subject to price swings","Not income-producing"],"risk_level":"Moderate","percentage_split":2.79,"InvestmentAmount":171.13}},"Energy":{"Energy Fund":{"product_name":"Energy Fund","annual_return":9.2,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["High demand","Diversified exposure"],"cons":["Subject to price fluctuations","Geopolitical risks"],"risk_level":"Moderate","percentage_split":1.18,"InvestmentAmount":58.36},"Oil \u0026 Gas ETF":{"product_name":"Oil \u0026 Gas ETF","annual_return":10.3,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["Strong returns","Global demand"],"cons":["Environmental impact","Political risk"],"risk_level":"High","percentage_split":1.32,"InvestmentAmount":60.25}},"Agriculture":{"Agricultural ETF":{"product_name":"Agricultural ETF","annual_return":8.5,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Diversification","Growth potential"],"cons":["Weather dependent","Global supply issues"],"risk_level":"Moderate","percentage_split":0.69,"InvestmentAmount":35.93},"Crop Futures B":{"product_name":"Crop Futures B","annual_return":7,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Alternative to stocks","Hedge against inflation"],"cons":["Market volatility","Weather sensitivity"],"risk_level":"Moderate","percentage_split":0.56,"InvestmentAmount":32.59}}},"cash":{"Liquid Mutual Funds":{"Liquid Fund":{"product_name":"Liquid Fund","annual_return":5.2,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Quick redemption","Low risk"],"cons":["Lower returns","Short-term horizon"],"risk_level":"Low","percentage_split":0.59,"InvestmentAmount":39.33},"Ultra Short Fund":{"product_name":"Ultra Short Fund","annual_return":5,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Better returns than savings","High liquidity"],"cons":["Interest rate risk","Short-term only"],"risk_level":"Low","percentage_split":0.56,"InvestmentAmount":37.9}},"Savings Acc":{"Standard Savings Account":{"product_name":"Standard Savings Account","annual_return":3.5,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Very liquid","Capital safety"],"cons":["Very low returns","Not suitable for growth"],"risk_level":"Low","percentage_split":0.9,"InvestmentAmount":68.35},"High Interest Savings":{"product_name":"High Interest Savings","annual_return":4,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Slightly higher returns","Safe and accessible"],"cons":["Still low returns","Inflation risk"],"risk_level":"Low","percentage_split":1.02,"InvestmentAmount":74.53}},"T. Bill":{"91-Day T-Bill":{"product_name":"91-Day T-Bill","annual_return":5.1,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Government backed","Low risk"],"cons":["Fixed tenure","Lower yield"],"risk_level":"Low","percentage_split":0.93,"InvestmentAmount":62.47},"182-Day T-Bill":{"product_name":"182-Day T-Bill","annual_return":5.4,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Safe investment","Short maturity"],"cons":["Not liquid before maturity","Limited returns"],"risk_level":"Low","percentage_split":0.99,"InvestmentAmount":65}}},"realEstate":{"REITs":{"REITs Trust ":{"product_name":"REITs Trust ","annual_return":8.9,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"Moderate","pros":["Stable returns","Diversified portfolio"],"cons":["Sensitive to interest rates","Limited growth"],"risk_level":"Moderate","percentage_split":1.93,"InvestmentAmount":97.57},"Vanguad Real Estate":{"product_name":"Vanguad Real Estate","annual_return":9.5,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"High","pros":["Tax efficiency","Regular income"],"cons":["Market volatility","Fees"],"risk_level":"High","percentage_split":2.07,"InvestmentAmount":100.15}},"Residential Prop":{"Residential Scheme ":{"product_name":"Residential Scheme ","annual_return":6.7,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Low","pros":["Stable income","Low volatility"],"cons":["Low liquidity","Maintenance costs"],"risk_level":"Low","percentage_split":1.91,"InvestmentAmount":113.69},"Housing Fund":{"product_name":"Housing Fund","annual_return":7.3,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Moderate","pros":["Tax benefits","Long-term growth"],"cons":["Location dependent","Slow ROI"],"risk_level":"Moderate","percentage_split":2.09,"InvestmentAmount":118.95}},"Commercial Prop":{"Commercial Plaza":{"product_name":"Commercial Plaza","annual_return":10.2,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Low","pros":["High rental yields","Strong appreciation"],"cons":["High initial cost","Vacancy risk"],"risk_level":"High","percentage_split":1.02,"InvestmentAmount":46.9},"Office Fund":{"product_name":"Office Fund","annual_return":9.8,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Moderate","pros":["Steady returns","Long leases"],"cons":["Tenant turnover","High maintenance"],"risk_level":"High","percentage_split":0.98,"InvestmentAmount":46.39}}}}
2025-05-16 14:17:51.655 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:17:51.661 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 186.7185ms
2025-05-16 14:17:51.663 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:17:51.664 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=8 - 200 null application/json; charset=utf-8 197.8372ms
2025-05-16 14:17:51.674 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:17:51.674 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:17:51.676 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:51.677 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:51.679 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 4.4518ms
2025-05-16 14:17:51.678 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 3.9921ms
2025-05-16 14:17:51.681 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:17:51.685 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:17:51.695 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:51.695 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:17:51.695 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:17:51.696 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:17:51.705 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:17:51.705 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:17:51.709 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 14:17:51.712 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 14:17:51.713 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 14:17:51.715 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 14:17:51.717 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:17:51.719 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:17:51.720 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 10.6747ms
2025-05-16 14:17:51.722 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:17:51.723 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 37.4407ms
2025-05-16 14:17:51.727 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 19.1364ms
2025-05-16 14:17:51.731 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:17:51.731 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 49.9981ms
2025-05-16 14:18:19.526 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:18:19.526 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:18:19.729 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:18:19.733 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:18:19.737 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 211.1462ms
2025-05-16 14:18:19.739 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 212.1833ms
2025-05-16 14:18:19.742 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:18:19.745 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:18:19.746 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:18:19.749 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:18:19.758 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:18:19.749 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:18:19.759 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:18:19.760 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:18:19.764 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 14:18:19.766 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 14:18:19.769 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 14:18:19.771 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 14:18:19.772 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:18:19.772 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:18:19.773 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 8.6709ms
2025-05-16 14:18:19.773 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 7.6121ms
2025-05-16 14:18:19.774 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:18:19.775 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:18:19.776 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 30.5302ms
2025-05-16 14:18:19.776 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 34.7419ms
2025-05-16 14:36:03.192 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:36:03.192 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:36:03.196 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:36:03.198 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:36:03.199 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 7.3849ms
2025-05-16 14:36:03.199 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 7.3984ms
2025-05-16 14:36:03.204 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:36:03.209 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:36:03.213 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:36:03.216 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:36:03.217 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:36:03.217 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:36:03.218 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:36:03.219 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:36:03.221 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 14:36:03.224 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 14:36:03.227 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 14:36:03.228 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 14:36:03.228 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:36:03.229 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:36:03.231 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 6.8863ms
2025-05-16 14:36:03.233 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 12.1229ms
2025-05-16 14:36:03.234 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:36:03.236 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:36:03.238 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 28.8413ms
2025-05-16 14:36:03.239 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 34.4532ms
2025-05-16 14:36:53.447 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-16 14:36:53.450 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:36:53.452 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 5.8473ms
2025-05-16 14:36:53.458 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 64
2025-05-16 14:36:53.461 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:36:53.462 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-16 14:36:53.464 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-16 14:36:53.704 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType1`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:36:53.706 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 240.2435ms
2025-05-16 14:36:53.708 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-16 14:36:53.710 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 200 null application/json; charset=utf-8 251.3334ms
2025-05-16 14:37:06.369 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-16 14:37:06.373 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:37:06.375 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 6.0042ms
2025-05-16 14:37:06.379 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 95
2025-05-16 14:37:06.383 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:37:06.383 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:37:06.384 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:37:06.385 +05:30 [INF] Starting allocation calculation...
2025-05-16 14:37:06.391 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 14:37:06.392 +05:30 [INF] Looking up base allocation for key: Low+Short
2025-05-16 14:37:06.395 +05:30 [INF] Base allocation found: {"equity":10,"fixedIncome":40,"commodities":5,"cash":40,"realEstate":5}
2025-05-16 14:37:06.397 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 14:37:06.398 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 14:37:06.401 +05:30 [INF] Looking up goal tuning for goal: Retirement
2025-05-16 14:37:06.403 +05:30 [INF] Goal tuning found: {"fixedIncome_boost":10,"realEstate_boost":5}
2025-05-16 14:37:06.408 +05:30 [INF] Sub-allocations for equity: {"Large Cap":12.5,"Mid Cap":5,"Small Cap":2.5}
2025-05-16 14:37:06.411 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":15,"Corp Bonds":6,"Fixed Dep":9}
2025-05-16 14:37:06.414 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":3.12,"Energy":1.25,"Agriculture":0.62}
2025-05-16 14:37:06.416 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":8.08,"Savings Acc":13.46,"T. Bill":13.46}
2025-05-16 14:37:06.417 +05:30 [INF] Sub-allocations for realEstate: {"REITs":4,"Residential Prop":4,"Commercial Prop":2}
2025-05-16 14:37:06.419 +05:30 [INF] Added sub-assets for equity: {"Large Cap":12.5,"Mid Cap":5,"Small Cap":2.5}
2025-05-16 14:37:06.420 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":15,"Corp Bonds":6,"Fixed Dep":9}
2025-05-16 14:37:06.421 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":3.12,"Energy":1.25,"Agriculture":0.62}
2025-05-16 14:37:06.423 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":8.08,"Savings Acc":13.46,"T. Bill":13.46}
2025-05-16 14:37:06.425 +05:30 [INF] Added sub-assets for realEstate: {"REITs":4,"Residential Prop":4,"Commercial Prop":2}
2025-05-16 14:37:06.426 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":20,"subAssets":{"Large Cap":12.5,"Mid Cap":5,"Small Cap":2.5}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":15,"Corp Bonds":6,"Fixed Dep":9}},"commodities":{"percentage":5,"subAssets":{"Precious Metals":3.12,"Energy":1.25,"Agriculture":0.62}},"cash":{"percentage":35,"subAssets":{"Liquid Mutual Funds":8.08,"Savings Acc":13.46,"T. Bill":13.46}},"realEstate":{"percentage":10,"subAssets":{"REITs":4,"Residential Prop":4,"Commercial Prop":2}}}
2025-05-16 14:37:06.435 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 14:37:06.436 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":20,"subAssets":{"Large Cap":12.5,"Mid Cap":5,"Small Cap":2.5}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":15,"Corp Bonds":6,"Fixed Dep":9}},"commodities":{"percentage":5,"subAssets":{"Precious Metals":3.12,"Energy":1.25,"Agriculture":0.62}},"cash":{"percentage":35,"subAssets":{"Liquid Mutual Funds":8.08,"Savings Acc":13.46,"T. Bill":13.46}},"realEstate":{"percentage":10,"subAssets":{"REITs":4,"Residential Prop":4,"Commercial Prop":2}}}
2025-05-16 14:37:06.437 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 14:37:06.440 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 54.8801ms
2025-05-16 14:37:06.441 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 14:37:06.443 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 63.5589ms
2025-05-16 14:37:06.447 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=2 - null null
2025-05-16 14:37:06.452 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:37:06.452 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=2 - 204 null null 5.0147ms
2025-05-16 14:37:06.457 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=2 - application/json 487
2025-05-16 14:37:06.461 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:37:06.462 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:37:06.464 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:37:06.467 +05:30 [INF] Starting product allocation calculation.
2025-05-16 14:37:06.469 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 14:37:06.472 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 14:37:06.477 +05:30 [INF] Product data loaded successfully.
2025-05-16 14:37:06.478 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 14:37:06.480 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.51, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 2.
2025-05-16 14:37:06.483 +05:30 [INF] Calculated investment amount: 538.02.
2025-05-16 14:37:06.484 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.99, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 2.
2025-05-16 14:37:06.486 +05:30 [INF] Calculated investment amount: 502.32.
2025-05-16 14:37:06.488 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 14:37:06.489 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.66, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 2.
2025-05-16 14:37:06.492 +05:30 [INF] Calculated investment amount: 210.17.
2025-05-16 14:37:06.493 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.34, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 2.
2025-05-16 14:37:06.496 +05:30 [INF] Calculated investment amount: 189.92.
2025-05-16 14:37:06.498 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 14:37:06.500 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.29, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 2.
2025-05-16 14:37:06.502 +05:30 [INF] Calculated investment amount: 99.26.
2025-05-16 14:37:06.504 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.21, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 2.
2025-05-16 14:37:06.506 +05:30 [INF] Calculated investment amount: 94.43.
2025-05-16 14:37:06.507 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 14:37:06.509 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.65, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 2.
2025-05-16 14:37:06.511 +05:30 [INF] Calculated investment amount: 693.88.
2025-05-16 14:37:06.512 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.35, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 2.
2025-05-16 14:37:06.515 +05:30 [INF] Calculated investment amount: 669.21.
2025-05-16 14:37:06.517 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 14:37:06.519 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.94, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 2.
2025-05-16 14:37:06.520 +05:30 [INF] Calculated investment amount: 257.75.
2025-05-16 14:37:06.521 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.06, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 2.
2025-05-16 14:37:06.524 +05:30 [INF] Calculated investment amount: 266.77.
2025-05-16 14:37:06.525 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 14:37:06.526 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.42, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 2.
2025-05-16 14:37:06.527 +05:30 [INF] Calculated investment amount: 397.12.
2025-05-16 14:37:06.528 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.58, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 2.
2025-05-16 14:37:06.531 +05:30 [INF] Calculated investment amount: 409.94.
2025-05-16 14:37:06.532 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 14:37:06.534 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.73, TargetAmount: 10000, AnnualReturn: 7.8, InvestmentHorizon: 2.
2025-05-16 14:37:06.536 +05:30 [INF] Calculated investment amount: 148.87.
2025-05-16 14:37:06.537 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.39, TargetAmount: 10000, AnnualReturn: 6.3, InvestmentHorizon: 2.
2025-05-16 14:37:06.539 +05:30 [INF] Calculated investment amount: 123.01.
2025-05-16 14:37:06.541 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Energy.
2025-05-16 14:37:06.543 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.59, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 2.
2025-05-16 14:37:06.545 +05:30 [INF] Calculated investment amount: 49.48.
2025-05-16 14:37:06.546 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.66, TargetAmount: 10000, AnnualReturn: 10.3, InvestmentHorizon: 2.
2025-05-16 14:37:06.549 +05:30 [INF] Calculated investment amount: 54.25.
2025-05-16 14:37:06.550 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Agriculture.
2025-05-16 14:37:06.552 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.34, TargetAmount: 10000, AnnualReturn: 8.5, InvestmentHorizon: 2.
2025-05-16 14:37:06.554 +05:30 [INF] Calculated investment amount: 28.88.
2025-05-16 14:37:06.556 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.28, TargetAmount: 10000, AnnualReturn: 7, InvestmentHorizon: 2.
2025-05-16 14:37:06.559 +05:30 [INF] Calculated investment amount: 24.46.
2025-05-16 14:37:06.560 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Liquid Mutual Funds.
2025-05-16 14:37:06.561 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.12, TargetAmount: 10000, AnnualReturn: 5.2, InvestmentHorizon: 2.
2025-05-16 14:37:06.564 +05:30 [INF] Calculated investment amount: 372.28.
2025-05-16 14:37:06.566 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.96, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 2.
2025-05-16 14:37:06.569 +05:30 [INF] Calculated investment amount: 359.18.
2025-05-16 14:37:06.570 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Savings Acc.
2025-05-16 14:37:06.571 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.28, TargetAmount: 10000, AnnualReturn: 3.5, InvestmentHorizon: 2.
2025-05-16 14:37:06.574 +05:30 [INF] Calculated investment amount: 586.24.
2025-05-16 14:37:06.576 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.18, TargetAmount: 10000, AnnualReturn: 4, InvestmentHorizon: 2.
2025-05-16 14:37:06.579 +05:30 [INF] Calculated investment amount: 663.83.
2025-05-16 14:37:06.580 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: T. Bill.
2025-05-16 14:37:06.582 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.54, TargetAmount: 10000, AnnualReturn: 5.1, InvestmentHorizon: 2.
2025-05-16 14:37:06.585 +05:30 [INF] Calculated investment amount: 592.07.
2025-05-16 14:37:06.586 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.92, TargetAmount: 10000, AnnualReturn: 5.4, InvestmentHorizon: 2.
2025-05-16 14:37:06.589 +05:30 [INF] Calculated investment amount: 622.91.
2025-05-16 14:37:06.590 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: REITs.
2025-05-16 14:37:06.592 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.93, TargetAmount: 10000, AnnualReturn: 8.9, InvestmentHorizon: 2.
2025-05-16 14:37:06.594 +05:30 [INF] Calculated investment amount: 162.74.
2025-05-16 14:37:06.596 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.07, TargetAmount: 10000, AnnualReturn: 9.5, InvestmentHorizon: 2.
2025-05-16 14:37:06.599 +05:30 [INF] Calculated investment amount: 172.64.
2025-05-16 14:37:06.600 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Residential Prop.
2025-05-16 14:37:06.602 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.91, TargetAmount: 10000, AnnualReturn: 6.7, InvestmentHorizon: 2.
2025-05-16 14:37:06.604 +05:30 [INF] Calculated investment amount: 167.77.
2025-05-16 14:37:06.606 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.09, TargetAmount: 10000, AnnualReturn: 7.3, InvestmentHorizon: 2.
2025-05-16 14:37:06.609 +05:30 [INF] Calculated investment amount: 181.53.
2025-05-16 14:37:06.610 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Commercial Prop.
2025-05-16 14:37:06.612 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.02, TargetAmount: 10000, AnnualReturn: 10.2, InvestmentHorizon: 2.
2025-05-16 14:37:06.616 +05:30 [INF] Calculated investment amount: 83.99.
2025-05-16 14:37:06.618 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.98, TargetAmount: 10000, AnnualReturn: 9.8, InvestmentHorizon: 2.
2025-05-16 14:37:06.620 +05:30 [INF] Calculated investment amount: 81.29.
2025-05-16 14:37:06.628 +05:30 [INF] Product allocations saved successfully to ProductAllocations.json
2025-05-16 14:37:06.630 +05:30 [INF] Final Product Allocations: {"equity":{"Large Cap":{"BlueChip Fund ":{"product_name":"BlueChip Fund ","annual_return":10,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Stable returns","Low risk"],"cons":["Lower growth"],"risk_level":"Low","percentage_split":6.51,"InvestmentAmount":538.02},"Index Fund ":{"product_name":"Index Fund ","annual_return":9.2,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Diversified","Low cost"],"cons":["Market dependent"],"risk_level":"Moderate","percentage_split":5.99,"InvestmentAmount":502.32}},"Mid Cap":{"Mid Cap Growth ":{"product_name":"Mid Cap Growth ","annual_return":12.5,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["High growth potential"],"cons":["Volatile"],"risk_level":"High","percentage_split":2.66,"InvestmentAmount":210.17},"MidCap Blend ":{"product_name":"MidCap Blend ","annual_return":11,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["Balanced approach"],"cons":["Moderate risk"],"risk_level":"Moderate","percentage_split":2.34,"InvestmentAmount":189.92}},"Small Cap":{"SmallCap Aggressive ":{"product_name":"SmallCap Aggressive ","annual_return":14,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Medium","pros":["High return potential"],"cons":["Very volatile"],"risk_level":"High","percentage_split":1.29,"InvestmentAmount":99.26},"Emerging Companies ":{"product_name":"Emerging Companies ","annual_return":13.2,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Low","pros":["Growth stocks"],"cons":["Liquidity risk"],"risk_level":"High","percentage_split":1.21,"InvestmentAmount":94.43}}},"fixedIncome":{"Gov Bonds":{"Government Bond ":{"product_name":"Government Bond ","annual_return":5,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Very safe","Guaranteed return"],"cons":["Low return"],"risk_level":"Low","percentage_split":7.65,"InvestmentAmount":693.88},"Sovereign Bond ":{"product_name":"Sovereign Bond ","annual_return":4.8,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Stable income"],"cons":["Interest rate sensitive"],"risk_level":"Low","percentage_split":7.35,"InvestmentAmount":669.21}},"Corp Bonds":{"Corporate Bond ":{"product_name":"Corporate Bond ","annual_return":6.8,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Better return"],"cons":["Company risk"],"risk_level":"Moderate","percentage_split":2.94,"InvestmentAmount":257.75},"Private Corp Bond ":{"product_name":"Private Corp Bond ","annual_return":7.1,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Good yield"],"cons":["Credit risk"],"risk_level":"High","percentage_split":3.06,"InvestmentAmount":266.77}},"Fixed Dep":{"Fixed Deposit ":{"product_name":"Fixed Deposit ","annual_return":5.5,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Capital safety"],"cons":["Low returns"],"risk_level":"Low","percentage_split":4.42,"InvestmentAmount":397.12},"Bank FD ":{"product_name":"Bank FD ","annual_return":5.7,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Easy access"],"cons":["Taxable"],"risk_level":"Low","percentage_split":4.58,"InvestmentAmount":409.94}}},"commodities":{"Precious Metals":{"Gold ETF":{"product_name":"Gold ETF","annual_return":7.8,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Inflation hedge","Safe haven asset"],"cons":["No income generation","Price volatility"],"risk_level":"Moderate","percentage_split":1.73,"InvestmentAmount":148.87},"Silver Trust":{"product_name":"Silver Trust","annual_return":6.3,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Alternative investment","Deflation hedge"],"cons":["Subject to price swings","Not income-producing"],"risk_level":"Moderate","percentage_split":1.39,"InvestmentAmount":123.01}},"Energy":{"Energy Fund":{"product_name":"Energy Fund","annual_return":9.2,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["High demand","Diversified exposure"],"cons":["Subject to price fluctuations","Geopolitical risks"],"risk_level":"Moderate","percentage_split":0.59,"InvestmentAmount":49.48},"Oil \u0026 Gas ETF":{"product_name":"Oil \u0026 Gas ETF","annual_return":10.3,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["Strong returns","Global demand"],"cons":["Environmental impact","Political risk"],"risk_level":"High","percentage_split":0.66,"InvestmentAmount":54.25}},"Agriculture":{"Agricultural ETF":{"product_name":"Agricultural ETF","annual_return":8.5,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Diversification","Growth potential"],"cons":["Weather dependent","Global supply issues"],"risk_level":"Moderate","percentage_split":0.34,"InvestmentAmount":28.88},"Crop Futures B":{"product_name":"Crop Futures B","annual_return":7,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Alternative to stocks","Hedge against inflation"],"cons":["Market volatility","Weather sensitivity"],"risk_level":"Moderate","percentage_split":0.28,"InvestmentAmount":24.46}}},"cash":{"Liquid Mutual Funds":{"Liquid Fund":{"product_name":"Liquid Fund","annual_return":5.2,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Quick redemption","Low risk"],"cons":["Lower returns","Short-term horizon"],"risk_level":"Low","percentage_split":4.12,"InvestmentAmount":372.28},"Ultra Short Fund":{"product_name":"Ultra Short Fund","annual_return":5,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Better returns than savings","High liquidity"],"cons":["Interest rate risk","Short-term only"],"risk_level":"Low","percentage_split":3.96,"InvestmentAmount":359.18}},"Savings Acc":{"Standard Savings Account":{"product_name":"Standard Savings Account","annual_return":3.5,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Very liquid","Capital safety"],"cons":["Very low returns","Not suitable for growth"],"risk_level":"Low","percentage_split":6.28,"InvestmentAmount":586.24},"High Interest Savings":{"product_name":"High Interest Savings","annual_return":4,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Slightly higher returns","Safe and accessible"],"cons":["Still low returns","Inflation risk"],"risk_level":"Low","percentage_split":7.18,"InvestmentAmount":663.83}},"T. Bill":{"91-Day T-Bill":{"product_name":"91-Day T-Bill","annual_return":5.1,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Government backed","Low risk"],"cons":["Fixed tenure","Lower yield"],"risk_level":"Low","percentage_split":6.54,"InvestmentAmount":592.07},"182-Day T-Bill":{"product_name":"182-Day T-Bill","annual_return":5.4,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Safe investment","Short maturity"],"cons":["Not liquid before maturity","Limited returns"],"risk_level":"Low","percentage_split":6.92,"InvestmentAmount":622.91}}},"realEstate":{"REITs":{"REITs Trust ":{"product_name":"REITs Trust ","annual_return":8.9,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"Moderate","pros":["Stable returns","Diversified portfolio"],"cons":["Sensitive to interest rates","Limited growth"],"risk_level":"Moderate","percentage_split":1.93,"InvestmentAmount":162.74},"Vanguad Real Estate":{"product_name":"Vanguad Real Estate","annual_return":9.5,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"High","pros":["Tax efficiency","Regular income"],"cons":["Market volatility","Fees"],"risk_level":"High","percentage_split":2.07,"InvestmentAmount":172.64}},"Residential Prop":{"Residential Scheme ":{"product_name":"Residential Scheme ","annual_return":6.7,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Low","pros":["Stable income","Low volatility"],"cons":["Low liquidity","Maintenance costs"],"risk_level":"Low","percentage_split":1.91,"InvestmentAmount":167.77},"Housing Fund":{"product_name":"Housing Fund","annual_return":7.3,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Moderate","pros":["Tax benefits","Long-term growth"],"cons":["Location dependent","Slow ROI"],"risk_level":"Moderate","percentage_split":2.09,"InvestmentAmount":181.53}},"Commercial Prop":{"Commercial Plaza":{"product_name":"Commercial Plaza","annual_return":10.2,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Low","pros":["High rental yields","Strong appreciation"],"cons":["High initial cost","Vacancy risk"],"risk_level":"High","percentage_split":1.02,"InvestmentAmount":83.99},"Office Fund":{"product_name":"Office Fund","annual_return":9.8,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Moderate","pros":["Steady returns","Long leases"],"cons":["Tenant turnover","High maintenance"],"risk_level":"High","percentage_split":0.98,"InvestmentAmount":81.29}}}}
2025-05-16 14:37:06.635 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:37:06.637 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 171.1589ms
2025-05-16 14:37:06.640 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 14:37:06.641 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=2 - 200 null application/json; charset=utf-8 183.5286ms
2025-05-16 14:37:06.651 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:37:06.652 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:37:06.655 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:37:06.656 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:37:06.656 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 4.5759ms
2025-05-16 14:37:06.661 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:37:06.656 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 4.92ms
2025-05-16 14:37:06.664 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:37:06.669 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:37:06.670 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:37:06.676 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:37:06.677 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:37:06.678 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:37:06.681 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 14:37:06.682 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:37:06.684 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 14:37:06.685 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 14:37:06.686 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:37:06.687 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 14:37:06.688 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 6.9234ms
2025-05-16 14:37:06.690 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:37:06.691 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:37:06.692 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 6.7473ms
2025-05-16 14:37:06.693 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 31.9337ms
2025-05-16 14:37:06.693 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:37:06.698 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 29.1697ms
2025-05-16 14:38:34.440 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:38:34.441 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:38:34.445 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:38:34.449 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:38:34.452 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 12.0002ms
2025-05-16 14:38:34.453 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 12.7319ms
2025-05-16 14:38:34.457 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:38:34.461 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:38:34.463 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:38:34.466 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:38:34.466 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:38:34.468 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:38:34.467 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:38:34.471 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 14:38:34.473 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:38:34.476 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 14:38:34.477 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 14:38:34.480 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:38:34.482 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 14:38:34.485 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 13.2356ms
2025-05-16 14:38:34.485 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:38:34.487 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:38:34.488 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 11.0039ms
2025-05-16 14:38:34.491 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 33.8492ms
2025-05-16 14:38:34.493 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:38:34.507 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 45.82ms
2025-05-16 14:40:02.358 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:40:02.358 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:40:02.366 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:40:02.369 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:40:02.370 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 11.4647ms
2025-05-16 14:40:02.370 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 12.236ms
2025-05-16 14:40:02.373 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:40:02.377 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:40:02.384 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:40:02.386 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:40:02.386 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:40:02.387 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:40:02.388 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:40:02.388 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:40:02.390 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 14:40:02.392 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 14:40:02.393 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 14:40:02.393 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 14:40:02.394 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:40:02.399 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 8.7243ms
2025-05-16 14:40:02.394 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:40:02.400 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:40:02.402 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 10.8216ms
2025-05-16 14:40:02.403 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 29.6279ms
2025-05-16 14:40:02.404 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:40:02.407 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 30.2075ms
2025-05-16 14:40:13.451 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:40:13.451 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:40:13.456 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:40:13.461 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:40:13.462 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 10.7336ms
2025-05-16 14:40:13.463 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 11.4731ms
2025-05-16 14:40:13.467 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:40:13.471 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:40:13.475 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:40:13.478 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:40:13.478 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:40:13.479 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:40:13.481 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:40:13.482 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:40:13.484 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 14:40:13.487 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 14:40:13.501 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 14:40:13.502 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 14:40:13.503 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:40:13.504 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:40:13.506 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 21.9385ms
2025-05-16 14:40:13.509 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 22.0048ms
2025-05-16 14:40:13.510 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:40:13.512 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:40:13.513 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 46.4419ms
2025-05-16 14:40:13.514 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 43.3256ms
2025-05-16 14:40:21.428 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:40:21.428 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:40:21.436 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:40:21.445 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:40:21.451 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 23.1664ms
2025-05-16 14:40:21.453 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 25.0544ms
2025-05-16 14:40:21.462 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:40:21.471 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:40:21.477 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:40:21.484 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:40:21.486 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:40:21.489 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:40:21.493 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:40:21.495 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:40:21.504 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 14:40:21.512 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 14:40:21.518 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 14:40:21.519 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 14:40:21.521 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:40:21.522 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:40:21.525 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 21.3145ms
2025-05-16 14:40:21.529 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 16.6656ms
2025-05-16 14:40:21.534 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:40:21.539 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:40:21.543 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 80.6752ms
2025-05-16 14:40:21.545 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 74.2758ms
2025-05-16 14:40:48.197 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:40:48.198 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:40:48.206 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:40:48.209 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:40:48.210 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 12.1827ms
2025-05-16 14:40:48.210 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 12.5166ms
2025-05-16 14:40:48.214 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:40:48.218 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:40:48.222 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:40:48.224 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:40:48.225 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:40:48.225 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:40:48.227 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:40:48.227 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:40:48.229 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 14:40:48.230 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 14:40:48.232 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 14:40:48.234 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 14:40:48.234 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:40:48.236 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:40:48.238 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 9.0874ms
2025-05-16 14:40:48.242 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:40:48.240 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 10.6579ms
2025-05-16 14:40:48.243 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 28.6716ms
2025-05-16 14:40:48.244 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:40:48.249 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 31.2204ms
2025-05-16 14:43:32.381 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:43:32.381 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:43:32.384 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:43:32.387 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:43:32.388 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 6.838ms
2025-05-16 14:43:32.389 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 8.0245ms
2025-05-16 14:43:32.392 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:43:32.394 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:43:32.396 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:43:32.398 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:43:32.399 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:43:32.399 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:43:32.400 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:43:32.401 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:43:32.404 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 14:43:32.410 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 14:43:32.412 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 14:43:32.416 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:43:32.416 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 14:43:32.419 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 14.1545ms
2025-05-16 14:43:32.423 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:43:32.423 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:43:32.425 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 15.1616ms
2025-05-16 14:43:32.426 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 33.7953ms
2025-05-16 14:43:32.428 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:43:32.432 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 38.5844ms
2025-05-16 14:43:54.441 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:43:54.441 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:43:54.446 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:43:54.451 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:43:54.454 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 13.4432ms
2025-05-16 14:43:54.456 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 15.3108ms
2025-05-16 14:43:54.466 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:43:54.472 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:43:54.479 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:43:54.484 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:43:54.485 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:43:54.486 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:43:54.488 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:43:54.490 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:43:54.492 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 14:43:54.495 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 14:43:54.498 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 14:43:54.499 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 14:43:54.501 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:43:54.502 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:43:54.504 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 12.0767ms
2025-05-16 14:43:54.506 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 11.2921ms
2025-05-16 14:43:54.512 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:43:54.516 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:43:54.519 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 53.0717ms
2025-05-16 14:43:54.522 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 49.4025ms
2025-05-16 14:44:16.215 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:44:16.215 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:44:16.218 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:44:16.221 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:44:16.222 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 7.6956ms
2025-05-16 14:44:16.223 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 8.3917ms
2025-05-16 14:44:16.225 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:44:16.229 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:44:16.230 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:44:16.235 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:44:16.235 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:44:16.236 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:44:16.236 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:44:16.237 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:44:16.239 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 14:44:16.240 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 14:44:16.242 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 14:44:16.243 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 14:44:16.243 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:44:16.244 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:44:16.246 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 6.8176ms
2025-05-16 14:44:16.247 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 6.8758ms
2025-05-16 14:44:16.247 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:44:16.250 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:44:16.251 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 25.5271ms
2025-05-16 14:44:16.251 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 22.8208ms
2025-05-16 14:44:17.078 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:44:17.078 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:44:17.084 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:44:17.086 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:44:17.086 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:44:17.087 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:44:17.088 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:44:17.089 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:44:17.091 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 14:44:17.092 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 14:44:17.093 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 14:44:17.094 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 14:44:17.097 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:44:17.098 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:44:17.100 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 7.8823ms
2025-05-16 14:44:17.104 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 13.5961ms
2025-05-16 14:44:17.106 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:44:17.107 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:44:17.107 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 29.1798ms
2025-05-16 14:44:17.109 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 30.529ms
2025-05-16 14:46:23.636 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:46:23.636 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:46:23.639 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:46:23.642 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:46:23.643 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 7.211ms
2025-05-16 14:46:23.646 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 10.3281ms
2025-05-16 14:46:23.650 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:46:23.654 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:46:23.657 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:46:23.659 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:46:23.660 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:46:23.661 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:46:23.665 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:46:23.666 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:46:23.669 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 14:46:23.672 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 14:46:23.674 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 14:46:23.675 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 14:46:23.677 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:46:23.678 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:46:23.680 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 11.5444ms
2025-05-16 14:46:23.681 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 9.108ms
2025-05-16 14:46:23.682 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:46:23.683 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:46:23.684 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 34.1695ms
2025-05-16 14:46:23.685 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 31.4964ms
2025-05-16 14:46:37.960 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:46:37.960 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:46:37.963 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:46:37.966 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:46:37.966 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 6.0496ms
2025-05-16 14:46:37.967 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 7.0147ms
2025-05-16 14:46:37.971 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:46:37.974 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:46:37.978 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:46:37.982 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:46:37.983 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:46:37.984 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:46:37.985 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:46:37.986 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:46:37.988 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 14:46:37.990 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 14:46:37.992 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 14:46:37.994 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 14:46:37.996 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:46:37.997 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:46:37.999 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 10.3794ms
2025-05-16 14:46:38.000 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 9.1596ms
2025-05-16 14:46:38.001 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:46:38.002 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:46:38.003 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 31.8084ms
2025-05-16 14:46:38.004 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 30.0601ms
2025-05-16 14:46:38.122 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:46:38.122 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:46:38.126 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:46:38.129 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:46:38.130 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:46:38.131 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:46:38.132 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:46:38.133 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:46:38.136 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 14:46:38.137 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 14:46:38.139 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 14:46:38.140 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 14:46:38.142 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:46:38.145 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 8.8534ms
2025-05-16 14:46:38.143 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:46:38.148 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:46:38.150 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 12.5279ms
2025-05-16 14:46:38.150 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 29.2176ms
2025-05-16 14:46:38.152 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:46:38.155 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 33.6993ms
2025-05-16 14:47:23.452 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:47:23.452 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:47:23.456 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:47:23.460 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:47:23.461 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 9.1956ms
2025-05-16 14:47:23.462 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 10.1185ms
2025-05-16 14:47:23.467 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:47:23.472 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:47:23.476 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:47:23.480 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:47:23.481 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:47:23.483 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:47:23.484 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:47:23.488 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:47:23.494 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 14:47:23.497 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 14:47:23.499 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 14:47:23.499 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 14:47:23.500 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:47:23.501 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:47:23.503 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 8.792ms
2025-05-16 14:47:23.504 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 7.5322ms
2025-05-16 14:47:23.509 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:47:23.506 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:47:23.511 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 38.8286ms
2025-05-16 14:47:23.512 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 44.4623ms
2025-05-16 14:47:42.350 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:47:42.351 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:47:42.353 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:47:42.356 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:47:42.357 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 6.3284ms
2025-05-16 14:47:42.357 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 6.8226ms
2025-05-16 14:47:42.360 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 14:47:42.362 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 14:47:42.364 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:47:42.365 +05:30 [INF] CORS policy execution successful.
2025-05-16 14:47:42.365 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:47:42.367 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 14:47:42.368 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 14:47:42.366 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:47:42.369 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 14:47:42.369 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 14:47:42.370 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:47:42.372 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 14:47:42.373 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 4.9251ms
2025-05-16 14:47:42.374 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 14:47:42.374 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 14:47:42.376 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 14:47:42.377 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 16.9192ms
2025-05-16 14:47:42.379 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 7.3828ms
2025-05-16 14:47:42.382 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 14:47:42.383 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 20.8761ms
2025-05-16 21:25:45.286 +05:30 [INF] User profile is available. Using 'C:\Users\Bhavya Bansal\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-16 21:25:45.421 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-16 21:25:45.424 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-16 21:25:45.426 +05:30 [INF] Hosting environment: Development
2025-05-16 21:25:45.427 +05:30 [INF] Content root path: C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements
2025-05-16 21:25:57.329 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-16 21:25:57.470 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:25:57.490 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 164.7226ms
2025-05-16 21:25:57.512 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 64
2025-05-16 21:25:57.674 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/16/2025 10:06:53 AM', Current time (UTC): '5/16/2025 3:55:57 PM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-16 21:25:57.699 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/16/2025 10:06:53 AM', Current time (UTC): '5/16/2025 3:55:57 PM'.
2025-05-16 21:25:57.701 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:25:57.708 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-16 21:25:57.751 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-16 21:25:58.219 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType1`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 21:25:58.272 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 512.8345ms
2025-05-16 21:25:58.277 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-16 21:25:58.280 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 200 null application/json; charset=utf-8 768.261ms
2025-05-16 21:26:15.506 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-16 21:26:15.519 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:26:15.521 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 14.4088ms
2025-05-16 21:26:15.523 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 103
2025-05-16 21:26:15.543 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:26:15.546 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 21:26:15.566 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 21:26:15.619 +05:30 [INF] Starting allocation calculation...
2025-05-16 21:26:15.667 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 21:26:15.672 +05:30 [INF] Looking up base allocation for key: Mid+Long
2025-05-16 21:26:15.687 +05:30 [INF] Base allocation found: {"equity":50,"fixedIncome":30,"commodities":10,"cash":5,"realEstate":5}
2025-05-16 21:26:15.695 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 21:26:15.698 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 21:26:15.701 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-16 21:26:15.717 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-16 21:26:15.749 +05:30 [INF] Sub-allocations for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 21:26:15.755 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 21:26:15.761 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 21:26:15.764 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 21:26:15.768 +05:30 [INF] Sub-allocations for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 21:26:15.774 +05:30 [INF] Added sub-assets for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 21:26:15.779 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 21:26:15.781 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 21:26:15.788 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 21:26:15.790 +05:30 [INF] Added sub-assets for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 21:26:15.836 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 21:26:15.852 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 21:26:15.854 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 21:26:15.860 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 21:26:15.869 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 292.8756ms
2025-05-16 21:26:15.872 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 21:26:15.878 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 355.2208ms
2025-05-16 21:26:15.882 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=22 - null null
2025-05-16 21:26:15.889 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:26:15.891 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=22 - 204 null null 8.9985ms
2025-05-16 21:26:15.896 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=22 - application/json 483
2025-05-16 21:26:15.908 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:26:15.910 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 21:26:15.924 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 21:26:15.979 +05:30 [INF] Starting product allocation calculation.
2025-05-16 21:26:15.985 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 21:26:15.992 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 21:26:16.011 +05:30 [INF] Product data loaded successfully.
2025-05-16 21:26:16.017 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 21:26:16.026 +05:30 [INF] Calculating investment amount with PercentageSplit: 10.42, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 22.
2025-05-16 21:26:16.031 +05:30 [INF] Calculated investment amount: 128.01.
2025-05-16 21:26:16.036 +05:30 [INF] Calculating investment amount with PercentageSplit: 9.58, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 22.
2025-05-16 21:26:16.042 +05:30 [INF] Calculated investment amount: 138.19.
2025-05-16 21:26:16.044 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 21:26:16.046 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.98, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 22.
2025-05-16 21:26:16.048 +05:30 [INF] Calculated investment amount: 59.79.
2025-05-16 21:26:16.051 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.02, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 22.
2025-05-16 21:26:16.060 +05:30 [INF] Calculated investment amount: 70.67.
2025-05-16 21:26:16.063 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 21:26:16.070 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.72, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 22.
2025-05-16 21:26:16.074 +05:30 [INF] Calculated investment amount: 43.22.
2025-05-16 21:26:16.078 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.28, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 22.
2025-05-16 21:26:16.082 +05:30 [INF] Calculated investment amount: 47.59.
2025-05-16 21:26:16.087 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 21:26:16.093 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.3, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 22.
2025-05-16 21:26:16.096 +05:30 [INF] Calculated investment amount: 78.63.
2025-05-16 21:26:16.101 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.2, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 22.
2025-05-16 21:26:16.109 +05:30 [INF] Calculated investment amount: 78.43.
2025-05-16 21:26:16.112 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 21:26:16.116 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.94, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 22.
2025-05-16 21:26:16.124 +05:30 [INF] Calculated investment amount: 69.15.
2025-05-16 21:26:16.129 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.06, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 22.
2025-05-16 21:26:16.135 +05:30 [INF] Calculated investment amount: 67.66.
2025-05-16 21:26:16.140 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 21:26:16.146 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.21, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 22.
2025-05-16 21:26:16.153 +05:30 [INF] Calculated investment amount: 68.05.
2025-05-16 21:26:16.158 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.29, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 22.
2025-05-16 21:26:16.162 +05:30 [INF] Calculated investment amount: 67.64.
2025-05-16 21:26:16.167 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 21:26:16.172 +05:30 [ERR] Invalid input detected: Percentage split must be between 1 and 100.
System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
2025-05-16 21:26:16.193 +05:30 [ERR] Error calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
2025-05-16 21:26:16.201 +05:30 [ERR] Error occurred while calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
   at WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations(AllocationResultDTO allocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Controllers\ProdAllocController.cs:line 106
2025-05-16 21:26:16.214 +05:30 [INF] Executing ObjectResult, writing value of type 'System.String'.
2025-05-16 21:26:16.221 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 291.7909ms
2025-05-16 21:26:16.225 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 21:26:16.230 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=22 - 500 null text/plain; charset=utf-8 333.7096ms
2025-05-16 21:26:18.861 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 103
2025-05-16 21:26:18.865 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:26:18.867 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 21:26:18.868 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 21:26:18.872 +05:30 [INF] Starting allocation calculation...
2025-05-16 21:26:18.877 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 21:26:18.878 +05:30 [INF] Looking up base allocation for key: Mid+Long
2025-05-16 21:26:18.879 +05:30 [INF] Base allocation found: {"equity":50,"fixedIncome":30,"commodities":10,"cash":5,"realEstate":5}
2025-05-16 21:26:18.881 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 21:26:18.882 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 21:26:18.883 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-16 21:26:18.884 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-16 21:26:18.886 +05:30 [INF] Sub-allocations for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 21:26:18.888 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 21:26:18.891 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 21:26:18.894 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 21:26:18.897 +05:30 [INF] Sub-allocations for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 21:26:18.900 +05:30 [INF] Added sub-assets for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 21:26:18.903 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 21:26:18.905 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 21:26:18.907 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 21:26:18.908 +05:30 [INF] Added sub-assets for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 21:26:18.910 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 21:26:18.927 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 21:26:18.929 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 21:26:18.931 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 21:26:18.933 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 62.7444ms
2025-05-16 21:26:18.934 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 21:26:18.935 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 74.2561ms
2025-05-16 21:26:18.940 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=22 - application/json 483
2025-05-16 21:26:18.943 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:26:18.944 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 21:26:18.945 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 21:26:18.950 +05:30 [INF] Starting product allocation calculation.
2025-05-16 21:26:18.952 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 21:26:18.954 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 21:26:18.959 +05:30 [INF] Product data loaded successfully.
2025-05-16 21:26:18.960 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 21:26:18.962 +05:30 [INF] Calculating investment amount with PercentageSplit: 10.42, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 22.
2025-05-16 21:26:18.964 +05:30 [INF] Calculated investment amount: 128.01.
2025-05-16 21:26:18.967 +05:30 [INF] Calculating investment amount with PercentageSplit: 9.58, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 22.
2025-05-16 21:26:18.969 +05:30 [INF] Calculated investment amount: 138.19.
2025-05-16 21:26:18.970 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 21:26:18.972 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.98, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 22.
2025-05-16 21:26:18.974 +05:30 [INF] Calculated investment amount: 59.79.
2025-05-16 21:26:18.976 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.02, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 22.
2025-05-16 21:26:18.978 +05:30 [INF] Calculated investment amount: 70.67.
2025-05-16 21:26:18.980 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 21:26:18.982 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.72, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 22.
2025-05-16 21:26:18.985 +05:30 [INF] Calculated investment amount: 43.22.
2025-05-16 21:26:18.986 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.28, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 22.
2025-05-16 21:26:18.989 +05:30 [INF] Calculated investment amount: 47.59.
2025-05-16 21:26:18.990 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 21:26:18.992 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.3, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 22.
2025-05-16 21:26:18.994 +05:30 [INF] Calculated investment amount: 78.63.
2025-05-16 21:26:18.995 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.2, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 22.
2025-05-16 21:26:18.997 +05:30 [INF] Calculated investment amount: 78.43.
2025-05-16 21:26:18.998 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 21:26:18.999 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.94, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 22.
2025-05-16 21:26:19.001 +05:30 [INF] Calculated investment amount: 69.15.
2025-05-16 21:26:19.002 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.06, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 22.
2025-05-16 21:26:19.006 +05:30 [INF] Calculated investment amount: 67.66.
2025-05-16 21:26:19.007 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 21:26:19.009 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.21, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 22.
2025-05-16 21:26:19.011 +05:30 [INF] Calculated investment amount: 68.05.
2025-05-16 21:26:19.012 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.29, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 22.
2025-05-16 21:26:19.013 +05:30 [INF] Calculated investment amount: 67.64.
2025-05-16 21:26:19.015 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 21:26:19.017 +05:30 [ERR] Invalid input detected: Percentage split must be between 1 and 100.
System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
2025-05-16 21:26:19.019 +05:30 [ERR] Error calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
2025-05-16 21:26:19.022 +05:30 [ERR] Error occurred while calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
   at WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations(AllocationResultDTO allocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Controllers\ProdAllocController.cs:line 106
2025-05-16 21:26:19.026 +05:30 [INF] Executing ObjectResult, writing value of type 'System.String'.
2025-05-16 21:26:19.028 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 81.7587ms
2025-05-16 21:26:19.029 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 21:26:19.030 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=22 - 500 null text/plain; charset=utf-8 90.1136ms
2025-05-16 21:26:20.601 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-16 21:26:20.605 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:26:20.606 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 5.7278ms
2025-05-16 21:26:20.612 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 103
2025-05-16 21:26:20.619 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:26:20.620 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 21:26:20.622 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 21:26:20.627 +05:30 [INF] Starting allocation calculation...
2025-05-16 21:26:20.634 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 21:26:20.635 +05:30 [INF] Looking up base allocation for key: Mid+Long
2025-05-16 21:26:20.636 +05:30 [INF] Base allocation found: {"equity":50,"fixedIncome":30,"commodities":10,"cash":5,"realEstate":5}
2025-05-16 21:26:20.638 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 21:26:20.639 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 21:26:20.640 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-16 21:26:20.642 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-16 21:26:20.644 +05:30 [INF] Sub-allocations for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 21:26:20.645 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 21:26:20.647 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 21:26:20.648 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 21:26:20.652 +05:30 [INF] Sub-allocations for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 21:26:20.654 +05:30 [INF] Added sub-assets for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 21:26:20.655 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 21:26:20.657 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 21:26:20.658 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 21:26:20.660 +05:30 [INF] Added sub-assets for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 21:26:20.662 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 21:26:20.674 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 21:26:20.675 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 21:26:20.677 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 21:26:20.679 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 54.2256ms
2025-05-16 21:26:20.681 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 21:26:20.683 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 70.5903ms
2025-05-16 21:26:20.686 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=22 - application/json 483
2025-05-16 21:26:20.689 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:26:20.690 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 21:26:20.693 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 21:26:20.701 +05:30 [INF] Starting product allocation calculation.
2025-05-16 21:26:20.702 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 21:26:20.704 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 21:26:20.709 +05:30 [INF] Product data loaded successfully.
2025-05-16 21:26:20.710 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 21:26:20.712 +05:30 [INF] Calculating investment amount with PercentageSplit: 10.42, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 22.
2025-05-16 21:26:20.713 +05:30 [INF] Calculated investment amount: 128.01.
2025-05-16 21:26:20.715 +05:30 [INF] Calculating investment amount with PercentageSplit: 9.58, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 22.
2025-05-16 21:26:20.717 +05:30 [INF] Calculated investment amount: 138.19.
2025-05-16 21:26:20.718 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 21:26:20.720 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.98, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 22.
2025-05-16 21:26:20.722 +05:30 [INF] Calculated investment amount: 59.79.
2025-05-16 21:26:20.723 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.02, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 22.
2025-05-16 21:26:20.726 +05:30 [INF] Calculated investment amount: 70.67.
2025-05-16 21:26:20.727 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 21:26:20.728 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.72, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 22.
2025-05-16 21:26:20.731 +05:30 [INF] Calculated investment amount: 43.22.
2025-05-16 21:26:20.732 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.28, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 22.
2025-05-16 21:26:20.734 +05:30 [INF] Calculated investment amount: 47.59.
2025-05-16 21:26:20.735 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 21:26:20.737 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.3, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 22.
2025-05-16 21:26:20.739 +05:30 [INF] Calculated investment amount: 78.63.
2025-05-16 21:26:20.740 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.2, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 22.
2025-05-16 21:26:20.742 +05:30 [INF] Calculated investment amount: 78.43.
2025-05-16 21:26:20.743 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 21:26:20.744 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.94, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 22.
2025-05-16 21:26:20.746 +05:30 [INF] Calculated investment amount: 69.15.
2025-05-16 21:26:20.747 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.06, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 22.
2025-05-16 21:26:20.750 +05:30 [INF] Calculated investment amount: 67.66.
2025-05-16 21:26:20.751 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 21:26:20.752 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.21, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 22.
2025-05-16 21:26:20.755 +05:30 [INF] Calculated investment amount: 68.05.
2025-05-16 21:26:20.756 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.29, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 22.
2025-05-16 21:26:20.758 +05:30 [INF] Calculated investment amount: 67.64.
2025-05-16 21:26:20.760 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 21:26:20.761 +05:30 [ERR] Invalid input detected: Percentage split must be between 1 and 100.
System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
2025-05-16 21:26:20.763 +05:30 [ERR] Error calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
2025-05-16 21:26:20.766 +05:30 [ERR] Error occurred while calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
   at WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations(AllocationResultDTO allocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Controllers\ProdAllocController.cs:line 106
2025-05-16 21:26:20.769 +05:30 [INF] Executing ObjectResult, writing value of type 'System.String'.
2025-05-16 21:26:20.771 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 74.8023ms
2025-05-16 21:26:20.773 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 21:26:20.774 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=22 - 500 null text/plain; charset=utf-8 87.5493ms
2025-05-16 21:26:29.112 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-16 21:26:29.118 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:26:29.120 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 8.0643ms
2025-05-16 21:26:29.124 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 103
2025-05-16 21:26:29.131 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:26:29.134 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 21:26:29.137 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 21:26:29.139 +05:30 [INF] Starting allocation calculation...
2025-05-16 21:26:29.144 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 21:26:29.145 +05:30 [INF] Looking up base allocation for key: Mid+Long
2025-05-16 21:26:29.146 +05:30 [INF] Base allocation found: {"equity":50,"fixedIncome":30,"commodities":10,"cash":5,"realEstate":5}
2025-05-16 21:26:29.147 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 21:26:29.149 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 21:26:29.151 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-16 21:26:29.153 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-16 21:26:29.157 +05:30 [INF] Sub-allocations for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 21:26:29.159 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 21:26:29.162 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 21:26:29.163 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 21:26:29.165 +05:30 [INF] Sub-allocations for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 21:26:29.167 +05:30 [INF] Added sub-assets for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 21:26:29.169 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 21:26:29.171 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 21:26:29.173 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 21:26:29.175 +05:30 [INF] Added sub-assets for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 21:26:29.177 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 21:26:29.184 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 21:26:29.187 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 21:26:29.189 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 21:26:29.193 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 54.5326ms
2025-05-16 21:26:29.195 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 21:26:29.197 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 72.0836ms
2025-05-16 21:26:29.200 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=22 - null null
2025-05-16 21:26:29.208 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:26:29.210 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=22 - 204 null null 9.8366ms
2025-05-16 21:26:29.215 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=22 - application/json 483
2025-05-16 21:26:29.222 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:26:29.224 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 21:26:29.225 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 21:26:29.229 +05:30 [INF] Starting product allocation calculation.
2025-05-16 21:26:29.230 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 21:26:29.232 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 21:26:29.238 +05:30 [INF] Product data loaded successfully.
2025-05-16 21:26:29.239 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 21:26:29.241 +05:30 [INF] Calculating investment amount with PercentageSplit: 10.42, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 22.
2025-05-16 21:26:29.244 +05:30 [INF] Calculated investment amount: 128.01.
2025-05-16 21:26:29.245 +05:30 [INF] Calculating investment amount with PercentageSplit: 9.58, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 22.
2025-05-16 21:26:29.247 +05:30 [INF] Calculated investment amount: 138.19.
2025-05-16 21:26:29.249 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 21:26:29.250 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.98, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 22.
2025-05-16 21:26:29.252 +05:30 [INF] Calculated investment amount: 59.79.
2025-05-16 21:26:29.253 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.02, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 22.
2025-05-16 21:26:29.255 +05:30 [INF] Calculated investment amount: 70.67.
2025-05-16 21:26:29.257 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 21:26:29.259 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.72, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 22.
2025-05-16 21:26:29.261 +05:30 [INF] Calculated investment amount: 43.22.
2025-05-16 21:26:29.261 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.28, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 22.
2025-05-16 21:26:29.263 +05:30 [INF] Calculated investment amount: 47.59.
2025-05-16 21:26:29.264 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 21:26:29.266 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.3, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 22.
2025-05-16 21:26:29.269 +05:30 [INF] Calculated investment amount: 78.63.
2025-05-16 21:26:29.271 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.2, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 22.
2025-05-16 21:26:29.273 +05:30 [INF] Calculated investment amount: 78.43.
2025-05-16 21:26:29.275 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 21:26:29.277 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.94, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 22.
2025-05-16 21:26:29.279 +05:30 [INF] Calculated investment amount: 69.15.
2025-05-16 21:26:29.280 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.06, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 22.
2025-05-16 21:26:29.282 +05:30 [INF] Calculated investment amount: 67.66.
2025-05-16 21:26:29.284 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 21:26:29.286 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.21, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 22.
2025-05-16 21:26:29.289 +05:30 [INF] Calculated investment amount: 68.05.
2025-05-16 21:26:29.290 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.29, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 22.
2025-05-16 21:26:29.293 +05:30 [INF] Calculated investment amount: 67.64.
2025-05-16 21:26:29.294 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 21:26:29.296 +05:30 [ERR] Invalid input detected: Percentage split must be between 1 and 100.
System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
2025-05-16 21:26:29.300 +05:30 [ERR] Error calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
2025-05-16 21:26:29.304 +05:30 [ERR] Error occurred while calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
   at WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations(AllocationResultDTO allocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Controllers\ProdAllocController.cs:line 106
2025-05-16 21:26:29.307 +05:30 [INF] Executing ObjectResult, writing value of type 'System.String'.
2025-05-16 21:26:29.309 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 81.7607ms
2025-05-16 21:26:29.311 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 21:26:29.312 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=22 - 500 null text/plain; charset=utf-8 96.6665ms
2025-05-16 21:26:31.457 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 103
2025-05-16 21:26:31.460 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:26:31.461 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 21:26:31.462 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 21:26:31.465 +05:30 [INF] Starting allocation calculation...
2025-05-16 21:26:31.469 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 21:26:31.470 +05:30 [INF] Looking up base allocation for key: Mid+Long
2025-05-16 21:26:31.472 +05:30 [INF] Base allocation found: {"equity":50,"fixedIncome":30,"commodities":10,"cash":5,"realEstate":5}
2025-05-16 21:26:31.473 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 21:26:31.474 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 21:26:31.475 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-16 21:26:31.476 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-16 21:26:31.477 +05:30 [INF] Sub-allocations for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 21:26:31.478 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 21:26:31.479 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 21:26:31.480 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 21:26:31.482 +05:30 [INF] Sub-allocations for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 21:26:31.486 +05:30 [INF] Added sub-assets for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 21:26:31.491 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 21:26:31.494 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 21:26:31.496 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 21:26:31.497 +05:30 [INF] Added sub-assets for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 21:26:31.500 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 21:26:31.508 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 21:26:31.509 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 21:26:31.511 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 21:26:31.513 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 48.687ms
2025-05-16 21:26:31.514 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 21:26:31.518 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 60.4191ms
2025-05-16 21:26:31.523 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=22 - application/json 483
2025-05-16 21:26:31.528 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:26:31.530 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 21:26:31.533 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 21:26:31.536 +05:30 [INF] Starting product allocation calculation.
2025-05-16 21:26:31.538 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 21:26:31.541 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 21:26:31.546 +05:30 [INF] Product data loaded successfully.
2025-05-16 21:26:31.547 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 21:26:31.549 +05:30 [INF] Calculating investment amount with PercentageSplit: 10.42, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 22.
2025-05-16 21:26:31.551 +05:30 [INF] Calculated investment amount: 128.01.
2025-05-16 21:26:31.553 +05:30 [INF] Calculating investment amount with PercentageSplit: 9.58, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 22.
2025-05-16 21:26:31.555 +05:30 [INF] Calculated investment amount: 138.19.
2025-05-16 21:26:31.556 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 21:26:31.558 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.98, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 22.
2025-05-16 21:26:31.560 +05:30 [INF] Calculated investment amount: 59.79.
2025-05-16 21:26:31.561 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.02, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 22.
2025-05-16 21:26:31.563 +05:30 [INF] Calculated investment amount: 70.67.
2025-05-16 21:26:31.565 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 21:26:31.567 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.72, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 22.
2025-05-16 21:26:31.569 +05:30 [INF] Calculated investment amount: 43.22.
2025-05-16 21:26:31.570 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.28, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 22.
2025-05-16 21:26:31.572 +05:30 [INF] Calculated investment amount: 47.59.
2025-05-16 21:26:31.574 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 21:26:31.575 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.3, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 22.
2025-05-16 21:26:31.578 +05:30 [INF] Calculated investment amount: 78.63.
2025-05-16 21:26:31.580 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.2, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 22.
2025-05-16 21:26:31.583 +05:30 [INF] Calculated investment amount: 78.43.
2025-05-16 21:26:31.585 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 21:26:31.586 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.94, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 22.
2025-05-16 21:26:31.589 +05:30 [INF] Calculated investment amount: 69.15.
2025-05-16 21:26:31.590 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.06, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 22.
2025-05-16 21:26:31.593 +05:30 [INF] Calculated investment amount: 67.66.
2025-05-16 21:26:31.594 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 21:26:31.596 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.21, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 22.
2025-05-16 21:26:31.599 +05:30 [INF] Calculated investment amount: 68.05.
2025-05-16 21:26:31.600 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.29, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 22.
2025-05-16 21:26:31.602 +05:30 [INF] Calculated investment amount: 67.64.
2025-05-16 21:26:31.603 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 21:26:31.606 +05:30 [ERR] Invalid input detected: Percentage split must be between 1 and 100.
System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
2025-05-16 21:26:31.608 +05:30 [ERR] Error calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
2025-05-16 21:26:31.611 +05:30 [ERR] Error occurred while calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
   at WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations(AllocationResultDTO allocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Controllers\ProdAllocController.cs:line 106
2025-05-16 21:26:31.614 +05:30 [INF] Executing ObjectResult, writing value of type 'System.String'.
2025-05-16 21:26:31.616 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 81.0631ms
2025-05-16 21:26:31.618 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 21:26:31.620 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=22 - 500 null text/plain; charset=utf-8 96.5722ms
2025-05-16 21:26:31.683 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 103
2025-05-16 21:26:31.687 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:26:31.687 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 21:26:31.688 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 21:26:31.692 +05:30 [INF] Starting allocation calculation...
2025-05-16 21:26:31.697 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 21:26:31.699 +05:30 [INF] Looking up base allocation for key: Mid+Long
2025-05-16 21:26:31.700 +05:30 [INF] Base allocation found: {"equity":50,"fixedIncome":30,"commodities":10,"cash":5,"realEstate":5}
2025-05-16 21:26:31.701 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 21:26:31.702 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 21:26:31.704 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-16 21:26:31.705 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-16 21:26:31.707 +05:30 [INF] Sub-allocations for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 21:26:31.708 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 21:26:31.710 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 21:26:31.711 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 21:26:31.713 +05:30 [INF] Sub-allocations for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 21:26:31.715 +05:30 [INF] Added sub-assets for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 21:26:31.717 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 21:26:31.719 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 21:26:31.721 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 21:26:31.723 +05:30 [INF] Added sub-assets for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 21:26:31.724 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 21:26:31.726 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 21:26:31.728 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 21:26:31.729 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 21:26:31.730 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 38.0722ms
2025-05-16 21:26:31.732 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 21:26:31.733 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 50.5054ms
2025-05-16 21:26:31.737 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=22 - application/json 483
2025-05-16 21:26:31.741 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:26:31.742 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 21:26:31.744 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 21:26:31.747 +05:30 [INF] Starting product allocation calculation.
2025-05-16 21:26:31.749 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 21:26:31.750 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 21:26:31.756 +05:30 [INF] Product data loaded successfully.
2025-05-16 21:26:31.757 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 21:26:31.759 +05:30 [INF] Calculating investment amount with PercentageSplit: 10.42, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 22.
2025-05-16 21:26:31.761 +05:30 [INF] Calculated investment amount: 128.01.
2025-05-16 21:26:31.763 +05:30 [INF] Calculating investment amount with PercentageSplit: 9.58, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 22.
2025-05-16 21:26:31.765 +05:30 [INF] Calculated investment amount: 138.19.
2025-05-16 21:26:31.766 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 21:26:31.768 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.98, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 22.
2025-05-16 21:26:31.770 +05:30 [INF] Calculated investment amount: 59.79.
2025-05-16 21:26:31.771 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.02, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 22.
2025-05-16 21:26:31.774 +05:30 [INF] Calculated investment amount: 70.67.
2025-05-16 21:26:31.776 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 21:26:31.777 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.72, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 22.
2025-05-16 21:26:31.779 +05:30 [INF] Calculated investment amount: 43.22.
2025-05-16 21:26:31.780 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.28, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 22.
2025-05-16 21:26:31.782 +05:30 [INF] Calculated investment amount: 47.59.
2025-05-16 21:26:31.784 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 21:26:31.785 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.3, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 22.
2025-05-16 21:26:31.788 +05:30 [INF] Calculated investment amount: 78.63.
2025-05-16 21:26:31.789 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.2, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 22.
2025-05-16 21:26:31.790 +05:30 [INF] Calculated investment amount: 78.43.
2025-05-16 21:26:31.792 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 21:26:31.793 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.94, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 22.
2025-05-16 21:26:31.795 +05:30 [INF] Calculated investment amount: 69.15.
2025-05-16 21:26:31.796 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.06, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 22.
2025-05-16 21:26:31.799 +05:30 [INF] Calculated investment amount: 67.66.
2025-05-16 21:26:31.800 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 21:26:31.801 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.21, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 22.
2025-05-16 21:26:31.804 +05:30 [INF] Calculated investment amount: 68.05.
2025-05-16 21:26:31.805 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.29, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 22.
2025-05-16 21:26:31.807 +05:30 [INF] Calculated investment amount: 67.64.
2025-05-16 21:26:31.808 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 21:26:31.810 +05:30 [ERR] Invalid input detected: Percentage split must be between 1 and 100.
System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
2025-05-16 21:26:31.812 +05:30 [ERR] Error calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
2025-05-16 21:26:31.815 +05:30 [ERR] Error occurred while calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
   at WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations(AllocationResultDTO allocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Controllers\ProdAllocController.cs:line 106
2025-05-16 21:26:31.818 +05:30 [INF] Executing ObjectResult, writing value of type 'System.String'.
2025-05-16 21:26:31.820 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 74.3991ms
2025-05-16 21:26:31.822 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 21:26:31.823 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=22 - 500 null text/plain; charset=utf-8 86.4723ms
2025-05-16 21:26:32.319 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 103
2025-05-16 21:26:32.328 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:26:32.329 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 21:26:32.331 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 21:26:32.335 +05:30 [INF] Starting allocation calculation...
2025-05-16 21:26:32.339 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 21:26:32.341 +05:30 [INF] Looking up base allocation for key: Mid+Long
2025-05-16 21:26:32.344 +05:30 [INF] Base allocation found: {"equity":50,"fixedIncome":30,"commodities":10,"cash":5,"realEstate":5}
2025-05-16 21:26:32.345 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 21:26:32.346 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 21:26:32.347 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-16 21:26:32.349 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-16 21:26:32.353 +05:30 [INF] Sub-allocations for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 21:26:32.359 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 21:26:32.362 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 21:26:32.363 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 21:26:32.366 +05:30 [INF] Sub-allocations for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 21:26:32.372 +05:30 [INF] Added sub-assets for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 21:26:32.375 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 21:26:32.376 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 21:26:32.378 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 21:26:32.379 +05:30 [INF] Added sub-assets for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 21:26:32.381 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 21:26:32.387 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 21:26:32.389 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 21:26:32.393 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 21:26:32.395 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 60.6034ms
2025-05-16 21:26:32.396 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 21:26:32.401 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 81.1487ms
2025-05-16 21:26:32.411 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=22 - application/json 483
2025-05-16 21:26:32.418 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:26:32.420 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 21:26:32.422 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 21:26:32.425 +05:30 [INF] Starting product allocation calculation.
2025-05-16 21:26:32.427 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 21:26:32.428 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 21:26:32.433 +05:30 [INF] Product data loaded successfully.
2025-05-16 21:26:32.434 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 21:26:32.436 +05:30 [INF] Calculating investment amount with PercentageSplit: 10.42, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 22.
2025-05-16 21:26:32.439 +05:30 [INF] Calculated investment amount: 128.01.
2025-05-16 21:26:32.441 +05:30 [INF] Calculating investment amount with PercentageSplit: 9.58, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 22.
2025-05-16 21:26:32.444 +05:30 [INF] Calculated investment amount: 138.19.
2025-05-16 21:26:32.445 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 21:26:32.446 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.98, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 22.
2025-05-16 21:26:32.449 +05:30 [INF] Calculated investment amount: 59.79.
2025-05-16 21:26:32.450 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.02, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 22.
2025-05-16 21:26:32.453 +05:30 [INF] Calculated investment amount: 70.67.
2025-05-16 21:26:32.454 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 21:26:32.456 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.72, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 22.
2025-05-16 21:26:32.459 +05:30 [INF] Calculated investment amount: 43.22.
2025-05-16 21:26:32.460 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.28, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 22.
2025-05-16 21:26:32.463 +05:30 [INF] Calculated investment amount: 47.59.
2025-05-16 21:26:32.464 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 21:26:32.466 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.3, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 22.
2025-05-16 21:26:32.469 +05:30 [INF] Calculated investment amount: 78.63.
2025-05-16 21:26:32.470 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.2, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 22.
2025-05-16 21:26:32.473 +05:30 [INF] Calculated investment amount: 78.43.
2025-05-16 21:26:32.475 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 21:26:32.477 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.94, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 22.
2025-05-16 21:26:32.479 +05:30 [INF] Calculated investment amount: 69.15.
2025-05-16 21:26:32.480 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.06, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 22.
2025-05-16 21:26:32.483 +05:30 [INF] Calculated investment amount: 67.66.
2025-05-16 21:26:32.484 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 21:26:32.486 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.21, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 22.
2025-05-16 21:26:32.488 +05:30 [INF] Calculated investment amount: 68.05.
2025-05-16 21:26:32.489 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.29, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 22.
2025-05-16 21:26:32.492 +05:30 [INF] Calculated investment amount: 67.64.
2025-05-16 21:26:32.492 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 21:26:32.494 +05:30 [ERR] Invalid input detected: Percentage split must be between 1 and 100.
System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
2025-05-16 21:26:32.495 +05:30 [ERR] Error calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
2025-05-16 21:26:32.498 +05:30 [ERR] Error occurred while calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
   at WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations(AllocationResultDTO allocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Controllers\ProdAllocController.cs:line 106
2025-05-16 21:26:32.501 +05:30 [INF] Executing ObjectResult, writing value of type 'System.String'.
2025-05-16 21:26:32.502 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 77.8743ms
2025-05-16 21:26:32.504 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 21:26:32.505 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=22 - 500 null text/plain; charset=utf-8 93.7038ms
2025-05-16 21:26:41.195 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-16 21:26:41.201 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:26:41.205 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 10.0048ms
2025-05-16 21:26:41.213 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 103
2025-05-16 21:26:41.218 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:26:41.219 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 21:26:41.220 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 21:26:41.222 +05:30 [INF] Starting allocation calculation...
2025-05-16 21:26:41.225 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 21:26:41.227 +05:30 [INF] Looking up base allocation for key: Mid+Long
2025-05-16 21:26:41.228 +05:30 [INF] Base allocation found: {"equity":50,"fixedIncome":30,"commodities":10,"cash":5,"realEstate":5}
2025-05-16 21:26:41.228 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 21:26:41.230 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 21:26:41.231 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-16 21:26:41.236 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-16 21:26:41.239 +05:30 [INF] Sub-allocations for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 21:26:41.242 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 21:26:41.244 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 21:26:41.245 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 21:26:41.247 +05:30 [INF] Sub-allocations for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 21:26:41.249 +05:30 [INF] Added sub-assets for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 21:26:41.251 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 21:26:41.253 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 21:26:41.255 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 21:26:41.259 +05:30 [INF] Added sub-assets for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 21:26:41.263 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 21:26:41.270 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 21:26:41.271 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 21:26:41.272 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 21:26:41.274 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 52.4104ms
2025-05-16 21:26:41.275 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 21:26:41.276 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 63.5043ms
2025-05-16 21:26:41.281 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=22 - null null
2025-05-16 21:26:41.284 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:26:41.286 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=22 - 204 null null 5.229ms
2025-05-16 21:26:41.292 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=22 - application/json 483
2025-05-16 21:26:41.295 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:26:41.297 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 21:26:41.300 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 21:26:41.306 +05:30 [INF] Starting product allocation calculation.
2025-05-16 21:26:41.308 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 21:26:41.310 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 21:26:41.315 +05:30 [INF] Product data loaded successfully.
2025-05-16 21:26:41.317 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 21:26:41.321 +05:30 [INF] Calculating investment amount with PercentageSplit: 10.42, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 22.
2025-05-16 21:26:41.330 +05:30 [INF] Calculated investment amount: 128.01.
2025-05-16 21:26:41.331 +05:30 [INF] Calculating investment amount with PercentageSplit: 9.58, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 22.
2025-05-16 21:26:41.333 +05:30 [INF] Calculated investment amount: 138.19.
2025-05-16 21:26:41.335 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 21:26:41.338 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.98, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 22.
2025-05-16 21:26:41.343 +05:30 [INF] Calculated investment amount: 59.79.
2025-05-16 21:26:41.347 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.02, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 22.
2025-05-16 21:26:41.350 +05:30 [INF] Calculated investment amount: 70.67.
2025-05-16 21:26:41.351 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 21:26:41.353 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.72, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 22.
2025-05-16 21:26:41.357 +05:30 [INF] Calculated investment amount: 43.22.
2025-05-16 21:26:41.359 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.28, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 22.
2025-05-16 21:26:41.361 +05:30 [INF] Calculated investment amount: 47.59.
2025-05-16 21:26:41.362 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 21:26:41.365 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.3, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 22.
2025-05-16 21:26:41.367 +05:30 [INF] Calculated investment amount: 78.63.
2025-05-16 21:26:41.368 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.2, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 22.
2025-05-16 21:26:41.371 +05:30 [INF] Calculated investment amount: 78.43.
2025-05-16 21:26:41.373 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 21:26:41.375 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.94, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 22.
2025-05-16 21:26:41.377 +05:30 [INF] Calculated investment amount: 69.15.
2025-05-16 21:26:41.378 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.06, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 22.
2025-05-16 21:26:41.380 +05:30 [INF] Calculated investment amount: 67.66.
2025-05-16 21:26:41.381 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 21:26:41.383 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.21, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 22.
2025-05-16 21:26:41.385 +05:30 [INF] Calculated investment amount: 68.05.
2025-05-16 21:26:41.386 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.29, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 22.
2025-05-16 21:26:41.389 +05:30 [INF] Calculated investment amount: 67.64.
2025-05-16 21:26:41.390 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 21:26:41.391 +05:30 [ERR] Invalid input detected: Percentage split must be between 1 and 100.
System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
2025-05-16 21:26:41.393 +05:30 [ERR] Error calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
2025-05-16 21:26:41.397 +05:30 [ERR] Error occurred while calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
   at WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations(AllocationResultDTO allocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Controllers\ProdAllocController.cs:line 106
2025-05-16 21:26:41.400 +05:30 [INF] Executing ObjectResult, writing value of type 'System.String'.
2025-05-16 21:26:41.402 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 97.0227ms
2025-05-16 21:26:41.403 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 21:26:41.405 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=22 - 500 null text/plain; charset=utf-8 112.4801ms
2025-05-16 21:26:42.787 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 103
2025-05-16 21:26:42.792 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:26:42.794 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 21:26:42.795 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 21:26:42.798 +05:30 [INF] Starting allocation calculation...
2025-05-16 21:26:42.800 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 21:26:42.800 +05:30 [INF] Looking up base allocation for key: Mid+Long
2025-05-16 21:26:42.801 +05:30 [INF] Base allocation found: {"equity":50,"fixedIncome":30,"commodities":10,"cash":5,"realEstate":5}
2025-05-16 21:26:42.802 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 21:26:42.802 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 21:26:42.803 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-16 21:26:42.803 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-16 21:26:42.804 +05:30 [INF] Sub-allocations for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 21:26:42.805 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 21:26:42.806 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 21:26:42.807 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 21:26:42.808 +05:30 [INF] Sub-allocations for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 21:26:42.809 +05:30 [INF] Added sub-assets for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 21:26:42.810 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 21:26:42.814 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 21:26:42.815 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 21:26:42.816 +05:30 [INF] Added sub-assets for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 21:26:42.817 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 21:26:42.819 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 21:26:42.819 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 21:26:42.820 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 21:26:42.826 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 28.9324ms
2025-05-16 21:26:42.828 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 21:26:42.831 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 43.2784ms
2025-05-16 21:26:42.836 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=22 - application/json 483
2025-05-16 21:26:42.841 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:26:42.842 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 21:26:42.844 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 21:26:42.848 +05:30 [INF] Starting product allocation calculation.
2025-05-16 21:26:42.849 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 21:26:42.851 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 21:26:42.856 +05:30 [INF] Product data loaded successfully.
2025-05-16 21:26:42.857 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 21:26:42.858 +05:30 [INF] Calculating investment amount with PercentageSplit: 10.42, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 22.
2025-05-16 21:26:42.860 +05:30 [INF] Calculated investment amount: 128.01.
2025-05-16 21:26:42.861 +05:30 [INF] Calculating investment amount with PercentageSplit: 9.58, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 22.
2025-05-16 21:26:42.863 +05:30 [INF] Calculated investment amount: 138.19.
2025-05-16 21:26:42.864 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 21:26:42.866 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.98, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 22.
2025-05-16 21:26:42.868 +05:30 [INF] Calculated investment amount: 59.79.
2025-05-16 21:26:42.869 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.02, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 22.
2025-05-16 21:26:42.872 +05:30 [INF] Calculated investment amount: 70.67.
2025-05-16 21:26:42.873 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 21:26:42.875 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.72, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 22.
2025-05-16 21:26:42.877 +05:30 [INF] Calculated investment amount: 43.22.
2025-05-16 21:26:42.878 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.28, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 22.
2025-05-16 21:26:42.881 +05:30 [INF] Calculated investment amount: 47.59.
2025-05-16 21:26:42.882 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 21:26:42.883 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.3, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 22.
2025-05-16 21:26:42.885 +05:30 [INF] Calculated investment amount: 78.63.
2025-05-16 21:26:42.887 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.2, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 22.
2025-05-16 21:26:42.889 +05:30 [INF] Calculated investment amount: 78.43.
2025-05-16 21:26:42.891 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 21:26:42.893 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.94, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 22.
2025-05-16 21:26:42.896 +05:30 [INF] Calculated investment amount: 69.15.
2025-05-16 21:26:42.897 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.06, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 22.
2025-05-16 21:26:42.899 +05:30 [INF] Calculated investment amount: 67.66.
2025-05-16 21:26:42.901 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 21:26:42.902 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.21, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 22.
2025-05-16 21:26:42.904 +05:30 [INF] Calculated investment amount: 68.05.
2025-05-16 21:26:42.906 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.29, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 22.
2025-05-16 21:26:42.908 +05:30 [INF] Calculated investment amount: 67.64.
2025-05-16 21:26:42.909 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 21:26:42.910 +05:30 [ERR] Invalid input detected: Percentage split must be between 1 and 100.
System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
2025-05-16 21:26:42.911 +05:30 [ERR] Error calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
2025-05-16 21:26:42.913 +05:30 [ERR] Error occurred while calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
   at WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations(AllocationResultDTO allocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Controllers\ProdAllocController.cs:line 106
2025-05-16 21:26:42.915 +05:30 [INF] Executing ObjectResult, writing value of type 'System.String'.
2025-05-16 21:26:42.916 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 70.3688ms
2025-05-16 21:26:42.917 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 21:26:42.918 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=22 - 500 null text/plain; charset=utf-8 81.5732ms
2025-05-16 21:26:43.007 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 103
2025-05-16 21:26:43.014 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:26:43.016 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 21:26:43.017 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 21:26:43.020 +05:30 [INF] Starting allocation calculation...
2025-05-16 21:26:43.022 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 21:26:43.023 +05:30 [INF] Looking up base allocation for key: Mid+Long
2025-05-16 21:26:43.024 +05:30 [INF] Base allocation found: {"equity":50,"fixedIncome":30,"commodities":10,"cash":5,"realEstate":5}
2025-05-16 21:26:43.026 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 21:26:43.028 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 21:26:43.028 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-16 21:26:43.030 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-16 21:26:43.033 +05:30 [INF] Sub-allocations for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 21:26:43.036 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 21:26:43.039 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 21:26:43.043 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 21:26:43.044 +05:30 [INF] Sub-allocations for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 21:26:43.046 +05:30 [INF] Added sub-assets for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 21:26:43.047 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 21:26:43.048 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 21:26:43.050 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 21:26:43.053 +05:30 [INF] Added sub-assets for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 21:26:43.057 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 21:26:43.061 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 21:26:43.062 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 21:26:43.063 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 21:26:43.066 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 45.6291ms
2025-05-16 21:26:43.068 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 21:26:43.069 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 62.303ms
2025-05-16 21:26:43.072 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=22 - application/json 483
2025-05-16 21:26:43.076 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:26:43.078 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 21:26:43.079 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 21:26:43.082 +05:30 [INF] Starting product allocation calculation.
2025-05-16 21:26:43.083 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 21:26:43.085 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 21:26:43.089 +05:30 [INF] Product data loaded successfully.
2025-05-16 21:26:43.090 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 21:26:43.091 +05:30 [INF] Calculating investment amount with PercentageSplit: 10.42, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 22.
2025-05-16 21:26:43.094 +05:30 [INF] Calculated investment amount: 128.01.
2025-05-16 21:26:43.094 +05:30 [INF] Calculating investment amount with PercentageSplit: 9.58, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 22.
2025-05-16 21:26:43.097 +05:30 [INF] Calculated investment amount: 138.19.
2025-05-16 21:26:43.098 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 21:26:43.100 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.98, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 22.
2025-05-16 21:26:43.102 +05:30 [INF] Calculated investment amount: 59.79.
2025-05-16 21:26:43.104 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.02, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 22.
2025-05-16 21:26:43.106 +05:30 [INF] Calculated investment amount: 70.67.
2025-05-16 21:26:43.108 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 21:26:43.110 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.72, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 22.
2025-05-16 21:26:43.113 +05:30 [INF] Calculated investment amount: 43.22.
2025-05-16 21:26:43.114 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.28, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 22.
2025-05-16 21:26:43.117 +05:30 [INF] Calculated investment amount: 47.59.
2025-05-16 21:26:43.118 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 21:26:43.120 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.3, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 22.
2025-05-16 21:26:43.122 +05:30 [INF] Calculated investment amount: 78.63.
2025-05-16 21:26:43.124 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.2, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 22.
2025-05-16 21:26:43.126 +05:30 [INF] Calculated investment amount: 78.43.
2025-05-16 21:26:43.127 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 21:26:43.129 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.94, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 22.
2025-05-16 21:26:43.131 +05:30 [INF] Calculated investment amount: 69.15.
2025-05-16 21:26:43.132 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.06, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 22.
2025-05-16 21:26:43.134 +05:30 [INF] Calculated investment amount: 67.66.
2025-05-16 21:26:43.135 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 21:26:43.137 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.21, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 22.
2025-05-16 21:26:43.139 +05:30 [INF] Calculated investment amount: 68.05.
2025-05-16 21:26:43.140 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.29, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 22.
2025-05-16 21:26:43.143 +05:30 [INF] Calculated investment amount: 67.64.
2025-05-16 21:26:43.144 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 21:26:43.145 +05:30 [ERR] Invalid input detected: Percentage split must be between 1 and 100.
System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
2025-05-16 21:26:43.147 +05:30 [ERR] Error calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
2025-05-16 21:26:43.150 +05:30 [ERR] Error occurred while calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
   at WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations(AllocationResultDTO allocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Controllers\ProdAllocController.cs:line 106
2025-05-16 21:26:43.153 +05:30 [INF] Executing ObjectResult, writing value of type 'System.String'.
2025-05-16 21:26:43.156 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 74.2926ms
2025-05-16 21:26:43.157 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 21:26:43.159 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=22 - 500 null text/plain; charset=utf-8 86.9229ms
2025-05-16 21:27:36.793 +05:30 [INF] User profile is available. Using 'C:\Users\Bhavya Bansal\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-16 21:27:36.889 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-16 21:27:36.893 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-16 21:27:36.895 +05:30 [INF] Hosting environment: Development
2025-05-16 21:27:36.897 +05:30 [INF] Content root path: C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements
2025-05-16 21:27:41.978 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - null null
2025-05-16 21:27:42.088 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:27:42.103 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - 204 null null 128.3653ms
2025-05-16 21:27:42.119 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Products/products - null null
2025-05-16 21:27:42.323 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:27:42.332 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest)'
2025-05-16 21:27:42.382 +05:30 [INF] Route matched with {action = "LoadProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] LoadProducts() on controller WisVestAPI.Controllers.ProductsController (WisVest).
2025-05-16 21:27:42.573 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[WisVestAPI.Models.DTOs.ProductDTO, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-05-16 21:27:42.621 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest) in 229.0167ms
2025-05-16 21:27:42.625 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest)'
2025-05-16 21:27:42.630 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Products/products - 200 null application/json; charset=utf-8 512.1244ms
2025-05-16 21:28:07.353 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-16 21:28:07.367 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:28:07.373 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 19.3045ms
2025-05-16 21:28:07.379 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 96
2025-05-16 21:28:07.386 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:28:07.387 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 21:28:07.402 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 21:28:07.480 +05:30 [INF] Starting allocation calculation...
2025-05-16 21:28:07.505 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 21:28:07.508 +05:30 [INF] Looking up base allocation for key: Low+Long
2025-05-16 21:28:07.516 +05:30 [INF] Base allocation found: {"equity":30,"fixedIncome":45,"commodities":10,"cash":10,"realEstate":5}
2025-05-16 21:28:07.520 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 21:28:07.524 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 21:28:07.526 +05:30 [INF] Looking up goal tuning for goal: Retirement
2025-05-16 21:28:07.540 +05:30 [INF] Goal tuning found: {"fixedIncome_boost":10,"realEstate_boost":5}
2025-05-16 21:28:07.576 +05:30 [INF] Sub-allocations for equity: {"Large Cap":25,"Mid Cap":10,"Small Cap":5}
2025-05-16 21:28:07.582 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":17.5,"Corp Bonds":7,"Fixed Dep":10.5}
2025-05-16 21:28:07.590 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":6.25,"Energy":2.5,"Agriculture":1.25}
2025-05-16 21:28:07.592 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":1.15,"Savings Acc":1.92,"T. Bill":1.92}
2025-05-16 21:28:07.599 +05:30 [INF] Sub-allocations for realEstate: {"REITs":4,"Residential Prop":4,"Commercial Prop":2}
2025-05-16 21:28:07.607 +05:30 [INF] Added sub-assets for equity: {"Large Cap":25,"Mid Cap":10,"Small Cap":5}
2025-05-16 21:28:07.609 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":17.5,"Corp Bonds":7,"Fixed Dep":10.5}
2025-05-16 21:28:07.615 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":6.25,"Energy":2.5,"Agriculture":1.25}
2025-05-16 21:28:07.617 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":1.15,"Savings Acc":1.92,"T. Bill":1.92}
2025-05-16 21:28:07.619 +05:30 [INF] Added sub-assets for realEstate: {"REITs":4,"Residential Prop":4,"Commercial Prop":2}
2025-05-16 21:28:07.669 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":40,"subAssets":{"Large Cap":25,"Mid Cap":10,"Small Cap":5}},"fixedIncome":{"percentage":35,"subAssets":{"Gov Bonds":17.5,"Corp Bonds":7,"Fixed Dep":10.5}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":6.25,"Energy":2.5,"Agriculture":1.25}},"cash":{"percentage":5,"subAssets":{"Liquid Mutual Funds":1.15,"Savings Acc":1.92,"T. Bill":1.92}},"realEstate":{"percentage":10,"subAssets":{"REITs":4,"Residential Prop":4,"Commercial Prop":2}}}
2025-05-16 21:28:07.688 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 21:28:07.690 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":40,"subAssets":{"Large Cap":25,"Mid Cap":10,"Small Cap":5}},"fixedIncome":{"percentage":35,"subAssets":{"Gov Bonds":17.5,"Corp Bonds":7,"Fixed Dep":10.5}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":6.25,"Energy":2.5,"Agriculture":1.25}},"cash":{"percentage":5,"subAssets":{"Liquid Mutual Funds":1.15,"Savings Acc":1.92,"T. Bill":1.92}},"realEstate":{"percentage":10,"subAssets":{"REITs":4,"Residential Prop":4,"Commercial Prop":2}}}
2025-05-16 21:28:07.694 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 21:28:07.704 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 296.4451ms
2025-05-16 21:28:07.708 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 21:28:07.714 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 335.4058ms
2025-05-16 21:28:07.724 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=11 - null null
2025-05-16 21:28:07.738 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:28:07.741 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=11 - 204 null null 16.5994ms
2025-05-16 21:28:07.754 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=11 - application/json 486
2025-05-16 21:28:07.763 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:28:07.764 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 21:28:07.774 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 21:28:07.817 +05:30 [INF] Starting product allocation calculation.
2025-05-16 21:28:07.823 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 21:28:07.826 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 21:28:07.850 +05:30 [INF] Product data loaded successfully.
2025-05-16 21:28:07.858 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 21:28:07.865 +05:30 [INF] Calculating investment amount with PercentageSplit: 13.02, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: 11.
2025-05-16 21:28:07.873 +05:30 [INF] Calculated investment amount: 456.34.
2025-05-16 21:28:07.876 +05:30 [INF] Calculating investment amount with PercentageSplit: 11.98, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 11.
2025-05-16 21:28:07.883 +05:30 [INF] Calculated investment amount: 455.
2025-05-16 21:28:07.889 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 21:28:07.893 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.32, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: 11.
2025-05-16 21:28:07.902 +05:30 [INF] Calculated investment amount: 145.62.
2025-05-16 21:28:07.906 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.68, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: 11.
2025-05-16 21:28:07.909 +05:30 [INF] Calculated investment amount: 148.49.
2025-05-16 21:28:07.914 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 21:28:07.922 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.57, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: 11.
2025-05-16 21:28:07.924 +05:30 [INF] Calculated investment amount: 60.81.
2025-05-16 21:28:07.928 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.43, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: 11.
2025-05-16 21:28:07.938 +05:30 [INF] Calculated investment amount: 62.13.
2025-05-16 21:28:07.941 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 21:28:07.947 +05:30 [INF] Calculating investment amount with PercentageSplit: 8.93, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 11.
2025-05-16 21:28:07.955 +05:30 [INF] Calculated investment amount: 522.12.
2025-05-16 21:28:07.958 +05:30 [INF] Calculating investment amount with PercentageSplit: 8.57, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: 11.
2025-05-16 21:28:07.964 +05:30 [INF] Calculated investment amount: 511.69.
2025-05-16 21:28:07.968 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 21:28:07.972 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.42, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: 11.
2025-05-16 21:28:07.975 +05:30 [INF] Calculated investment amount: 165.86.
2025-05-16 21:28:07.980 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.58, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: 11.
2025-05-16 21:28:07.988 +05:30 [INF] Calculated investment amount: 168.34.
2025-05-16 21:28:07.991 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 21:28:07.996 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.16, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: 11.
2025-05-16 21:28:08.004 +05:30 [INF] Calculated investment amount: 286.33.
2025-05-16 21:28:08.007 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.34, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: 11.
2025-05-16 21:28:08.012 +05:30 [INF] Calculated investment amount: 290.21.
2025-05-16 21:28:08.018 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 21:28:08.022 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.46, TargetAmount: 10000, AnnualReturn: 7.8, InvestmentHorizon: 11.
2025-05-16 21:28:08.029 +05:30 [INF] Calculated investment amount: 151.45.
2025-05-16 21:28:08.034 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.79, TargetAmount: 10000, AnnualReturn: 6.3, InvestmentHorizon: 11.
2025-05-16 21:28:08.041 +05:30 [INF] Calculated investment amount: 142.47.
2025-05-16 21:28:08.044 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Energy.
2025-05-16 21:28:08.049 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.18, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: 11.
2025-05-16 21:28:08.056 +05:30 [INF] Calculated investment amount: 44.82.
2025-05-16 21:28:08.059 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.32, TargetAmount: 10000, AnnualReturn: 10.3, InvestmentHorizon: 11.
2025-05-16 21:28:08.067 +05:30 [INF] Calculated investment amount: 44.9.
2025-05-16 21:28:08.071 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Agriculture.
2025-05-16 21:28:08.074 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.69, TargetAmount: 10000, AnnualReturn: 8.5, InvestmentHorizon: 11.
2025-05-16 21:28:08.082 +05:30 [INF] Calculated investment amount: 28.13.
2025-05-16 21:28:08.088 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.56, TargetAmount: 10000, AnnualReturn: 7, InvestmentHorizon: 11.
2025-05-16 21:28:08.095 +05:30 [INF] Calculated investment amount: 26.61.
2025-05-16 21:28:08.100 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Liquid Mutual Funds.
2025-05-16 21:28:08.106 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.59, TargetAmount: 10000, AnnualReturn: 5.2, InvestmentHorizon: 11.
2025-05-16 21:28:08.112 +05:30 [INF] Calculated investment amount: 33.78.
2025-05-16 21:28:08.116 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.56, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: 11.
2025-05-16 21:28:08.121 +05:30 [INF] Calculated investment amount: 32.74.
2025-05-16 21:28:08.124 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Savings Acc.
2025-05-16 21:28:08.126 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.9, TargetAmount: 10000, AnnualReturn: 3.5, InvestmentHorizon: 11.
2025-05-16 21:28:08.130 +05:30 [INF] Calculated investment amount: 61.65.
2025-05-16 21:28:08.133 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.02, TargetAmount: 10000, AnnualReturn: 4, InvestmentHorizon: 11.
2025-05-16 21:28:08.136 +05:30 [INF] Calculated investment amount: 66.26.
2025-05-16 21:28:08.137 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: T. Bill.
2025-05-16 21:28:08.139 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.93, TargetAmount: 10000, AnnualReturn: 5.1, InvestmentHorizon: 11.
2025-05-16 21:28:08.144 +05:30 [INF] Calculated investment amount: 53.81.
2025-05-16 21:28:08.145 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.99, TargetAmount: 10000, AnnualReturn: 5.4, InvestmentHorizon: 11.
2025-05-16 21:28:08.147 +05:30 [INF] Calculated investment amount: 55.51.
2025-05-16 21:28:08.148 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: REITs.
2025-05-16 21:28:08.149 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.93, TargetAmount: 10000, AnnualReturn: 8.9, InvestmentHorizon: 11.
2025-05-16 21:28:08.150 +05:30 [INF] Calculated investment amount: 75.55.
2025-05-16 21:28:08.153 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.07, TargetAmount: 10000, AnnualReturn: 9.5, InvestmentHorizon: 11.
2025-05-16 21:28:08.155 +05:30 [INF] Calculated investment amount: 76.28.
2025-05-16 21:28:08.156 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Residential Prop.
2025-05-16 21:28:08.158 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.91, TargetAmount: 10000, AnnualReturn: 6.7, InvestmentHorizon: 11.
2025-05-16 21:28:08.160 +05:30 [INF] Calculated investment amount: 93.59.
2025-05-16 21:28:08.161 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.09, TargetAmount: 10000, AnnualReturn: 7.3, InvestmentHorizon: 11.
2025-05-16 21:28:08.164 +05:30 [INF] Calculated investment amount: 96.28.
2025-05-16 21:28:08.166 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Commercial Prop.
2025-05-16 21:28:08.167 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.02, TargetAmount: 10000, AnnualReturn: 10.2, InvestmentHorizon: 11.
2025-05-16 21:28:08.169 +05:30 [INF] Calculated investment amount: 35.04.
2025-05-16 21:28:08.170 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.98, TargetAmount: 10000, AnnualReturn: 9.8, InvestmentHorizon: 11.
2025-05-16 21:28:08.172 +05:30 [INF] Calculated investment amount: 35.04.
2025-05-16 21:28:08.190 +05:30 [INF] Product allocations saved successfully to ProductAllocations.json
2025-05-16 21:28:08.192 +05:30 [INF] Final Product Allocations: {"equity":{"Large Cap":{"BlueChip Fund ":{"product_name":"BlueChip Fund ","annual_return":10,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Stable returns","Low risk"],"cons":["Lower growth"],"risk_level":"Low","percentage_split":13.02,"InvestmentAmount":456.34},"Index Fund ":{"product_name":"Index Fund ","annual_return":9.2,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Diversified","Low cost"],"cons":["Market dependent"],"risk_level":"Moderate","percentage_split":11.98,"InvestmentAmount":455}},"Mid Cap":{"Mid Cap Growth ":{"product_name":"Mid Cap Growth ","annual_return":12.5,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["High growth potential"],"cons":["Volatile"],"risk_level":"High","percentage_split":5.32,"InvestmentAmount":145.62},"MidCap Blend ":{"product_name":"MidCap Blend ","annual_return":11,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["Balanced approach"],"cons":["Moderate risk"],"risk_level":"Moderate","percentage_split":4.68,"InvestmentAmount":148.49}},"Small Cap":{"SmallCap Aggressive ":{"product_name":"SmallCap Aggressive ","annual_return":14,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Medium","pros":["High return potential"],"cons":["Very volatile"],"risk_level":"High","percentage_split":2.57,"InvestmentAmount":60.81},"Emerging Companies ":{"product_name":"Emerging Companies ","annual_return":13.2,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Low","pros":["Growth stocks"],"cons":["Liquidity risk"],"risk_level":"High","percentage_split":2.43,"InvestmentAmount":62.13}}},"fixedIncome":{"Gov Bonds":{"Government Bond ":{"product_name":"Government Bond ","annual_return":5,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Very safe","Guaranteed return"],"cons":["Low return"],"risk_level":"Low","percentage_split":8.93,"InvestmentAmount":522.12},"Sovereign Bond ":{"product_name":"Sovereign Bond ","annual_return":4.8,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Stable income"],"cons":["Interest rate sensitive"],"risk_level":"Low","percentage_split":8.57,"InvestmentAmount":511.69}},"Corp Bonds":{"Corporate Bond ":{"product_name":"Corporate Bond ","annual_return":6.8,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Better return"],"cons":["Company risk"],"risk_level":"Moderate","percentage_split":3.42,"InvestmentAmount":165.86},"Private Corp Bond ":{"product_name":"Private Corp Bond ","annual_return":7.1,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Good yield"],"cons":["Credit risk"],"risk_level":"High","percentage_split":3.58,"InvestmentAmount":168.34}},"Fixed Dep":{"Fixed Deposit ":{"product_name":"Fixed Deposit ","annual_return":5.5,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Capital safety"],"cons":["Low returns"],"risk_level":"Low","percentage_split":5.16,"InvestmentAmount":286.33},"Bank FD ":{"product_name":"Bank FD ","annual_return":5.7,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Easy access"],"cons":["Taxable"],"risk_level":"Low","percentage_split":5.34,"InvestmentAmount":290.21}}},"commodities":{"Precious Metals":{"Gold ETF":{"product_name":"Gold ETF","annual_return":7.8,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Inflation hedge","Safe haven asset"],"cons":["No income generation","Price volatility"],"risk_level":"Moderate","percentage_split":3.46,"InvestmentAmount":151.45},"Silver Trust":{"product_name":"Silver Trust","annual_return":6.3,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Alternative investment","Deflation hedge"],"cons":["Subject to price swings","Not income-producing"],"risk_level":"Moderate","percentage_split":2.79,"InvestmentAmount":142.47}},"Energy":{"Energy Fund":{"product_name":"Energy Fund","annual_return":9.2,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["High demand","Diversified exposure"],"cons":["Subject to price fluctuations","Geopolitical risks"],"risk_level":"Moderate","percentage_split":1.18,"InvestmentAmount":44.82},"Oil \u0026 Gas ETF":{"product_name":"Oil \u0026 Gas ETF","annual_return":10.3,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["Strong returns","Global demand"],"cons":["Environmental impact","Political risk"],"risk_level":"High","percentage_split":1.32,"InvestmentAmount":44.9}},"Agriculture":{"Agricultural ETF":{"product_name":"Agricultural ETF","annual_return":8.5,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Diversification","Growth potential"],"cons":["Weather dependent","Global supply issues"],"risk_level":"Moderate","percentage_split":0.69,"InvestmentAmount":28.13},"Crop Futures B":{"product_name":"Crop Futures B","annual_return":7,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Alternative to stocks","Hedge against inflation"],"cons":["Market volatility","Weather sensitivity"],"risk_level":"Moderate","percentage_split":0.56,"InvestmentAmount":26.61}}},"cash":{"Liquid Mutual Funds":{"Liquid Fund":{"product_name":"Liquid Fund","annual_return":5.2,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Quick redemption","Low risk"],"cons":["Lower returns","Short-term horizon"],"risk_level":"Low","percentage_split":0.59,"InvestmentAmount":33.78},"Ultra Short Fund":{"product_name":"Ultra Short Fund","annual_return":5,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Better returns than savings","High liquidity"],"cons":["Interest rate risk","Short-term only"],"risk_level":"Low","percentage_split":0.56,"InvestmentAmount":32.74}},"Savings Acc":{"Standard Savings Account":{"product_name":"Standard Savings Account","annual_return":3.5,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Very liquid","Capital safety"],"cons":["Very low returns","Not suitable for growth"],"risk_level":"Low","percentage_split":0.9,"InvestmentAmount":61.65},"High Interest Savings":{"product_name":"High Interest Savings","annual_return":4,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Slightly higher returns","Safe and accessible"],"cons":["Still low returns","Inflation risk"],"risk_level":"Low","percentage_split":1.02,"InvestmentAmount":66.26}},"T. Bill":{"91-Day T-Bill":{"product_name":"91-Day T-Bill","annual_return":5.1,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Government backed","Low risk"],"cons":["Fixed tenure","Lower yield"],"risk_level":"Low","percentage_split":0.93,"InvestmentAmount":53.81},"182-Day T-Bill":{"product_name":"182-Day T-Bill","annual_return":5.4,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Safe investment","Short maturity"],"cons":["Not liquid before maturity","Limited returns"],"risk_level":"Low","percentage_split":0.99,"InvestmentAmount":55.51}}},"realEstate":{"REITs":{"REITs Trust ":{"product_name":"REITs Trust ","annual_return":8.9,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"Moderate","pros":["Stable returns","Diversified portfolio"],"cons":["Sensitive to interest rates","Limited growth"],"risk_level":"Moderate","percentage_split":1.93,"InvestmentAmount":75.55},"Vanguad Real Estate":{"product_name":"Vanguad Real Estate","annual_return":9.5,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"High","pros":["Tax efficiency","Regular income"],"cons":["Market volatility","Fees"],"risk_level":"High","percentage_split":2.07,"InvestmentAmount":76.28}},"Residential Prop":{"Residential Scheme ":{"product_name":"Residential Scheme ","annual_return":6.7,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Low","pros":["Stable income","Low volatility"],"cons":["Low liquidity","Maintenance costs"],"risk_level":"Low","percentage_split":1.91,"InvestmentAmount":93.59},"Housing Fund":{"product_name":"Housing Fund","annual_return":7.3,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Moderate","pros":["Tax benefits","Long-term growth"],"cons":["Location dependent","Slow ROI"],"risk_level":"Moderate","percentage_split":2.09,"InvestmentAmount":96.28}},"Commercial Prop":{"Commercial Plaza":{"product_name":"Commercial Plaza","annual_return":10.2,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Low","pros":["High rental yields","Strong appreciation"],"cons":["High initial cost","Vacancy risk"],"risk_level":"High","percentage_split":1.02,"InvestmentAmount":35.04},"Office Fund":{"product_name":"Office Fund","annual_return":9.8,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Moderate","pros":["Steady returns","Long leases"],"cons":["Tenant turnover","High maintenance"],"risk_level":"High","percentage_split":0.98,"InvestmentAmount":35.04}}}}
2025-05-16 21:28:08.195 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 21:28:08.200 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 422.7379ms
2025-05-16 21:28:08.204 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 21:28:08.208 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=11 - 200 null application/json; charset=utf-8 453.7582ms
2025-05-16 21:28:08.233 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 21:28:08.235 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 21:28:08.239 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:28:08.243 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:28:08.244 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 10.6282ms
2025-05-16 21:28:08.245 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 9.7199ms
2025-05-16 21:28:08.250 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 21:28:08.254 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 21:28:08.258 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:28:08.262 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:28:08.262 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 21:28:08.264 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 21:28:08.271 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 21:28:08.273 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 21:28:08.280 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 21:28:08.280 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 21:28:08.283 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 21:28:08.285 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 21:28:08.288 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 21:28:08.292 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 16.1367ms
2025-05-16 21:28:08.295 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 21:28:08.297 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 42.4328ms
2025-05-16 21:28:08.305 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 21:28:08.318 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 44.5167ms
2025-05-16 21:28:08.320 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 21:28:08.321 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 71.1597ms
2025-05-16 21:33:57.471 +05:30 [INF] User profile is available. Using 'C:\Users\Bhavya Bansal\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-16 21:33:57.551 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-16 21:33:57.554 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-16 21:33:57.555 +05:30 [INF] Hosting environment: Development
2025-05-16 21:33:57.556 +05:30 [INF] Content root path: C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements
2025-05-16 21:33:59.749 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-16 21:33:59.801 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:33:59.812 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 63.8837ms
2025-05-16 21:33:59.831 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 107
2025-05-16 21:33:59.913 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:33:59.917 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 21:33:59.941 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 21:34:00.020 +05:30 [INF] Starting allocation calculation...
2025-05-16 21:34:00.048 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 21:34:00.050 +05:30 [INF] Looking up base allocation for key: Mid+Long
2025-05-16 21:34:00.057 +05:30 [INF] Base allocation found: {"equity":50,"fixedIncome":30,"commodities":10,"cash":5,"realEstate":5}
2025-05-16 21:34:00.061 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 21:34:00.064 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 21:34:00.065 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-16 21:34:00.069 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-16 21:34:00.079 +05:30 [INF] Sub-allocations for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 21:34:00.082 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 21:34:00.083 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 21:34:00.084 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 21:34:00.086 +05:30 [INF] Sub-allocations for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 21:34:00.087 +05:30 [INF] Added sub-assets for equity: {"Large Cap":20,"Mid Cap":15,"Small Cap":15}
2025-05-16 21:34:00.088 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}
2025-05-16 21:34:00.089 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":0,"Energy":0,"Agriculture":0}
2025-05-16 21:34:00.090 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-16 21:34:00.091 +05:30 [INF] Added sub-assets for realEstate: {"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}
2025-05-16 21:34:00.110 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 21:34:00.117 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 21:34:00.119 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":50,"subAssets":{"Large Cap":20,"Mid Cap":15,"Small Cap":15}},"fixedIncome":{"percentage":15,"subAssets":{"Gov Bonds":4.5,"Corp Bonds":6,"Fixed Dep":4.5}},"commodities":{"percentage":0,"subAssets":{"Precious Metals":0,"Energy":0,"Agriculture":0}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-5,"subAssets":{"REITs":-1.88,"Residential Prop":-1.25,"Commercial Prop":-1.88}}}
2025-05-16 21:34:00.128 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 21:34:00.138 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 193.1142ms
2025-05-16 21:34:00.143 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 21:34:00.147 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 315.6721ms
2025-05-16 21:34:00.149 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=100000000&investmentHorizon=30 - null null
2025-05-16 21:34:00.154 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:34:00.155 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=100000000&investmentHorizon=30 - 204 null null 5.4778ms
2025-05-16 21:34:00.158 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=100000000&investmentHorizon=30 - application/json 483
2025-05-16 21:34:00.161 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:34:00.162 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 21:34:00.167 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 21:34:00.184 +05:30 [INF] Starting product allocation calculation.
2025-05-16 21:34:00.186 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 21:34:00.187 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 21:34:00.195 +05:30 [INF] Product data loaded successfully.
2025-05-16 21:34:00.198 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 21:34:00.200 +05:30 [INF] Calculating investment amount with PercentageSplit: 10.42, TargetAmount: 100000000, AnnualReturn: 10, InvestmentHorizon: 30.
2025-05-16 21:34:00.202 +05:30 [INF] Calculated investment amount: 597155.13.
2025-05-16 21:34:00.203 +05:30 [INF] Calculating investment amount with PercentageSplit: 9.58, TargetAmount: 100000000, AnnualReturn: 9.2, InvestmentHorizon: 30.
2025-05-16 21:34:00.205 +05:30 [INF] Calculated investment amount: 683417.91.
2025-05-16 21:34:00.206 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 21:34:00.207 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.98, TargetAmount: 100000000, AnnualReturn: 12.5, InvestmentHorizon: 30.
2025-05-16 21:34:00.210 +05:30 [INF] Calculated investment amount: 233038.25.
2025-05-16 21:34:00.211 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.02, TargetAmount: 100000000, AnnualReturn: 11, InvestmentHorizon: 30.
2025-05-16 21:34:00.213 +05:30 [INF] Calculated investment amount: 306653.37.
2025-05-16 21:34:00.214 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 21:34:00.216 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.72, TargetAmount: 100000000, AnnualReturn: 14, InvestmentHorizon: 30.
2025-05-16 21:34:00.219 +05:30 [INF] Calculated investment amount: 151520.63.
2025-05-16 21:34:00.221 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.28, TargetAmount: 100000000, AnnualReturn: 13.2, InvestmentHorizon: 30.
2025-05-16 21:34:00.224 +05:30 [INF] Calculated investment amount: 176497.51.
2025-05-16 21:34:00.226 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 21:34:00.228 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.3, TargetAmount: 100000000, AnnualReturn: 5, InvestmentHorizon: 30.
2025-05-16 21:34:00.231 +05:30 [INF] Calculated investment amount: 532168.13.
2025-05-16 21:34:00.233 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.2, TargetAmount: 100000000, AnnualReturn: 4.8, InvestmentHorizon: 30.
2025-05-16 21:34:00.236 +05:30 [INF] Calculated investment amount: 538994.34.
2025-05-16 21:34:00.237 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 21:34:00.240 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.94, TargetAmount: 100000000, AnnualReturn: 6.8, InvestmentHorizon: 30.
2025-05-16 21:34:00.242 +05:30 [INF] Calculated investment amount: 408516.64.
2025-05-16 21:34:00.244 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.06, TargetAmount: 100000000, AnnualReturn: 7.1, InvestmentHorizon: 30.
2025-05-16 21:34:00.246 +05:30 [INF] Calculated investment amount: 390874.47.
2025-05-16 21:34:00.248 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 21:34:00.250 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.21, TargetAmount: 100000000, AnnualReturn: 5.5, InvestmentHorizon: 30.
2025-05-16 21:34:00.252 +05:30 [INF] Calculated investment amount: 443423.27.
2025-05-16 21:34:00.254 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.29, TargetAmount: 100000000, AnnualReturn: 5.7, InvestmentHorizon: 30.
2025-05-16 21:34:00.257 +05:30 [INF] Calculated investment amount: 434096.08.
2025-05-16 21:34:00.259 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 21:34:00.261 +05:30 [ERR] Invalid input detected: Percentage split must be between 1 and 100.
System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
2025-05-16 21:34:00.282 +05:30 [ERR] Error calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
2025-05-16 21:34:00.287 +05:30 [ERR] Error occurred while calculating product allocations.
System.ArgumentException: Error processing input parameters
 ---> System.ArgumentException: Percentage split must be between 1 and 100.
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 88
   --- End of inner exception stack trace ---
   at WisVestAPI.Services.InvestmentAmountService.CalculateInvestmentAmount(Double percentageSplit, Double targetAmount, Double annualReturn, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\InvestmentAmountService.cs:line 122
   at WisVestAPI.Services.ProductAllocationService.CalculateProductAllocations(Dictionary`2 subAllocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Services\ProductAllocationService.cs:line 68
   at WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations(AllocationResultDTO allocationResult, Double targetAmount, Int32 investmentHorizon) in C:\Users\Bhavya Bansal\OneDrive\Desktop\f_in\Final backend code without enhancements\Controllers\ProdAllocController.cs:line 106
2025-05-16 21:34:00.298 +05:30 [INF] Executing ObjectResult, writing value of type 'System.String'.
2025-05-16 21:34:00.304 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 135.7297ms
2025-05-16 21:34:00.309 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 21:34:00.311 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=100000000&investmentHorizon=30 - 500 null text/plain; charset=utf-8 153.4899ms
2025-05-16 21:34:04.696 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - null null
2025-05-16 21:34:04.701 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:34:04.701 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - 204 null null 5.3461ms
2025-05-16 21:34:04.708 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Products/products - null null
2025-05-16 21:34:04.721 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:34:04.726 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest)'
2025-05-16 21:34:04.735 +05:30 [INF] Route matched with {action = "LoadProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] LoadProducts() on controller WisVestAPI.Controllers.ProductsController (WisVest).
2025-05-16 21:34:04.763 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[WisVestAPI.Models.DTOs.ProductDTO, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-05-16 21:34:04.781 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest) in 38.2999ms
2025-05-16 21:34:04.785 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest)'
2025-05-16 21:34:04.788 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Products/products - 200 null application/json; charset=utf-8 80.5298ms
2025-05-16 21:34:25.025 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-16 21:34:25.033 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:34:25.036 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 10.644ms
2025-05-16 21:34:25.039 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 97
2025-05-16 21:34:25.040 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:34:25.042 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 21:34:25.043 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 21:34:25.049 +05:30 [INF] Starting allocation calculation...
2025-05-16 21:34:25.052 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-16 21:34:25.053 +05:30 [INF] Looking up base allocation for key: Low+Long
2025-05-16 21:34:25.055 +05:30 [INF] Base allocation found: {"equity":30,"fixedIncome":45,"commodities":10,"cash":10,"realEstate":5}
2025-05-16 21:34:25.058 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-16 21:34:25.060 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-16 21:34:25.062 +05:30 [INF] Looking up goal tuning for goal: Retirement
2025-05-16 21:34:25.063 +05:30 [INF] Goal tuning found: {"fixedIncome_boost":10,"realEstate_boost":5}
2025-05-16 21:34:25.069 +05:30 [INF] Sub-allocations for equity: {"Large Cap":25,"Mid Cap":10,"Small Cap":5}
2025-05-16 21:34:25.072 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":17.5,"Corp Bonds":7,"Fixed Dep":10.5}
2025-05-16 21:34:25.073 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":6.25,"Energy":2.5,"Agriculture":1.25}
2025-05-16 21:34:25.075 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":1.15,"Savings Acc":1.92,"T. Bill":1.92}
2025-05-16 21:34:25.076 +05:30 [INF] Sub-allocations for realEstate: {"REITs":4,"Residential Prop":4,"Commercial Prop":2}
2025-05-16 21:34:25.078 +05:30 [INF] Added sub-assets for equity: {"Large Cap":25,"Mid Cap":10,"Small Cap":5}
2025-05-16 21:34:25.080 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":17.5,"Corp Bonds":7,"Fixed Dep":10.5}
2025-05-16 21:34:25.083 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":6.25,"Energy":2.5,"Agriculture":1.25}
2025-05-16 21:34:25.086 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":1.15,"Savings Acc":1.92,"T. Bill":1.92}
2025-05-16 21:34:25.089 +05:30 [INF] Added sub-assets for realEstate: {"REITs":4,"Residential Prop":4,"Commercial Prop":2}
2025-05-16 21:34:25.092 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":40,"subAssets":{"Large Cap":25,"Mid Cap":10,"Small Cap":5}},"fixedIncome":{"percentage":35,"subAssets":{"Gov Bonds":17.5,"Corp Bonds":7,"Fixed Dep":10.5}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":6.25,"Energy":2.5,"Agriculture":1.25}},"cash":{"percentage":5,"subAssets":{"Liquid Mutual Funds":1.15,"Savings Acc":1.92,"T. Bill":1.92}},"realEstate":{"percentage":10,"subAssets":{"REITs":4,"Residential Prop":4,"Commercial Prop":2}}}
2025-05-16 21:34:25.097 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-16 21:34:25.099 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":40,"subAssets":{"Large Cap":25,"Mid Cap":10,"Small Cap":5}},"fixedIncome":{"percentage":35,"subAssets":{"Gov Bonds":17.5,"Corp Bonds":7,"Fixed Dep":10.5}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":6.25,"Energy":2.5,"Agriculture":1.25}},"cash":{"percentage":5,"subAssets":{"Liquid Mutual Funds":1.15,"Savings Acc":1.92,"T. Bill":1.92}},"realEstate":{"percentage":10,"subAssets":{"REITs":4,"Residential Prop":4,"Commercial Prop":2}}}
2025-05-16 21:34:25.101 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-16 21:34:25.103 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 55.5405ms
2025-05-16 21:34:25.105 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-16 21:34:25.106 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 67.6982ms
2025-05-16 21:34:25.110 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=100000&investmentHorizon=11 - null null
2025-05-16 21:34:25.114 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:34:25.115 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=100000&investmentHorizon=11 - 204 null null 4.8303ms
2025-05-16 21:34:25.120 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=100000&investmentHorizon=11 - application/json 486
2025-05-16 21:34:25.124 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:34:25.125 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 21:34:25.127 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, Int32) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 21:34:25.132 +05:30 [INF] Starting product allocation calculation.
2025-05-16 21:34:25.133 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-16 21:34:25.136 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-16 21:34:25.142 +05:30 [INF] Product data loaded successfully.
2025-05-16 21:34:25.143 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-16 21:34:25.146 +05:30 [INF] Calculating investment amount with PercentageSplit: 13.02, TargetAmount: 100000, AnnualReturn: 10, InvestmentHorizon: 11.
2025-05-16 21:34:25.148 +05:30 [INF] Calculated investment amount: 4563.43.
2025-05-16 21:34:25.150 +05:30 [INF] Calculating investment amount with PercentageSplit: 11.98, TargetAmount: 100000, AnnualReturn: 9.2, InvestmentHorizon: 11.
2025-05-16 21:34:25.153 +05:30 [INF] Calculated investment amount: 4549.96.
2025-05-16 21:34:25.154 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-16 21:34:25.156 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.32, TargetAmount: 100000, AnnualReturn: 12.5, InvestmentHorizon: 11.
2025-05-16 21:34:25.159 +05:30 [INF] Calculated investment amount: 1456.24.
2025-05-16 21:34:25.161 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.68, TargetAmount: 100000, AnnualReturn: 11, InvestmentHorizon: 11.
2025-05-16 21:34:25.164 +05:30 [INF] Calculated investment amount: 1484.89.
2025-05-16 21:34:25.165 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-16 21:34:25.167 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.57, TargetAmount: 100000, AnnualReturn: 14, InvestmentHorizon: 11.
2025-05-16 21:34:25.169 +05:30 [INF] Calculated investment amount: 608.11.
2025-05-16 21:34:25.170 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.43, TargetAmount: 100000, AnnualReturn: 13.2, InvestmentHorizon: 11.
2025-05-16 21:34:25.173 +05:30 [INF] Calculated investment amount: 621.29.
2025-05-16 21:34:25.174 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-16 21:34:25.176 +05:30 [INF] Calculating investment amount with PercentageSplit: 8.93, TargetAmount: 100000, AnnualReturn: 5, InvestmentHorizon: 11.
2025-05-16 21:34:25.179 +05:30 [INF] Calculated investment amount: 5221.19.
2025-05-16 21:34:25.180 +05:30 [INF] Calculating investment amount with PercentageSplit: 8.57, TargetAmount: 100000, AnnualReturn: 4.8, InvestmentHorizon: 11.
2025-05-16 21:34:25.182 +05:30 [INF] Calculated investment amount: 5116.9.
2025-05-16 21:34:25.184 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-16 21:34:25.185 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.42, TargetAmount: 100000, AnnualReturn: 6.8, InvestmentHorizon: 11.
2025-05-16 21:34:25.187 +05:30 [INF] Calculated investment amount: 1658.6.
2025-05-16 21:34:25.188 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.58, TargetAmount: 100000, AnnualReturn: 7.1, InvestmentHorizon: 11.
2025-05-16 21:34:25.190 +05:30 [INF] Calculated investment amount: 1683.44.
2025-05-16 21:34:25.192 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-16 21:34:25.194 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.16, TargetAmount: 100000, AnnualReturn: 5.5, InvestmentHorizon: 11.
2025-05-16 21:34:25.196 +05:30 [INF] Calculated investment amount: 2863.34.
2025-05-16 21:34:25.197 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.34, TargetAmount: 100000, AnnualReturn: 5.7, InvestmentHorizon: 11.
2025-05-16 21:34:25.199 +05:30 [INF] Calculated investment amount: 2902.13.
2025-05-16 21:34:25.200 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-16 21:34:25.202 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.46, TargetAmount: 100000, AnnualReturn: 7.8, InvestmentHorizon: 11.
2025-05-16 21:34:25.204 +05:30 [INF] Calculated investment amount: 1514.5.
2025-05-16 21:34:25.206 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.79, TargetAmount: 100000, AnnualReturn: 6.3, InvestmentHorizon: 11.
2025-05-16 21:34:25.208 +05:30 [INF] Calculated investment amount: 1424.75.
2025-05-16 21:34:25.209 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Energy.
2025-05-16 21:34:25.211 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.18, TargetAmount: 100000, AnnualReturn: 9.2, InvestmentHorizon: 11.
2025-05-16 21:34:25.214 +05:30 [INF] Calculated investment amount: 448.16.
2025-05-16 21:34:25.215 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.32, TargetAmount: 100000, AnnualReturn: 10.3, InvestmentHorizon: 11.
2025-05-16 21:34:25.217 +05:30 [INF] Calculated investment amount: 449.
2025-05-16 21:34:25.218 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Agriculture.
2025-05-16 21:34:25.220 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.69, TargetAmount: 100000, AnnualReturn: 8.5, InvestmentHorizon: 11.
2025-05-16 21:34:25.222 +05:30 [INF] Calculated investment amount: 281.27.
2025-05-16 21:34:25.224 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.56, TargetAmount: 100000, AnnualReturn: 7, InvestmentHorizon: 11.
2025-05-16 21:34:25.227 +05:30 [INF] Calculated investment amount: 266.05.
2025-05-16 21:34:25.229 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Liquid Mutual Funds.
2025-05-16 21:34:25.230 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.59, TargetAmount: 100000, AnnualReturn: 5.2, InvestmentHorizon: 11.
2025-05-16 21:34:25.233 +05:30 [INF] Calculated investment amount: 337.81.
2025-05-16 21:34:25.234 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.56, TargetAmount: 100000, AnnualReturn: 5, InvestmentHorizon: 11.
2025-05-16 21:34:25.236 +05:30 [INF] Calculated investment amount: 327.42.
2025-05-16 21:34:25.238 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Savings Acc.
2025-05-16 21:34:25.240 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.9, TargetAmount: 100000, AnnualReturn: 3.5, InvestmentHorizon: 11.
2025-05-16 21:34:25.242 +05:30 [INF] Calculated investment amount: 616.45.
2025-05-16 21:34:25.244 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.02, TargetAmount: 100000, AnnualReturn: 4, InvestmentHorizon: 11.
2025-05-16 21:34:25.246 +05:30 [INF] Calculated investment amount: 662.57.
2025-05-16 21:34:25.248 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: T. Bill.
2025-05-16 21:34:25.249 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.93, TargetAmount: 100000, AnnualReturn: 5.1, InvestmentHorizon: 11.
2025-05-16 21:34:25.252 +05:30 [INF] Calculated investment amount: 538.09.
2025-05-16 21:34:25.253 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.99, TargetAmount: 100000, AnnualReturn: 5.4, InvestmentHorizon: 11.
2025-05-16 21:34:25.256 +05:30 [INF] Calculated investment amount: 555.12.
2025-05-16 21:34:25.258 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: REITs.
2025-05-16 21:34:25.259 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.93, TargetAmount: 100000, AnnualReturn: 8.9, InvestmentHorizon: 11.
2025-05-16 21:34:25.261 +05:30 [INF] Calculated investment amount: 755.53.
2025-05-16 21:34:25.263 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.07, TargetAmount: 100000, AnnualReturn: 9.5, InvestmentHorizon: 11.
2025-05-16 21:34:25.266 +05:30 [INF] Calculated investment amount: 762.81.
2025-05-16 21:34:25.269 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Residential Prop.
2025-05-16 21:34:25.271 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.91, TargetAmount: 100000, AnnualReturn: 6.7, InvestmentHorizon: 11.
2025-05-16 21:34:25.274 +05:30 [INF] Calculated investment amount: 935.89.
2025-05-16 21:34:25.275 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.09, TargetAmount: 100000, AnnualReturn: 7.3, InvestmentHorizon: 11.
2025-05-16 21:34:25.277 +05:30 [INF] Calculated investment amount: 962.83.
2025-05-16 21:34:25.279 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Commercial Prop.
2025-05-16 21:34:25.281 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.02, TargetAmount: 100000, AnnualReturn: 10.2, InvestmentHorizon: 11.
2025-05-16 21:34:25.284 +05:30 [INF] Calculated investment amount: 350.43.
2025-05-16 21:34:25.285 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.98, TargetAmount: 100000, AnnualReturn: 9.8, InvestmentHorizon: 11.
2025-05-16 21:34:25.287 +05:30 [INF] Calculated investment amount: 350.43.
2025-05-16 21:34:25.302 +05:30 [INF] Product allocations saved successfully to ProductAllocations.json
2025-05-16 21:34:25.308 +05:30 [INF] Final Product Allocations: {"equity":{"Large Cap":{"BlueChip Fund ":{"product_name":"BlueChip Fund ","annual_return":10,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Stable returns","Low risk"],"cons":["Lower growth"],"risk_level":"Low","percentage_split":13.02,"InvestmentAmount":4563.43},"Index Fund ":{"product_name":"Index Fund ","annual_return":9.2,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Diversified","Low cost"],"cons":["Market dependent"],"risk_level":"Moderate","percentage_split":11.98,"InvestmentAmount":4549.96}},"Mid Cap":{"Mid Cap Growth ":{"product_name":"Mid Cap Growth ","annual_return":12.5,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["High growth potential"],"cons":["Volatile"],"risk_level":"High","percentage_split":5.32,"InvestmentAmount":1456.24},"MidCap Blend ":{"product_name":"MidCap Blend ","annual_return":11,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["Balanced approach"],"cons":["Moderate risk"],"risk_level":"Moderate","percentage_split":4.68,"InvestmentAmount":1484.89}},"Small Cap":{"SmallCap Aggressive ":{"product_name":"SmallCap Aggressive ","annual_return":14,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Medium","pros":["High return potential"],"cons":["Very volatile"],"risk_level":"High","percentage_split":2.57,"InvestmentAmount":608.11},"Emerging Companies ":{"product_name":"Emerging Companies ","annual_return":13.2,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Low","pros":["Growth stocks"],"cons":["Liquidity risk"],"risk_level":"High","percentage_split":2.43,"InvestmentAmount":621.29}}},"fixedIncome":{"Gov Bonds":{"Government Bond ":{"product_name":"Government Bond ","annual_return":5,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Very safe","Guaranteed return"],"cons":["Low return"],"risk_level":"Low","percentage_split":8.93,"InvestmentAmount":5221.19},"Sovereign Bond ":{"product_name":"Sovereign Bond ","annual_return":4.8,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Stable income"],"cons":["Interest rate sensitive"],"risk_level":"Low","percentage_split":8.57,"InvestmentAmount":5116.9}},"Corp Bonds":{"Corporate Bond ":{"product_name":"Corporate Bond ","annual_return":6.8,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Better return"],"cons":["Company risk"],"risk_level":"Moderate","percentage_split":3.42,"InvestmentAmount":1658.6},"Private Corp Bond ":{"product_name":"Private Corp Bond ","annual_return":7.1,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Good yield"],"cons":["Credit risk"],"risk_level":"High","percentage_split":3.58,"InvestmentAmount":1683.44}},"Fixed Dep":{"Fixed Deposit ":{"product_name":"Fixed Deposit ","annual_return":5.5,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Capital safety"],"cons":["Low returns"],"risk_level":"Low","percentage_split":5.16,"InvestmentAmount":2863.34},"Bank FD ":{"product_name":"Bank FD ","annual_return":5.7,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Easy access"],"cons":["Taxable"],"risk_level":"Low","percentage_split":5.34,"InvestmentAmount":2902.13}}},"commodities":{"Precious Metals":{"Gold ETF":{"product_name":"Gold ETF","annual_return":7.8,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Inflation hedge","Safe haven asset"],"cons":["No income generation","Price volatility"],"risk_level":"Moderate","percentage_split":3.46,"InvestmentAmount":1514.5},"Silver Trust":{"product_name":"Silver Trust","annual_return":6.3,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Alternative investment","Deflation hedge"],"cons":["Subject to price swings","Not income-producing"],"risk_level":"Moderate","percentage_split":2.79,"InvestmentAmount":1424.75}},"Energy":{"Energy Fund":{"product_name":"Energy Fund","annual_return":9.2,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["High demand","Diversified exposure"],"cons":["Subject to price fluctuations","Geopolitical risks"],"risk_level":"Moderate","percentage_split":1.18,"InvestmentAmount":448.16},"Oil \u0026 Gas ETF":{"product_name":"Oil \u0026 Gas ETF","annual_return":10.3,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["Strong returns","Global demand"],"cons":["Environmental impact","Political risk"],"risk_level":"High","percentage_split":1.32,"InvestmentAmount":449}},"Agriculture":{"Agricultural ETF":{"product_name":"Agricultural ETF","annual_return":8.5,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Diversification","Growth potential"],"cons":["Weather dependent","Global supply issues"],"risk_level":"Moderate","percentage_split":0.69,"InvestmentAmount":281.27},"Crop Futures B":{"product_name":"Crop Futures B","annual_return":7,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Alternative to stocks","Hedge against inflation"],"cons":["Market volatility","Weather sensitivity"],"risk_level":"Moderate","percentage_split":0.56,"InvestmentAmount":266.05}}},"cash":{"Liquid Mutual Funds":{"Liquid Fund":{"product_name":"Liquid Fund","annual_return":5.2,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Quick redemption","Low risk"],"cons":["Lower returns","Short-term horizon"],"risk_level":"Low","percentage_split":0.59,"InvestmentAmount":337.81},"Ultra Short Fund":{"product_name":"Ultra Short Fund","annual_return":5,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Better returns than savings","High liquidity"],"cons":["Interest rate risk","Short-term only"],"risk_level":"Low","percentage_split":0.56,"InvestmentAmount":327.42}},"Savings Acc":{"Standard Savings Account":{"product_name":"Standard Savings Account","annual_return":3.5,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Very liquid","Capital safety"],"cons":["Very low returns","Not suitable for growth"],"risk_level":"Low","percentage_split":0.9,"InvestmentAmount":616.45},"High Interest Savings":{"product_name":"High Interest Savings","annual_return":4,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Slightly higher returns","Safe and accessible"],"cons":["Still low returns","Inflation risk"],"risk_level":"Low","percentage_split":1.02,"InvestmentAmount":662.57}},"T. Bill":{"91-Day T-Bill":{"product_name":"91-Day T-Bill","annual_return":5.1,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Government backed","Low risk"],"cons":["Fixed tenure","Lower yield"],"risk_level":"Low","percentage_split":0.93,"InvestmentAmount":538.09},"182-Day T-Bill":{"product_name":"182-Day T-Bill","annual_return":5.4,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Safe investment","Short maturity"],"cons":["Not liquid before maturity","Limited returns"],"risk_level":"Low","percentage_split":0.99,"InvestmentAmount":555.12}}},"realEstate":{"REITs":{"REITs Trust ":{"product_name":"REITs Trust ","annual_return":8.9,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"Moderate","pros":["Stable returns","Diversified portfolio"],"cons":["Sensitive to interest rates","Limited growth"],"risk_level":"Moderate","percentage_split":1.93,"InvestmentAmount":755.53},"Vanguad Real Estate":{"product_name":"Vanguad Real Estate","annual_return":9.5,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"High","pros":["Tax efficiency","Regular income"],"cons":["Market volatility","Fees"],"risk_level":"High","percentage_split":2.07,"InvestmentAmount":762.81}},"Residential Prop":{"Residential Scheme ":{"product_name":"Residential Scheme ","annual_return":6.7,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Low","pros":["Stable income","Low volatility"],"cons":["Low liquidity","Maintenance costs"],"risk_level":"Low","percentage_split":1.91,"InvestmentAmount":935.89},"Housing Fund":{"product_name":"Housing Fund","annual_return":7.3,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Moderate","pros":["Tax benefits","Long-term growth"],"cons":["Location dependent","Slow ROI"],"risk_level":"Moderate","percentage_split":2.09,"InvestmentAmount":962.83}},"Commercial Prop":{"Commercial Plaza":{"product_name":"Commercial Plaza","annual_return":10.2,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Low","pros":["High rental yields","Strong appreciation"],"cons":["High initial cost","Vacancy risk"],"risk_level":"High","percentage_split":1.02,"InvestmentAmount":350.43},"Office Fund":{"product_name":"Office Fund","annual_return":9.8,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Moderate","pros":["Steady returns","Long leases"],"cons":["Tenant turnover","High maintenance"],"risk_level":"High","percentage_split":0.98,"InvestmentAmount":350.43}}}}
2025-05-16 21:34:25.310 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 21:34:25.317 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 187.3882ms
2025-05-16 21:34:25.321 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-16 21:34:25.324 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=100000&investmentHorizon=11 - 200 null application/json; charset=utf-8 204.6694ms
2025-05-16 21:34:25.332 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 21:34:25.333 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 21:34:25.336 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:34:25.341 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:34:25.342 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 10.2974ms
2025-05-16 21:34:25.343 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 9.4248ms
2025-05-16 21:34:25.346 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-16 21:34:25.350 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-16 21:34:25.357 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:34:25.359 +05:30 [INF] CORS policy execution successful.
2025-05-16 21:34:25.360 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 21:34:25.361 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 21:34:25.370 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-16 21:34:25.371 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-16 21:34:25.381 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-16 21:34:25.385 +05:30 [INF] Final allocation JSON read successfully.
2025-05-16 21:34:25.388 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 21:34:25.388 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-16 21:34:25.395 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 19.791ms
2025-05-16 21:34:25.398 +05:30 [INF] Product allocations JSON read successfully.
2025-05-16 21:34:25.400 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-16 21:34:25.405 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 58.8061ms
2025-05-16 21:34:25.411 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType2`2[[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Double, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-16 21:34:25.419 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 38.8875ms
2025-05-16 21:34:25.420 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-16 21:34:25.423 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 73.1197ms
